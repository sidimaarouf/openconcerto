/*
 * DynamicJava - Copyright (C) 1999 Dyade
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
 * associated documentation files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge, publish, distribute,
 * sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions: The above copyright notice and this
 * permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT
 * NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL DYADE BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH
 * THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
 * Except as contained in this notice, the name of Dyade shall not be used in advertising or
 * otherwise to promote the sale, use or other dealings in this Software without prior written
 * authorization from Dyade.
 */

/* Generated By:JavaCC: Do not edit this line. ParserTokenManager.java */
package koala.dynamicjava.parser;

public class ParserTokenManager implements ParserConstants {
    private final int jjStopAtPos(final int pos, final int kind) {
        this.jjmatchedKind = kind;
        this.jjmatchedPos = pos;
        return pos + 1;
    }

    private final int jjMoveStringLiteralDfa0_3() {
        switch (this.curChar) {
        case 42:
            return jjMoveStringLiteralDfa1_3(0x1000L);
        default:
            return 1;
        }
    }

    private final int jjMoveStringLiteralDfa1_3(final long active0) {
        try {
            this.curChar = this.input_stream.readChar();
        } catch (final java.io.IOException e) {
            return 1;
        }
        switch (this.curChar) {
        case 47:
            if ((active0 & 0x1000L) != 0L) {
                return jjStopAtPos(1, 12);
            }
            break;
        default:
            return 2;
        }
        return 2;
    }

    private final int jjMoveStringLiteralDfa0_2() {
        switch (this.curChar) {
        case 42:
            return jjMoveStringLiteralDfa1_2(0x800L);
        default:
            return 1;
        }
    }

    private final int jjMoveStringLiteralDfa1_2(final long active0) {
        try {
            this.curChar = this.input_stream.readChar();
        } catch (final java.io.IOException e) {
            return 1;
        }
        switch (this.curChar) {
        case 47:
            if ((active0 & 0x800L) != 0L) {
                return jjStopAtPos(1, 11);
            }
            break;
        default:
            return 2;
        }
        return 2;
    }

    private final int jjMoveStringLiteralDfa0_1() {
        return jjMoveNfa_1(0, 0);
    }

    private final void jjCheckNAdd(final int state) {
        if (this.jjrounds[state] != this.jjround) {
            this.jjstateSet[this.jjnewStateCnt++] = state;
            this.jjrounds[state] = this.jjround;
        }
    }

    private final void jjAddStates(int start, final int end) {
        do {
            this.jjstateSet[this.jjnewStateCnt++] = jjnextStates[start];
        } while (start++ != end);
    }

    private final void jjCheckNAddTwoStates(final int state1, final int state2) {
        jjCheckNAdd(state1);
        jjCheckNAdd(state2);
    }

    private final void jjCheckNAddStates(int start, final int end) {
        do {
            jjCheckNAdd(jjnextStates[start]);
        } while (start++ != end);
    }

    private final void jjCheckNAddStates(final int start) {
        jjCheckNAdd(jjnextStates[start]);
        jjCheckNAdd(jjnextStates[start + 1]);
    }

    private final int jjMoveNfa_1(final int startState, int curPos) {
        final int[] nextStates;
        int startsAt = 0;
        this.jjnewStateCnt = 3;
        int i = 1;
        this.jjstateSet[0] = startState;
        final int j;
        int kind = 0x7fffffff;
        for (;;) {
            if (++this.jjround == 0x7fffffff) {
                ReInitRounds();
            }
            if (this.curChar < 64) {
                final long l = 1L << this.curChar;
                MatchLoop: do {
                    switch (this.jjstateSet[--i]) {
                    case 0:
                        if ((0x2400L & l) != 0L) {
                            if (kind > 10) {
                                kind = 10;
                            }
                        }
                        if (this.curChar == 13) {
                            this.jjstateSet[this.jjnewStateCnt++] = 1;
                        }
                        break;
                    case 1:
                        if (this.curChar == 10 && kind > 10) {
                            kind = 10;
                        }
                        break;
                    case 2:
                        if (this.curChar == 13) {
                            this.jjstateSet[this.jjnewStateCnt++] = 1;
                        }
                        break;
                    default:
                        break;
                    }
                } while (i != startsAt);
            } else if (this.curChar < 128) {
                final long l = 1L << (this.curChar & 077);
                MatchLoop: do {
                    switch (this.jjstateSet[--i]) {
                    default:
                        break;
                    }
                } while (i != startsAt);
            } else {
                final int hiByte = (int) (this.curChar >> 8);
                final int i1 = hiByte >> 6;
                final long l1 = 1L << (hiByte & 077);
                final int i2 = (this.curChar & 0xff) >> 6;
                final long l2 = 1L << (this.curChar & 077);
                MatchLoop: do {
                    switch (this.jjstateSet[--i]) {
                    default:
                        break;
                    }
                } while (i != startsAt);
            }
            if (kind != 0x7fffffff) {
                this.jjmatchedKind = kind;
                this.jjmatchedPos = curPos;
                kind = 0x7fffffff;
            }
            ++curPos;
            if ((i = this.jjnewStateCnt) == (startsAt = 3 - (this.jjnewStateCnt = startsAt))) {
                return curPos;
            }
            try {
                this.curChar = this.input_stream.readChar();
            } catch (final java.io.IOException e) {
                return curPos;
            }
        }
    }

    private final int jjStopStringLiteralDfa_0(final int pos, final long active0, final long active1) {
        switch (pos) {
        case 0:
            if ((active1 & 0x200000L) != 0L) {
                return 75;
            }
            if ((active0 & 0xffffffffffffc000L) != 0L) {
                this.jjmatchedKind = 74;
                return 23;
            }
            if ((active0 & 0x240L) != 0L || (active1 & 0x8010000000000L) != 0L) {
                return 2;
            }
            return -1;
        case 1:
            if ((active0 & 0x200L) != 0L) {
                return 0;
            }
            if ((active0 & 0x806000000L) != 0L) {
                return 23;
            }
            if ((active0 & 0xfffffff7f9ffc000L) != 0L) {
                if (this.jjmatchedPos != 1) {
                    this.jjmatchedKind = 74;
                    this.jjmatchedPos = 1;
                }
                return 23;
            }
            return -1;
        case 2:
            if ((active0 & 0xeffff675fdffc000L) != 0L) {
                if (this.jjmatchedPos != 2) {
                    this.jjmatchedKind = 74;
                    this.jjmatchedPos = 2;
                }
                return 23;
            }
            if ((active0 & 0x1000098200000000L) != 0L) {
                return 23;
            }
            return -1;
        case 3:
            if ((active0 & 0xc77fe571f5e9c000L) != 0L) {
                this.jjmatchedKind = 74;
                this.jjmatchedPos = 3;
                return 23;
            }
            if ((active0 & 0x2880120408160000L) != 0L) {
                return 23;
            }
            return -1;
        case 4:
            if ((active0 & 0x446be5701580c000L) != 0L) {
                if (this.jjmatchedPos != 4) {
                    this.jjmatchedKind = 74;
                    this.jjmatchedPos = 4;
                }
                return 23;
            }
            if ((active0 & 0x83140001e0690000L) != 0L) {
                return 23;
            }
            return -1;
        case 5:
            if ((active0 & 0x4440e1509180c000L) != 0L) {
                this.jjmatchedKind = 74;
                this.jjmatchedPos = 5;
                return 23;
            }
            if ((active0 & 0x22b042004000000L) != 0L) {
                return 23;
            }
            return -1;
        case 6:
            if ((active0 & 0x4440815000804000L) != 0L) {
                this.jjmatchedKind = 74;
                this.jjmatchedPos = 6;
                return 23;
            }
            if ((active0 & 0x600091008000L) != 0L) {
                return 23;
            }
            return -1;
        case 7:
            if ((active0 & 0x4000000000804000L) != 0L) {
                return 23;
            }
            if ((active0 & 0x440815000000000L) != 0L) {
                this.jjmatchedKind = 74;
                this.jjmatchedPos = 7;
                return 23;
            }
            return -1;
        case 8:
            if ((active0 & 0x40005000000000L) != 0L) {
                this.jjmatchedKind = 74;
                this.jjmatchedPos = 8;
                return 23;
            }
            if ((active0 & 0x400810000000000L) != 0L) {
                return 23;
            }
            return -1;
        case 9:
            if ((active0 & 0x40000000000000L) != 0L) {
                this.jjmatchedKind = 74;
                this.jjmatchedPos = 9;
                return 23;
            }
            if ((active0 & 0x5000000000L) != 0L) {
                return 23;
            }
            return -1;
        case 10:
            if ((active0 & 0x40000000000000L) != 0L) {
                this.jjmatchedKind = 74;
                this.jjmatchedPos = 10;
                return 23;
            }
            return -1;
        default:
            return -1;
        }
    }

    private final int jjStartNfa_0(final int pos, final long active0, final long active1) {
        return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
    }

    private final int jjStartNfaWithStates_0(final int pos, final int kind, final int state) {
        this.jjmatchedKind = kind;
        this.jjmatchedPos = pos;
        try {
            this.curChar = this.input_stream.readChar();
        } catch (final java.io.IOException e) {
            return pos + 1;
        }
        return jjMoveNfa_0(state, pos + 1);
    }

    private final int jjMoveStringLiteralDfa0_0() {
        switch (this.curChar) {
        case 33:
            this.jjmatchedKind = 89;
            return jjMoveStringLiteralDfa1_0(0x0L, 0x100000000L);
        case 35:
            return jjStopAtPos(0, 7);
        case 37:
            this.jjmatchedKind = 108;
            return jjMoveStringLiteralDfa1_0(0x0L, 0x80000000000000L);
        case 38:
            this.jjmatchedKind = 105;
            return jjMoveStringLiteralDfa1_0(0x0L, 0x10000400000000L);
        case 40:
            return jjStopAtPos(0, 77);
        case 41:
            return jjStopAtPos(0, 78);
        case 42:
            this.jjmatchedKind = 103;
            return jjMoveStringLiteralDfa1_0(0x0L, 0x4000000000000L);
        case 43:
            this.jjmatchedKind = 101;
            return jjMoveStringLiteralDfa1_0(0x0L, 0x1000800000000L);
        case 44:
            return jjStopAtPos(0, 84);
        case 45:
            this.jjmatchedKind = 102;
            return jjMoveStringLiteralDfa1_0(0x0L, 0x2001000000000L);
        case 46:
            return jjStartNfaWithStates_0(0, 85, 75);
        case 47:
            this.jjmatchedKind = 104;
            return jjMoveStringLiteralDfa1_0(0x240L, 0x8000000000000L);
        case 58:
            return jjStopAtPos(0, 92);
        case 59:
            return jjStopAtPos(0, 83);
        case 60:
            this.jjmatchedKind = 88;
            return jjMoveStringLiteralDfa1_0(0x0L, 0x100200040000000L);
        case 61:
            this.jjmatchedKind = 86;
            return jjMoveStringLiteralDfa1_0(0x0L, 0x20000000L);
        case 62:
            this.jjmatchedKind = 87;
            return jjMoveStringLiteralDfa1_0(0x0L, 0x600c00080000000L);
        case 63:
            return jjStopAtPos(0, 91);
        case 91:
            return jjStopAtPos(0, 81);
        case 93:
            return jjStopAtPos(0, 82);
        case 94:
            this.jjmatchedKind = 107;
            return jjMoveStringLiteralDfa1_0(0x0L, 0x40000000000000L);
        case 97:
            return jjMoveStringLiteralDfa1_0(0x4000L, 0x0L);
        case 98:
            return jjMoveStringLiteralDfa1_0(0x38000L, 0x0L);
        case 99:
            return jjMoveStringLiteralDfa1_0(0xfc0000L, 0x0L);
        case 100:
            return jjMoveStringLiteralDfa1_0(0x7000000L, 0x0L);
        case 101:
            return jjMoveStringLiteralDfa1_0(0x18000000L, 0x0L);
        case 102:
            return jjMoveStringLiteralDfa1_0(0x3e0000000L, 0x0L);
        case 103:
            return jjMoveStringLiteralDfa1_0(0x400000000L, 0x0L);
        case 105:
            return jjMoveStringLiteralDfa1_0(0x1f800000000L, 0x0L);
        case 108:
            return jjMoveStringLiteralDfa1_0(0x20000000000L, 0x0L);
        case 110:
            return jjMoveStringLiteralDfa1_0(0x1c0000000000L, 0x0L);
        case 112:
            return jjMoveStringLiteralDfa1_0(0x1e00000000000L, 0x0L);
        case 114:
            return jjMoveStringLiteralDfa1_0(0x2000000000000L, 0x0L);
        case 115:
            return jjMoveStringLiteralDfa1_0(0x7c000000000000L, 0x0L);
        case 116:
            return jjMoveStringLiteralDfa1_0(0x1f80000000000000L, 0x0L);
        case 118:
            return jjMoveStringLiteralDfa1_0(0x6000000000000000L, 0x0L);
        case 119:
            return jjMoveStringLiteralDfa1_0(0x8000000000000000L, 0x0L);
        case 123:
            return jjStopAtPos(0, 79);
        case 124:
            this.jjmatchedKind = 106;
            return jjMoveStringLiteralDfa1_0(0x0L, 0x20000200000000L);
        case 125:
            return jjStopAtPos(0, 80);
        case 126:
            return jjStopAtPos(0, 90);
        default:
            return jjMoveNfa_0(3, 0);
        }
    }

    private final int jjMoveStringLiteralDfa1_0(final long active0, final long active1) {
        try {
            this.curChar = this.input_stream.readChar();
        } catch (final java.io.IOException e) {
            jjStopStringLiteralDfa_0(0, active0, active1);
            return 1;
        }
        switch (this.curChar) {
        case 38:
            if ((active1 & 0x400000000L) != 0L) {
                return jjStopAtPos(1, 98);
            }
            break;
        case 42:
            if ((active0 & 0x200L) != 0L) {
                return jjStartNfaWithStates_0(1, 9, 0);
            }
            break;
        case 43:
            if ((active1 & 0x800000000L) != 0L) {
                return jjStopAtPos(1, 99);
            }
            break;
        case 45:
            if ((active1 & 0x1000000000L) != 0L) {
                return jjStopAtPos(1, 100);
            }
            break;
        case 47:
            if ((active0 & 0x40L) != 0L) {
                return jjStopAtPos(1, 6);
            }
            break;
        case 60:
            if ((active1 & 0x200000000000L) != 0L) {
                this.jjmatchedKind = 109;
                this.jjmatchedPos = 1;
            }
            return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x100000000000000L);
        case 61:
            if ((active1 & 0x20000000L) != 0L) {
                return jjStopAtPos(1, 93);
            } else if ((active1 & 0x40000000L) != 0L) {
                return jjStopAtPos(1, 94);
            } else if ((active1 & 0x80000000L) != 0L) {
                return jjStopAtPos(1, 95);
            } else if ((active1 & 0x100000000L) != 0L) {
                return jjStopAtPos(1, 96);
            } else if ((active1 & 0x1000000000000L) != 0L) {
                return jjStopAtPos(1, 112);
            } else if ((active1 & 0x2000000000000L) != 0L) {
                return jjStopAtPos(1, 113);
            } else if ((active1 & 0x4000000000000L) != 0L) {
                return jjStopAtPos(1, 114);
            } else if ((active1 & 0x8000000000000L) != 0L) {
                return jjStopAtPos(1, 115);
            } else if ((active1 & 0x10000000000000L) != 0L) {
                return jjStopAtPos(1, 116);
            } else if ((active1 & 0x20000000000000L) != 0L) {
                return jjStopAtPos(1, 117);
            } else if ((active1 & 0x40000000000000L) != 0L) {
                return jjStopAtPos(1, 118);
            } else if ((active1 & 0x80000000000000L) != 0L) {
                return jjStopAtPos(1, 119);
            }
            break;
        case 62:
            if ((active1 & 0x400000000000L) != 0L) {
                this.jjmatchedKind = 110;
                this.jjmatchedPos = 1;
            }
            return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x600800000000000L);
        case 97:
            return jjMoveStringLiteralDfa2_0(active0, 0x2400200c0000L, active1, 0L);
        case 98:
            return jjMoveStringLiteralDfa2_0(active0, 0x4000L, active1, 0L);
        case 101:
            return jjMoveStringLiteralDfa2_0(active0, 0x2080001000000L, active1, 0L);
        case 102:
            if ((active0 & 0x800000000L) != 0L) {
                return jjStartNfaWithStates_0(1, 35, 23);
            }
            break;
        case 104:
            return jjMoveStringLiteralDfa2_0(active0, 0x8384000000100000L, active1, 0L);
        case 105:
            return jjMoveStringLiteralDfa2_0(active0, 0xc0000000L, active1, 0L);
        case 108:
            return jjMoveStringLiteralDfa2_0(active0, 0x108200000L, active1, 0L);
        case 109:
            return jjMoveStringLiteralDfa2_0(active0, 0x3000000000L, active1, 0L);
        case 110:
            return jjMoveStringLiteralDfa2_0(active0, 0x1c000000000L, active1, 0L);
        case 111:
            if ((active0 & 0x2000000L) != 0L) {
                this.jjmatchedKind = 25;
                this.jjmatchedPos = 1;
            }
            return jjMoveStringLiteralDfa2_0(active0, 0x6000020604c08000L, active1, 0L);
        case 114:
            return jjMoveStringLiteralDfa2_0(active0, 0x1c00c00000010000L, active1, 0L);
        case 116:
            return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000L, active1, 0L);
        case 117:
            return jjMoveStringLiteralDfa2_0(active0, 0x11100000000000L, active1, 0L);
        case 119:
            return jjMoveStringLiteralDfa2_0(active0, 0x20000000000000L, active1, 0L);
        case 120:
            return jjMoveStringLiteralDfa2_0(active0, 0x10000000L, active1, 0L);
        case 121:
            return jjMoveStringLiteralDfa2_0(active0, 0x40000000020000L, active1, 0L);
        case 124:
            if ((active1 & 0x200000000L) != 0L) {
                return jjStopAtPos(1, 97);
            }
            break;
        default:
            break;
        }
        return jjStartNfa_0(0, active0, active1);
    }

    private final int jjMoveStringLiteralDfa2_0(final long old0, long active0, final long old1, long active1) {
        if (((active0 &= old0) | (active1 &= old1)) == 0L) {
            return jjStartNfa_0(0, old0, old1);
        }
        try {
            this.curChar = this.input_stream.readChar();
        } catch (final java.io.IOException e) {
            jjStopStringLiteralDfa_0(1, active0, active1);
            return 2;
        }
        switch (this.curChar) {
        case 61:
            if ((active1 & 0x100000000000000L) != 0L) {
                return jjStopAtPos(2, 120);
            } else if ((active1 & 0x200000000000000L) != 0L) {
                return jjStopAtPos(2, 121);
            }
            break;
        case 62:
            if ((active1 & 0x800000000000L) != 0L) {
                this.jjmatchedKind = 111;
                this.jjmatchedPos = 2;
            }
            return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x400000000000000L);
        case 97:
            return jjMoveStringLiteralDfa3_0(active0, 0x408000000300000L, active1, 0L);
        case 98:
            return jjMoveStringLiteralDfa3_0(active0, 0x1000000000000L, active1, 0L);
        case 99:
            return jjMoveStringLiteralDfa3_0(active0, 0x200000000000L, active1, 0L);
        case 101:
            return jjMoveStringLiteralDfa3_0(active0, 0x10000L, active1, 0L);
        case 102:
            return jjMoveStringLiteralDfa3_0(active0, 0x1000000L, active1, 0L);
        case 105:
            return jjMoveStringLiteralDfa3_0(active0, 0xa0a0400000000000L, active1, 0L);
        case 108:
            return jjMoveStringLiteralDfa3_0(active0, 0x4000100020000000L, active1, 0L);
        case 110:
            return jjMoveStringLiteralDfa3_0(active0, 0x400200c0c00000L, active1, 0L);
        case 111:
            return jjMoveStringLiteralDfa3_0(active0, 0x4800100008000L, active1, 0L);
        case 112:
            return jjMoveStringLiteralDfa3_0(active0, 0x10003000000000L, active1, 0L);
        case 114:
            if ((active0 & 0x200000000L) != 0L) {
                return jjStartNfaWithStates_0(2, 33, 23);
            }
            return jjMoveStringLiteralDfa3_0(active0, 0x300000000000000L, active1, 0L);
        case 115:
            return jjMoveStringLiteralDfa3_0(active0, 0x4008044000L, active1, 0L);
        case 116:
            if ((active0 & 0x8000000000L) != 0L) {
                this.jjmatchedKind = 39;
                this.jjmatchedPos = 2;
            }
            return jjMoveStringLiteralDfa3_0(active0, 0x20504100a0000L, active1, 0L);
        case 117:
            return jjMoveStringLiteralDfa3_0(active0, 0x800000004000000L, active1, 0L);
        case 119:
            if ((active0 & 0x80000000000L) != 0L) {
                return jjStartNfaWithStates_0(2, 43, 23);
            }
            break;
        case 121:
            if ((active0 & 0x1000000000000000L) != 0L) {
                return jjStartNfaWithStates_0(2, 60, 23);
            }
            break;
        default:
            break;
        }
        return jjStartNfa_0(1, active0, active1);
    }

    private final int jjMoveStringLiteralDfa3_0(final long old0, long active0, final long old1, long active1) {
        if (((active0 &= old0) | (active1 &= old1)) == 0L) {
            return jjStartNfa_0(1, old0, old1);
        }
        try {
            this.curChar = this.input_stream.readChar();
        } catch (final java.io.IOException e) {
            jjStopStringLiteralDfa_0(2, active0, active1);
            return 3;
        }
        switch (this.curChar) {
        case 61:
            if ((active1 & 0x400000000000000L) != 0L) {
                return jjStopAtPos(3, 122);
            }
            break;
        case 97:
            return jjMoveStringLiteralDfa4_0(active0, 0x40000001c1010000L, active1, 0L);
        case 98:
            return jjMoveStringLiteralDfa4_0(active0, 0x4000000L, active1, 0L);
        case 99:
            return jjMoveStringLiteralDfa4_0(active0, 0x40000000080000L, active1, 0L);
        case 100:
            if ((active0 & 0x2000000000000000L) != 0L) {
                return jjStartNfaWithStates_0(3, 61, 23);
            }
            break;
        case 101:
            if ((active0 & 0x20000L) != 0L) {
                return jjStartNfaWithStates_0(3, 17, 23);
            } else if ((active0 & 0x40000L) != 0L) {
                return jjStartNfaWithStates_0(3, 18, 23);
            } else if ((active0 & 0x8000000L) != 0L) {
                return jjStartNfaWithStates_0(3, 27, 23);
            } else if ((active0 & 0x800000000000000L) != 0L) {
                return jjStartNfaWithStates_0(3, 59, 23);
            }
            return jjMoveStringLiteralDfa4_0(active0, 0x10010010000000L, active1, 0L);
        case 103:
            if ((active0 & 0x20000000000L) != 0L) {
                return jjStartNfaWithStates_0(3, 41, 23);
            }
            break;
        case 105:
            return jjMoveStringLiteralDfa4_0(active0, 0x40000000000L, active1, 0L);
        case 107:
            return jjMoveStringLiteralDfa4_0(active0, 0x200000000000L, active1, 0L);
        case 108:
            if ((active0 & 0x100000000000L) != 0L) {
                return jjStartNfaWithStates_0(3, 44, 23);
            }
            return jjMoveStringLiteralDfa4_0(active0, 0x8001001000008000L, active1, 0L);
        case 110:
            return jjMoveStringLiteralDfa4_0(active0, 0x400000000000000L, active1, 0L);
        case 111:
            if ((active0 & 0x400000000L) != 0L) {
                return jjStartNfaWithStates_0(3, 34, 23);
            }
            return jjMoveStringLiteralDfa4_0(active0, 0x300002000000000L, active1, 0L);
        case 114:
            if ((active0 & 0x100000L) != 0L) {
                return jjStartNfaWithStates_0(3, 20, 23);
            }
            return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000L, active1, 0L);
        case 115:
            if ((active0 & 0x80000000000000L) != 0L) {
                return jjStartNfaWithStates_0(3, 55, 23);
            }
            return jjMoveStringLiteralDfa4_0(active0, 0x20600000L, active1, 0L);
        case 116:
            return jjMoveStringLiteralDfa4_0(active0, 0x28804000804000L, active1, 0L);
        case 117:
            return jjMoveStringLiteralDfa4_0(active0, 0x2000000000000L, active1, 0L);
        case 118:
            return jjMoveStringLiteralDfa4_0(active0, 0x400000000000L, active1, 0L);
        default:
            break;
        }
        return jjStartNfa_0(2, active0, active1);
    }

    private final int jjMoveStringLiteralDfa4_0(final long old0, long active0, final long old1, long active1) {
        if (((active0 &= old0) | (active1 &= old1)) == 0L) {
            return jjStartNfa_0(2, old0, old1);
        }
        try {
            this.curChar = this.input_stream.readChar();
        } catch (final java.io.IOException e) {
            jjStopStringLiteralDfa_0(3, active0, 0L);
            return 4;
        }
        switch (this.curChar) {
        case 97:
            return jjMoveStringLiteralDfa5_0(active0, 0x604000000000L);
        case 99:
            return jjMoveStringLiteralDfa5_0(active0, 0x20000000000000L);
        case 101:
            if ((active0 & 0x20000000L) != 0L) {
                return jjStartNfaWithStates_0(4, 29, 23);
            } else if ((active0 & 0x8000000000000000L) != 0L) {
                return jjStartNfaWithStates_0(4, 63, 23);
            }
            return jjMoveStringLiteralDfa5_0(active0, 0x801000008000L);
        case 104:
            if ((active0 & 0x80000L) != 0L) {
                return jjStartNfaWithStates_0(4, 19, 23);
            }
            return jjMoveStringLiteralDfa5_0(active0, 0x40000000000000L);
        case 105:
            return jjMoveStringLiteralDfa5_0(active0, 0x9000000800000L);
        case 107:
            if ((active0 & 0x10000L) != 0L) {
                return jjStartNfaWithStates_0(4, 16, 23);
            }
            break;
        case 108:
            if ((active0 & 0x40000000L) != 0L) {
                this.jjmatchedKind = 30;
                this.jjmatchedPos = 4;
            }
            return jjMoveStringLiteralDfa5_0(active0, 0x84000000L);
        case 110:
            return jjMoveStringLiteralDfa5_0(active0, 0x10000000L);
        case 114:
            if ((active0 & 0x10000000000000L) != 0L) {
                return jjStartNfaWithStates_0(4, 52, 23);
            }
            return jjMoveStringLiteralDfa5_0(active0, 0x2012000004000L);
        case 115:
            if ((active0 & 0x200000L) != 0L) {
                return jjStartNfaWithStates_0(4, 21, 23);
            }
            return jjMoveStringLiteralDfa5_0(active0, 0x400000000000000L);
        case 116:
            if ((active0 & 0x400000L) != 0L) {
                return jjStartNfaWithStates_0(4, 22, 23);
            } else if ((active0 & 0x100000000L) != 0L) {
                return jjStartNfaWithStates_0(4, 32, 23);
            } else if ((active0 & 0x4000000000000L) != 0L) {
                return jjStartNfaWithStates_0(4, 50, 23);
            }
            return jjMoveStringLiteralDfa5_0(active0, 0x4000000000000000L);
        case 117:
            return jjMoveStringLiteralDfa5_0(active0, 0x1000000L);
        case 118:
            return jjMoveStringLiteralDfa5_0(active0, 0x40000000000L);
        case 119:
            if ((active0 & 0x100000000000000L) != 0L) {
                this.jjmatchedKind = 56;
                this.jjmatchedPos = 4;
            }
            return jjMoveStringLiteralDfa5_0(active0, 0x200000000000000L);
        default:
            break;
        }
        return jjStartNfa_0(3, active0, 0L);
    }

    private final int jjMoveStringLiteralDfa5_0(final long old0, long active0) {
        if ((active0 &= old0) == 0L) {
            return jjStartNfa_0(3, old0, 0L);
        }
        try {
            this.curChar = this.input_stream.readChar();
        } catch (final java.io.IOException e) {
            jjStopStringLiteralDfa_0(4, active0, 0L);
            return 5;
        }
        switch (this.curChar) {
        case 97:
            return jjMoveStringLiteralDfa6_0(active0, 0xc000L);
        case 99:
            if ((active0 & 0x1000000000000L) != 0L) {
                return jjStartNfaWithStates_0(5, 48, 23);
            } else if ((active0 & 0x8000000000000L) != 0L) {
                return jjStartNfaWithStates_0(5, 51, 23);
            }
            return jjMoveStringLiteralDfa6_0(active0, 0x800000000000L);
        case 100:
            return jjMoveStringLiteralDfa6_0(active0, 0x10000000L);
        case 101:
            if ((active0 & 0x4000000L) != 0L) {
                return jjStartNfaWithStates_0(5, 26, 23);
            } else if ((active0 & 0x40000000000L) != 0L) {
                return jjStartNfaWithStates_0(5, 42, 23);
            }
            break;
        case 102:
            return jjMoveStringLiteralDfa6_0(active0, 0x10000000000L);
        case 103:
            return jjMoveStringLiteralDfa6_0(active0, 0x200000000000L);
        case 104:
            if ((active0 & 0x20000000000000L) != 0L) {
                return jjStartNfaWithStates_0(5, 53, 23);
            }
            break;
        case 105:
            return jjMoveStringLiteralDfa6_0(active0, 0x4400000000000000L);
        case 108:
            return jjMoveStringLiteralDfa6_0(active0, 0x81000000L);
        case 109:
            return jjMoveStringLiteralDfa6_0(active0, 0x1000000000L);
        case 110:
            if ((active0 & 0x2000000000000L) != 0L) {
                return jjStartNfaWithStates_0(5, 49, 23);
            }
            return jjMoveStringLiteralDfa6_0(active0, 0x4000800000L);
        case 114:
            return jjMoveStringLiteralDfa6_0(active0, 0x40000000000000L);
        case 115:
            if ((active0 & 0x200000000000000L) != 0L) {
                return jjStartNfaWithStates_0(5, 57, 23);
            }
            break;
        case 116:
            if ((active0 & 0x2000000000L) != 0L) {
                return jjStartNfaWithStates_0(5, 37, 23);
            }
            return jjMoveStringLiteralDfa6_0(active0, 0x400000000000L);
        default:
            break;
        }
        return jjStartNfa_0(4, active0, 0L);
    }

    private final int jjMoveStringLiteralDfa6_0(final long old0, long active0) {
        if ((active0 &= old0) == 0L) {
            return jjStartNfa_0(4, old0, 0L);
        }
        try {
            this.curChar = this.input_stream.readChar();
        } catch (final java.io.IOException e) {
            jjStopStringLiteralDfa_0(5, active0, 0L);
            return 6;
        }
        switch (this.curChar) {
        case 97:
            return jjMoveStringLiteralDfa7_0(active0, 0x10000000000L);
        case 99:
            return jjMoveStringLiteralDfa7_0(active0, 0x4000004000L);
        case 101:
            if ((active0 & 0x200000000000L) != 0L) {
                return jjStartNfaWithStates_0(6, 45, 23);
            } else if ((active0 & 0x400000000000L) != 0L) {
                return jjStartNfaWithStates_0(6, 46, 23);
            }
            return jjMoveStringLiteralDfa7_0(active0, 0x400001000000000L);
        case 108:
            return jjMoveStringLiteralDfa7_0(active0, 0x4000000000000000L);
        case 110:
            if ((active0 & 0x8000L) != 0L) {
                return jjStartNfaWithStates_0(6, 15, 23);
            }
            break;
        case 111:
            return jjMoveStringLiteralDfa7_0(active0, 0x40000000000000L);
        case 115:
            if ((active0 & 0x10000000L) != 0L) {
                return jjStartNfaWithStates_0(6, 28, 23);
            }
            break;
        case 116:
            if ((active0 & 0x1000000L) != 0L) {
                return jjStartNfaWithStates_0(6, 24, 23);
            }
            return jjMoveStringLiteralDfa7_0(active0, 0x800000000000L);
        case 117:
            return jjMoveStringLiteralDfa7_0(active0, 0x800000L);
        case 121:
            if ((active0 & 0x80000000L) != 0L) {
                return jjStartNfaWithStates_0(6, 31, 23);
            }
            break;
        default:
            break;
        }
        return jjStartNfa_0(5, active0, 0L);
    }

    private final int jjMoveStringLiteralDfa7_0(final long old0, long active0) {
        if ((active0 &= old0) == 0L) {
            return jjStartNfa_0(5, old0, 0L);
        }
        try {
            this.curChar = this.input_stream.readChar();
        } catch (final java.io.IOException e) {
            jjStopStringLiteralDfa_0(6, active0, 0L);
            return 7;
        }
        switch (this.curChar) {
        case 99:
            return jjMoveStringLiteralDfa8_0(active0, 0x10000000000L);
        case 101:
            if ((active0 & 0x800000L) != 0L) {
                return jjStartNfaWithStates_0(7, 23, 23);
            } else if ((active0 & 0x4000000000000000L) != 0L) {
                return jjStartNfaWithStates_0(7, 62, 23);
            }
            return jjMoveStringLiteralDfa8_0(active0, 0x804000000000L);
        case 110:
            return jjMoveStringLiteralDfa8_0(active0, 0x440001000000000L);
        case 116:
            if ((active0 & 0x4000L) != 0L) {
                return jjStartNfaWithStates_0(7, 14, 23);
            }
            break;
        default:
            break;
        }
        return jjStartNfa_0(6, active0, 0L);
    }

    private final int jjMoveStringLiteralDfa8_0(final long old0, long active0) {
        if ((active0 &= old0) == 0L) {
            return jjStartNfa_0(6, old0, 0L);
        }
        try {
            this.curChar = this.input_stream.readChar();
        } catch (final java.io.IOException e) {
            jjStopStringLiteralDfa_0(7, active0, 0L);
            return 8;
        }
        switch (this.curChar) {
        case 100:
            if ((active0 & 0x800000000000L) != 0L) {
                return jjStartNfaWithStates_0(8, 47, 23);
            }
            break;
        case 101:
            if ((active0 & 0x10000000000L) != 0L) {
                return jjStartNfaWithStates_0(8, 40, 23);
            }
            break;
        case 105:
            return jjMoveStringLiteralDfa9_0(active0, 0x40000000000000L);
        case 111:
            return jjMoveStringLiteralDfa9_0(active0, 0x4000000000L);
        case 116:
            if ((active0 & 0x400000000000000L) != 0L) {
                return jjStartNfaWithStates_0(8, 58, 23);
            }
            return jjMoveStringLiteralDfa9_0(active0, 0x1000000000L);
        default:
            break;
        }
        return jjStartNfa_0(7, active0, 0L);
    }

    private final int jjMoveStringLiteralDfa9_0(final long old0, long active0) {
        if ((active0 &= old0) == 0L) {
            return jjStartNfa_0(7, old0, 0L);
        }
        try {
            this.curChar = this.input_stream.readChar();
        } catch (final java.io.IOException e) {
            jjStopStringLiteralDfa_0(8, active0, 0L);
            return 9;
        }
        switch (this.curChar) {
        case 102:
            if ((active0 & 0x4000000000L) != 0L) {
                return jjStartNfaWithStates_0(9, 38, 23);
            }
            break;
        case 115:
            if ((active0 & 0x1000000000L) != 0L) {
                return jjStartNfaWithStates_0(9, 36, 23);
            }
            break;
        case 122:
            return jjMoveStringLiteralDfa10_0(active0, 0x40000000000000L);
        default:
            break;
        }
        return jjStartNfa_0(8, active0, 0L);
    }

    private final int jjMoveStringLiteralDfa10_0(final long old0, long active0) {
        if ((active0 &= old0) == 0L) {
            return jjStartNfa_0(8, old0, 0L);
        }
        try {
            this.curChar = this.input_stream.readChar();
        } catch (final java.io.IOException e) {
            jjStopStringLiteralDfa_0(9, active0, 0L);
            return 10;
        }
        switch (this.curChar) {
        case 101:
            return jjMoveStringLiteralDfa11_0(active0, 0x40000000000000L);
        default:
            break;
        }
        return jjStartNfa_0(9, active0, 0L);
    }

    private final int jjMoveStringLiteralDfa11_0(final long old0, long active0) {
        if ((active0 &= old0) == 0L) {
            return jjStartNfa_0(9, old0, 0L);
        }
        try {
            this.curChar = this.input_stream.readChar();
        } catch (final java.io.IOException e) {
            jjStopStringLiteralDfa_0(10, active0, 0L);
            return 11;
        }
        switch (this.curChar) {
        case 100:
            if ((active0 & 0x40000000000000L) != 0L) {
                return jjStartNfaWithStates_0(11, 54, 23);
            }
            break;
        default:
            break;
        }
        return jjStartNfa_0(10, active0, 0L);
    }

    static final long[] jjbitVec0 = { 0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL };
    static final long[] jjbitVec2 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };
    static final long[] jjbitVec3 = { 0x1ff00000fffffffeL, 0xffffffffffffc000L, 0xffffffffL, 0x600000000000000L };
    static final long[] jjbitVec4 = { 0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL };
    static final long[] jjbitVec5 = { 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL };
    static final long[] jjbitVec6 = { 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffL, 0x0L };
    static final long[] jjbitVec7 = { 0xffffffffffffffffL, 0xffffffffffffffffL, 0x0L, 0x0L };
    static final long[] jjbitVec8 = { 0x3fffffffffffL, 0x0L, 0x0L, 0x0L };

    private final int jjMoveNfa_0(final int startState, int curPos) {
        final int[] nextStates;
        int startsAt = 0;
        this.jjnewStateCnt = 75;
        int i = 1;
        this.jjstateSet[0] = startState;
        final int j;
        int kind = 0x7fffffff;
        for (;;) {
            if (++this.jjround == 0x7fffffff) {
                ReInitRounds();
            }
            if (this.curChar < 64) {
                final long l = 1L << this.curChar;
                MatchLoop: do {
                    switch (this.jjstateSet[--i]) {
                    case 75:
                        if ((0x3ff000000000000L & l) != 0L) {
                            if (kind > 70) {
                                kind = 70;
                            }
                            jjCheckNAddStates(0, 2);
                        }
                        if ((0x3ff000000000000L & l) != 0L) {
                            jjCheckNAddStates(3, 5);
                        }
                        break;
                    case 3:
                        if ((0x3ff000000000000L & l) != 0L) {
                            jjCheckNAddStates(6, 19);
                        } else if (this.curChar == 46) {
                            jjCheckNAddTwoStates(29, 34);
                        } else if (this.curChar == 36) {
                            if (kind > 74) {
                                kind = 74;
                            }
                            jjCheckNAdd(23);
                        } else if (this.curChar == 34) {
                            jjCheckNAddStates(20, 22);
                        } else if (this.curChar == 39) {
                            jjAddStates(23, 24);
                        } else if (this.curChar == 47) {
                            this.jjstateSet[this.jjnewStateCnt++] = 2;
                        }
                        if ((0x3fe000000000000L & l) != 0L) {
                            if (kind > 64) {
                                kind = 64;
                            }
                            jjCheckNAddStates(25, 27);
                        } else if (this.curChar == 48) {
                            if (kind > 64) {
                                kind = 64;
                            }
                            jjCheckNAddStates(28, 32);
                        }
                        break;
                    case 0:
                        if (this.curChar == 42) {
                            this.jjstateSet[this.jjnewStateCnt++] = 1;
                        }
                        break;
                    case 1:
                        if ((0xffff7fffffffffffL & l) != 0L && kind > 8) {
                            kind = 8;
                        }
                        break;
                    case 2:
                        if (this.curChar == 42) {
                            this.jjstateSet[this.jjnewStateCnt++] = 0;
                        }
                        break;
                    case 4:
                        if (this.curChar == 39) {
                            jjAddStates(23, 24);
                        }
                        break;
                    case 5:
                        if ((0xffffff7fffffdbffL & l) != 0L) {
                            jjCheckNAdd(6);
                        }
                        break;
                    case 6:
                        if (this.curChar == 39 && kind > 72) {
                            kind = 72;
                        }
                        break;
                    case 8:
                        if ((0x8400000000L & l) != 0L) {
                            jjCheckNAdd(6);
                        }
                        break;
                    case 9:
                        if ((0xff000000000000L & l) != 0L) {
                            jjCheckNAddTwoStates(10, 6);
                        }
                        break;
                    case 10:
                        if ((0xff000000000000L & l) != 0L) {
                            jjCheckNAdd(6);
                        }
                        break;
                    case 11:
                        if ((0xf000000000000L & l) != 0L) {
                            this.jjstateSet[this.jjnewStateCnt++] = 12;
                        }
                        break;
                    case 12:
                        if ((0xff000000000000L & l) != 0L) {
                            jjCheckNAdd(10);
                        }
                        break;
                    case 13:
                        if (this.curChar == 34) {
                            jjCheckNAddStates(20, 22);
                        }
                        break;
                    case 14:
                        if ((0xfffffffbffffdbffL & l) != 0L) {
                            jjCheckNAddStates(20, 22);
                        }
                        break;
                    case 16:
                        if ((0x8400000000L & l) != 0L) {
                            jjCheckNAddStates(20, 22);
                        }
                        break;
                    case 17:
                        if (this.curChar == 34 && kind > 73) {
                            kind = 73;
                        }
                        break;
                    case 18:
                        if ((0xff000000000000L & l) != 0L) {
                            jjCheckNAddStates(33, 36);
                        }
                        break;
                    case 19:
                        if ((0xff000000000000L & l) != 0L) {
                            jjCheckNAddStates(20, 22);
                        }
                        break;
                    case 20:
                        if ((0xf000000000000L & l) != 0L) {
                            this.jjstateSet[this.jjnewStateCnt++] = 21;
                        }
                        break;
                    case 21:
                        if ((0xff000000000000L & l) != 0L) {
                            jjCheckNAdd(19);
                        }
                        break;
                    case 22:
                        if (this.curChar != 36) {
                            break;
                        }
                        if (kind > 74) {
                            kind = 74;
                        }
                        jjCheckNAdd(23);
                        break;
                    case 23:
                        if ((0x3ff001000000000L & l) == 0L) {
                            break;
                        }
                        if (kind > 74) {
                            kind = 74;
                        }
                        jjCheckNAdd(23);
                        break;
                    case 24:
                        if ((0x3fe000000000000L & l) == 0L) {
                            break;
                        }
                        if (kind > 64) {
                            kind = 64;
                        }
                        jjCheckNAddStates(25, 27);
                        break;
                    case 25:
                        if ((0x3ff000000000000L & l) == 0L) {
                            break;
                        }
                        if (kind > 64) {
                            kind = 64;
                        }
                        jjCheckNAdd(25);
                        break;
                    case 26:
                        if ((0x3ff000000000000L & l) != 0L) {
                            jjCheckNAddTwoStates(26, 27);
                        }
                        break;
                    case 28:
                        if (this.curChar == 46) {
                            jjCheckNAddTwoStates(29, 34);
                        }
                        break;
                    case 29:
                        if ((0x3ff000000000000L & l) != 0L) {
                            jjCheckNAddStates(3, 5);
                        }
                        break;
                    case 31:
                        if ((0x280000000000L & l) != 0L) {
                            jjCheckNAdd(32);
                        }
                        break;
                    case 32:
                        if ((0x3ff000000000000L & l) != 0L) {
                            jjCheckNAddTwoStates(32, 33);
                        }
                        break;
                    case 34:
                        if ((0x3ff000000000000L & l) == 0L) {
                            break;
                        }
                        if (kind > 70) {
                            kind = 70;
                        }
                        jjCheckNAddStates(0, 2);
                        break;
                    case 36:
                        if ((0x280000000000L & l) != 0L) {
                            jjCheckNAdd(37);
                        }
                        break;
                    case 37:
                        if ((0x3ff000000000000L & l) == 0L) {
                            break;
                        }
                        if (kind > 70) {
                            kind = 70;
                        }
                        jjCheckNAddTwoStates(37, 38);
                        break;
                    case 39:
                        if ((0x3ff000000000000L & l) != 0L) {
                            jjCheckNAddStates(6, 19);
                        }
                        break;
                    case 40:
                        if ((0x3ff000000000000L & l) != 0L) {
                            jjCheckNAddTwoStates(40, 41);
                        }
                        break;
                    case 41:
                        if (this.curChar == 46) {
                            jjCheckNAddStates(37, 39);
                        }
                        break;
                    case 42:
                        if ((0x3ff000000000000L & l) != 0L) {
                            jjCheckNAddStates(37, 39);
                        }
                        break;
                    case 44:
                        if ((0x280000000000L & l) != 0L) {
                            jjCheckNAdd(45);
                        }
                        break;
                    case 45:
                        if ((0x3ff000000000000L & l) != 0L) {
                            jjCheckNAddTwoStates(45, 33);
                        }
                        break;
                    case 46:
                        if ((0x3ff000000000000L & l) != 0L) {
                            jjCheckNAddTwoStates(46, 47);
                        }
                        break;
                    case 48:
                        if ((0x280000000000L & l) != 0L) {
                            jjCheckNAdd(49);
                        }
                        break;
                    case 49:
                        if ((0x3ff000000000000L & l) != 0L) {
                            jjCheckNAddTwoStates(49, 33);
                        }
                        break;
                    case 50:
                        if ((0x3ff000000000000L & l) != 0L) {
                            jjCheckNAddStates(40, 42);
                        }
                        break;
                    case 52:
                        if ((0x280000000000L & l) != 0L) {
                            jjCheckNAdd(53);
                        }
                        break;
                    case 53:
                        if ((0x3ff000000000000L & l) != 0L) {
                            jjCheckNAddTwoStates(53, 33);
                        }
                        break;
                    case 54:
                        if ((0x3ff000000000000L & l) != 0L) {
                            jjCheckNAddTwoStates(54, 55);
                        }
                        break;
                    case 55:
                        if (this.curChar != 46) {
                            break;
                        }
                        if (kind > 70) {
                            kind = 70;
                        }
                        jjCheckNAddStates(43, 45);
                        break;
                    case 56:
                        if ((0x3ff000000000000L & l) == 0L) {
                            break;
                        }
                        if (kind > 70) {
                            kind = 70;
                        }
                        jjCheckNAddStates(43, 45);
                        break;
                    case 58:
                        if ((0x280000000000L & l) != 0L) {
                            jjCheckNAdd(59);
                        }
                        break;
                    case 59:
                        if ((0x3ff000000000000L & l) == 0L) {
                            break;
                        }
                        if (kind > 70) {
                            kind = 70;
                        }
                        jjCheckNAddTwoStates(59, 38);
                        break;
                    case 60:
                        if ((0x3ff000000000000L & l) != 0L) {
                            jjCheckNAddTwoStates(60, 61);
                        }
                        break;
                    case 62:
                        if ((0x280000000000L & l) != 0L) {
                            jjCheckNAdd(63);
                        }
                        break;
                    case 63:
                        if ((0x3ff000000000000L & l) == 0L) {
                            break;
                        }
                        if (kind > 70) {
                            kind = 70;
                        }
                        jjCheckNAddTwoStates(63, 38);
                        break;
                    case 64:
                        if ((0x3ff000000000000L & l) != 0L) {
                            jjCheckNAddStates(46, 48);
                        }
                        break;
                    case 66:
                        if ((0x280000000000L & l) != 0L) {
                            jjCheckNAdd(67);
                        }
                        break;
                    case 67:
                        if ((0x3ff000000000000L & l) != 0L) {
                            jjCheckNAddTwoStates(67, 38);
                        }
                        break;
                    case 68:
                        if (this.curChar != 48) {
                            break;
                        }
                        if (kind > 64) {
                            kind = 64;
                        }
                        jjCheckNAddStates(28, 32);
                        break;
                    case 70:
                        if ((0x3ff000000000000L & l) == 0L) {
                            break;
                        }
                        if (kind > 64) {
                            kind = 64;
                        }
                        this.jjstateSet[this.jjnewStateCnt++] = 70;
                        break;
                    case 71:
                        if ((0xff000000000000L & l) == 0L) {
                            break;
                        }
                        if (kind > 64) {
                            kind = 64;
                        }
                        jjCheckNAdd(71);
                        break;
                    case 73:
                        if ((0x3ff000000000000L & l) != 0L) {
                            jjCheckNAddTwoStates(73, 27);
                        }
                        break;
                    case 74:
                        if ((0xff000000000000L & l) != 0L) {
                            jjCheckNAddTwoStates(74, 27);
                        }
                        break;
                    default:
                        break;
                    }
                } while (i != startsAt);
            } else if (this.curChar < 128) {
                final long l = 1L << (this.curChar & 077);
                MatchLoop: do {
                    switch (this.jjstateSet[--i]) {
                    case 3:
                    case 23:
                        if ((0x7fffffe87fffffeL & l) == 0L) {
                            break;
                        }
                        if (kind > 74) {
                            kind = 74;
                        }
                        jjCheckNAdd(23);
                        break;
                    case 1:
                        if (kind > 8) {
                            kind = 8;
                        }
                        break;
                    case 5:
                        if ((0xffffffffefffffffL & l) != 0L) {
                            jjCheckNAdd(6);
                        }
                        break;
                    case 7:
                        if (this.curChar == 92) {
                            jjAddStates(49, 51);
                        }
                        break;
                    case 8:
                        if ((0x14404410000000L & l) != 0L) {
                            jjCheckNAdd(6);
                        }
                        break;
                    case 14:
                        if ((0xffffffffefffffffL & l) != 0L) {
                            jjCheckNAddStates(20, 22);
                        }
                        break;
                    case 15:
                        if (this.curChar == 92) {
                            jjAddStates(52, 54);
                        }
                        break;
                    case 16:
                        if ((0x14404410000000L & l) != 0L) {
                            jjCheckNAddStates(20, 22);
                        }
                        break;
                    case 27:
                        if ((0x100000001000L & l) != 0L && kind > 65) {
                            kind = 65;
                        }
                        break;
                    case 30:
                        if ((0x2000000020L & l) != 0L) {
                            jjAddStates(55, 56);
                        }
                        break;
                    case 33:
                        if ((0x4000000040L & l) != 0L && kind > 69) {
                            kind = 69;
                        }
                        break;
                    case 35:
                        if ((0x2000000020L & l) != 0L) {
                            jjAddStates(57, 58);
                        }
                        break;
                    case 38:
                        if ((0x1000000010L & l) != 0L && kind > 70) {
                            kind = 70;
                        }
                        break;
                    case 43:
                        if ((0x2000000020L & l) != 0L) {
                            jjAddStates(59, 60);
                        }
                        break;
                    case 47:
                        if ((0x2000000020L & l) != 0L) {
                            jjAddStates(61, 62);
                        }
                        break;
                    case 51:
                        if ((0x2000000020L & l) != 0L) {
                            jjAddStates(63, 64);
                        }
                        break;
                    case 57:
                        if ((0x2000000020L & l) != 0L) {
                            jjAddStates(65, 66);
                        }
                        break;
                    case 61:
                        if ((0x2000000020L & l) != 0L) {
                            jjAddStates(67, 68);
                        }
                        break;
                    case 65:
                        if ((0x2000000020L & l) != 0L) {
                            jjAddStates(69, 70);
                        }
                        break;
                    case 69:
                        if ((0x100000001000000L & l) != 0L) {
                            jjCheckNAdd(70);
                        }
                        break;
                    case 70:
                        if ((0x7e0000007eL & l) == 0L) {
                            break;
                        }
                        if (kind > 64) {
                            kind = 64;
                        }
                        jjCheckNAdd(70);
                        break;
                    case 72:
                        if ((0x100000001000000L & l) != 0L) {
                            jjCheckNAdd(73);
                        }
                        break;
                    case 73:
                        if ((0x7e0000007eL & l) != 0L) {
                            jjCheckNAddTwoStates(73, 27);
                        }
                        break;
                    default:
                        break;
                    }
                } while (i != startsAt);
            } else {
                final int hiByte = (int) (this.curChar >> 8);
                final int i1 = hiByte >> 6;
                final long l1 = 1L << (hiByte & 077);
                final int i2 = (this.curChar & 0xff) >> 6;
                final long l2 = 1L << (this.curChar & 077);
                MatchLoop: do {
                    switch (this.jjstateSet[--i]) {
                    case 3:
                    case 23:
                        if (!jjCanMove_1(hiByte, i1, i2, l1, l2)) {
                            break;
                        }
                        if (kind > 74) {
                            kind = 74;
                        }
                        jjCheckNAdd(23);
                        break;
                    case 1:
                        if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 8) {
                            kind = 8;
                        }
                        break;
                    case 5:
                        if (jjCanMove_0(hiByte, i1, i2, l1, l2)) {
                            this.jjstateSet[this.jjnewStateCnt++] = 6;
                        }
                        break;
                    case 14:
                        if (jjCanMove_0(hiByte, i1, i2, l1, l2)) {
                            jjAddStates(20, 22);
                        }
                        break;
                    default:
                        break;
                    }
                } while (i != startsAt);
            }
            if (kind != 0x7fffffff) {
                this.jjmatchedKind = kind;
                this.jjmatchedPos = curPos;
                kind = 0x7fffffff;
            }
            ++curPos;
            if ((i = this.jjnewStateCnt) == (startsAt = 75 - (this.jjnewStateCnt = startsAt))) {
                return curPos;
            }
            try {
                this.curChar = this.input_stream.readChar();
            } catch (final java.io.IOException e) {
                return curPos;
            }
        }
    }

    static final int[] jjnextStates = { 34, 35, 38, 29, 30, 33, 40, 41, 46, 47, 50, 51, 33, 54, 55, 60, 61, 64, 65, 38, 14, 15, 17, 5, 7, 25, 26, 27, 69, 71, 72, 74, 27, 14, 15, 19, 17, 42, 43, 33,
            50, 51, 33, 56, 57, 38, 64, 65, 38, 8, 9, 11, 16, 18, 20, 31, 32, 36, 37, 44, 45, 48, 49, 52, 53, 58, 59, 62, 63, 66, 67, };

    private static final boolean jjCanMove_0(final int hiByte, final int i1, final int i2, final long l1, final long l2) {
        switch (hiByte) {
        case 0:
            return (jjbitVec2[i2] & l2) != 0L;
        default:
            if ((jjbitVec0[i1] & l1) != 0L) {
                return true;
            }
            return false;
        }
    }

    private static final boolean jjCanMove_1(final int hiByte, final int i1, final int i2, final long l1, final long l2) {
        switch (hiByte) {
        case 0:
            return (jjbitVec4[i2] & l2) != 0L;
        case 48:
            return (jjbitVec5[i2] & l2) != 0L;
        case 49:
            return (jjbitVec6[i2] & l2) != 0L;
        case 51:
            return (jjbitVec7[i2] & l2) != 0L;
        case 61:
            return (jjbitVec8[i2] & l2) != 0L;
        default:
            if ((jjbitVec3[i1] & l1) != 0L) {
                return true;
            }
            return false;
        }
    }

    public static final String[] jjstrLiteralImages = { "", null, null, null, null, null, null, null, null, null, null, null, null, null, "\141\142\163\164\162\141\143\164",
            "\142\157\157\154\145\141\156", "\142\162\145\141\153", "\142\171\164\145", "\143\141\163\145", "\143\141\164\143\150", "\143\150\141\162", "\143\154\141\163\163", "\143\157\156\163\164",
            "\143\157\156\164\151\156\165\145", "\144\145\146\141\165\154\164", "\144\157", "\144\157\165\142\154\145", "\145\154\163\145", "\145\170\164\145\156\144\163", "\146\141\154\163\145",
            "\146\151\156\141\154", "\146\151\156\141\154\154\171", "\146\154\157\141\164", "\146\157\162", "\147\157\164\157", "\151\146", "\151\155\160\154\145\155\145\156\164\163",
            "\151\155\160\157\162\164", "\151\156\163\164\141\156\143\145\157\146", "\151\156\164", "\151\156\164\145\162\146\141\143\145", "\154\157\156\147", "\156\141\164\151\166\145",
            "\156\145\167", "\156\165\154\154", "\160\141\143\153\141\147\145", "\160\162\151\166\141\164\145", "\160\162\157\164\145\143\164\145\144", "\160\165\142\154\151\143",
            "\162\145\164\165\162\156", "\163\150\157\162\164", "\163\164\141\164\151\143", "\163\165\160\145\162", "\163\167\151\164\143\150", "\163\171\156\143\150\162\157\156\151\172\145\144",
            "\164\150\151\163", "\164\150\162\157\167", "\164\150\162\157\167\163", "\164\162\141\156\163\151\145\156\164", "\164\162\165\145", "\164\162\171", "\166\157\151\144",
            "\166\157\154\141\164\151\154\145", "\167\150\151\154\145", null, null, null, null, null, null, null, null, null, null, null, null, null, "\50", "\51", "\173", "\175", "\133", "\135",
            "\73", "\54", "\56", "\75", "\76", "\74", "\41", "\176", "\77", "\72", "\75\75", "\74\75", "\76\75", "\41\75", "\174\174", "\46\46", "\53\53", "\55\55", "\53", "\55", "\52", "\57", "\46",
            "\174", "\136", "\45", "\74\74", "\76\76", "\76\76\76", "\53\75", "\55\75", "\52\75", "\57\75", "\46\75", "\174\75", "\136\75", "\45\75", "\74\74\75", "\76\76\75", "\76\76\76\75", };
    public static final String[] lexStateNames = { "DEFAULT", "IN_SINGLE_LINE_COMMENT", "IN_FORMAL_COMMENT", "IN_MULTI_LINE_COMMENT", };
    public static final int[] jjnewLexState = { -1, -1, -1, -1, -1, -1, 1, 1, 2, 3, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, };
    static final long[] jjtoToken = { 0xffffffffffffc001L, 0x7ffffffffffe763L, };
    static final long[] jjtoSkip = { 0x1c3eL, 0x0L, };
    static final long[] jjtoSpecial = { 0x1c00L, 0x0L, };
    static final long[] jjtoMore = { 0x23c0L, 0x0L, };
    private ASCII_UCodeESC_CharStream input_stream;
    private final int[] jjrounds = new int[75];
    private final int[] jjstateSet = new int[150];
    StringBuffer image;
    int jjimageLen;
    int lengthOfMatch;
    protected char curChar;

    public ParserTokenManager(final ASCII_UCodeESC_CharStream stream) {
        if (ASCII_UCodeESC_CharStream.staticFlag) {
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
        }
        this.input_stream = stream;
    }

    public ParserTokenManager(final ASCII_UCodeESC_CharStream stream, final int lexState) {
        this(stream);
        SwitchTo(lexState);
    }

    public void ReInit(final ASCII_UCodeESC_CharStream stream) {
        this.jjmatchedPos = this.jjnewStateCnt = 0;
        this.curLexState = this.defaultLexState;
        this.input_stream = stream;
        ReInitRounds();
    }

    private final void ReInitRounds() {
        int i;
        this.jjround = 0x80000001;
        for (i = 75; i-- > 0;) {
            this.jjrounds[i] = 0x80000000;
        }
    }

    public void ReInit(final ASCII_UCodeESC_CharStream stream, final int lexState) {
        ReInit(stream);
        SwitchTo(lexState);
    }

    public void SwitchTo(final int lexState) {
        if (lexState >= 4 || lexState < 0) {
            throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
        } else {
            this.curLexState = lexState;
        }
    }

    private final Token jjFillToken() {
        final Token t = Token.newToken(this.jjmatchedKind);
        t.kind = this.jjmatchedKind;
        final String im = jjstrLiteralImages[this.jjmatchedKind];
        t.image = im == null ? this.input_stream.GetImage() : im;
        t.beginLine = this.input_stream.getBeginLine();
        t.beginColumn = this.input_stream.getBeginColumn();
        t.endLine = this.input_stream.getEndLine();
        t.endColumn = this.input_stream.getEndColumn();
        return t;
    }

    int curLexState = 0;
    int defaultLexState = 0;
    int jjnewStateCnt;
    int jjround;
    int jjmatchedPos;
    int jjmatchedKind;

    public final Token getNextToken() {
        final int kind;
        Token specialToken = null;
        Token matchedToken;
        int curPos = 0;

        EOFLoop: for (;;) {
            try {
                this.curChar = this.input_stream.BeginToken();
            } catch (final java.io.IOException e) {
                this.jjmatchedKind = 0;
                matchedToken = jjFillToken();
                matchedToken.specialToken = specialToken;
                return matchedToken;
            }
            this.image = null;
            this.jjimageLen = 0;

            for (;;) {
                switch (this.curLexState) {
                case 0:
                    try {
                        this.input_stream.backup(0);
                        while (this.curChar <= 32 && (0x100003600L & 1L << this.curChar) != 0L) {
                            this.curChar = this.input_stream.BeginToken();
                        }
                    } catch (final java.io.IOException e1) {
                        continue EOFLoop;
                    }
                    this.jjmatchedKind = 0x7fffffff;
                    this.jjmatchedPos = 0;
                    curPos = jjMoveStringLiteralDfa0_0();
                    break;
                case 1:
                    this.jjmatchedKind = 0x7fffffff;
                    this.jjmatchedPos = 0;
                    curPos = jjMoveStringLiteralDfa0_1();
                    if (this.jjmatchedPos == 0 && this.jjmatchedKind > 13) {
                        this.jjmatchedKind = 13;
                    }
                    break;
                case 2:
                    this.jjmatchedKind = 0x7fffffff;
                    this.jjmatchedPos = 0;
                    curPos = jjMoveStringLiteralDfa0_2();
                    if (this.jjmatchedPos == 0 && this.jjmatchedKind > 13) {
                        this.jjmatchedKind = 13;
                    }
                    break;
                case 3:
                    this.jjmatchedKind = 0x7fffffff;
                    this.jjmatchedPos = 0;
                    curPos = jjMoveStringLiteralDfa0_3();
                    if (this.jjmatchedPos == 0 && this.jjmatchedKind > 13) {
                        this.jjmatchedKind = 13;
                    }
                    break;
                }
                if (this.jjmatchedKind != 0x7fffffff) {
                    if (this.jjmatchedPos + 1 < curPos) {
                        this.input_stream.backup(curPos - this.jjmatchedPos - 1);
                    }
                    if ((jjtoToken[this.jjmatchedKind >> 6] & 1L << (this.jjmatchedKind & 077)) != 0L) {
                        matchedToken = jjFillToken();
                        matchedToken.specialToken = specialToken;
                        if (jjnewLexState[this.jjmatchedKind] != -1) {
                            this.curLexState = jjnewLexState[this.jjmatchedKind];
                        }
                        return matchedToken;
                    } else if ((jjtoSkip[this.jjmatchedKind >> 6] & 1L << (this.jjmatchedKind & 077)) != 0L) {
                        if ((jjtoSpecial[this.jjmatchedKind >> 6] & 1L << (this.jjmatchedKind & 077)) != 0L) {
                            matchedToken = jjFillToken();
                            if (specialToken == null) {
                                specialToken = matchedToken;
                            } else {
                                matchedToken.specialToken = specialToken;
                                specialToken = specialToken.next = matchedToken;
                            }
                            SkipLexicalActions(matchedToken);
                        } else {
                            SkipLexicalActions(null);
                        }
                        if (jjnewLexState[this.jjmatchedKind] != -1) {
                            this.curLexState = jjnewLexState[this.jjmatchedKind];
                        }
                        continue EOFLoop;
                    }
                    MoreLexicalActions();
                    if (jjnewLexState[this.jjmatchedKind] != -1) {
                        this.curLexState = jjnewLexState[this.jjmatchedKind];
                    }
                    curPos = 0;
                    this.jjmatchedKind = 0x7fffffff;
                    try {
                        this.curChar = this.input_stream.readChar();
                        continue;
                    } catch (final java.io.IOException e1) {
                    }
                }
                int error_line = this.input_stream.getEndLine();
                int error_column = this.input_stream.getEndColumn();
                String error_after = null;
                boolean EOFSeen = false;
                try {
                    this.input_stream.readChar();
                    this.input_stream.backup(1);
                } catch (final java.io.IOException e1) {
                    EOFSeen = true;
                    error_after = curPos <= 1 ? "" : this.input_stream.GetImage();
                    if (this.curChar == '\n' || this.curChar == '\r') {
                        error_line++;
                        error_column = 0;
                    } else {
                        error_column++;
                    }
                }
                if (!EOFSeen) {
                    this.input_stream.backup(1);
                    error_after = curPos <= 1 ? "" : this.input_stream.GetImage();
                }
                throw new TokenMgrError(EOFSeen, this.curLexState, error_line, error_column, error_after, this.curChar, TokenMgrError.LEXICAL_ERROR);
            }
        }
    }

    final void SkipLexicalActions(final Token matchedToken) {
        switch (this.jjmatchedKind) {
        default:
            break;
        }
    }

    final void MoreLexicalActions() {
        this.jjimageLen += this.lengthOfMatch = this.jjmatchedPos + 1;
        switch (this.jjmatchedKind) {
        case 8:
            if (this.image == null) {
                this.image = new StringBuffer(new String(this.input_stream.GetSuffix(this.jjimageLen)));
            } else {
                this.image.append(this.input_stream.GetSuffix(this.jjimageLen));
            }
            this.jjimageLen = 0;
            this.input_stream.backup(1);
            break;
        default:
            break;
        }
    }
}
