/*
 * DynamicJava - Copyright (C) 1999 Dyade
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
 * associated documentation files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge, publish, distribute,
 * sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions: The above copyright notice and this
 * permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT
 * NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL DYADE BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH
 * THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
 * Except as contained in this notice, the name of Dyade shall not be used in advertising or
 * otherwise to promote the sale, use or other dealings in this Software without prior written
 * authorization from Dyade.
 */

/* Generated By:JavaCC: Do not edit this line. Parser.java */
package koala.dynamicjava.parser;

import java.lang.reflect.Modifier;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;

import koala.dynamicjava.parser.wrapper.ParseError;
import koala.dynamicjava.parser.wrapper.TreeToken;
import koala.dynamicjava.tree.*;
import koala.dynamicjava.tree.visitor.Visitor;
import koala.dynamicjava.util.LocalizedMessageReader;

/**
 * This class represents a (interpreted) Java 1.1 language parser
 * 
 * @author Stephane Hillion
 * @version 1.1 - 1999/10/25
 */

public class Parser implements ParserConstants {
    /**
     * The name of the file currenty interpreted
     */
    private String filename;

    /**
     * The message reader
     */
    private final LocalizedMessageReader reader = new LocalizedMessageReader("koala.dynamicjava.parser.resources.messages");

    /**
     * Sets the current filename
     * 
     * @param fname the name of the input file
     */
    public void setFilename(final String fname) {
        this.filename = fname;
    }

    public String getFilename() {
        return this.filename;
    }

    /**
     * Creates a primary expression from a refix and a list of suffixes
     * 
     * @param prefix the prefix expression
     * @param suffixes the suffix list built in reverse order
     */
    private static Expression createPrimaryExpression(final Expression prefix, final List suffixes) {
        final Iterator it = suffixes.iterator();
        if (it.hasNext()) {
            return ((ExpressionSuffix) it.next()).createExpression(prefix, it);
        } else {
            if (prefix instanceof CompileTimeQualifiedName) {
                return ((CompileTimeQualifiedName) prefix).createFieldAccess();
            } else if (prefix instanceof CompileTimeExpression) {
                return ((CompileTimeExpression) prefix).createRuntimeExpression();
            } else {
                return prefix;
            }
        }
    }

    /**
     * Creates a field declaration
     */
    private FieldDeclaration createFieldDeclaration(final ModifierFlags mf, Type typ, final Token name, final Expression exp, final int dim) {
        int bl;
        int bc;
        int el;
        int ec;
        int flags = 0;

        // Compute the position of the declaration in the source code
        if (mf != null) {
            bl = mf.beginLine;
            bc = mf.beginColumn;
            flags = mf.accessFlags;
        } else {
            bl = typ.getBeginLine();
            bc = typ.getBeginColumn();
        }

        if (exp != null) {
            el = exp.getEndLine();
            ec = exp.getEndColumn();
        } else {
            el = name.endLine;
            ec = name.endColumn;
        }

        // If the field is an array, create an array type node
        if (dim > 0) {
            typ = new ArrayType(typ, dim, this.filename, typ.getBeginLine(), typ.getBeginColumn(), typ.getEndLine(), typ.getEndColumn());
        }

        return new FieldDeclaration(flags, typ, name.image, exp, this.filename, bl, bc, el, ec);
    }

    /**
     * Creates a variable declaration
     */
    private VariableDeclaration createVariableDeclaration(final Token mf, Type typ, final Token name, final Expression exp, final int dim) {
        int bl;
        int bc;
        int el;
        int ec;
        boolean isFinal = false;

        // Compute the position of the declaration in the source code
        if (mf != null) {
            bl = mf.beginLine;
            bc = mf.beginColumn;
            isFinal = true;
        } else {
            bl = typ.getBeginLine();
            bc = typ.getBeginColumn();
        }

        if (exp != null) {
            el = exp.getEndLine();
            ec = exp.getEndColumn();
        } else {
            el = name.endLine;
            ec = name.endColumn;
        }

        // If the variable contains an array, create an array type node
        if (dim > 0) {
            typ = new ArrayType(typ, dim, this.filename, typ.getBeginLine(), typ.getBeginColumn(), typ.getEndLine(), typ.getEndColumn());
        }

        return new VariableDeclaration(isFinal, typ, name.image, exp, this.filename, bl, bc, el, ec);
    }

    /*
     * The classes derived from this one are used for parsing only
     */

    abstract class ExpressionSuffix {
        /**
         * Creates an expression node
         * 
         * @param prefix the prefix expression
         * @param it an iterator over the suffixes
         */
        public abstract Expression createExpression(Expression prefix, Iterator it);
    }

    class DotAllocationSuffix extends ExpressionSuffix {
        /**
         * The allocation expression
         */
        public Allocation expression;

        /**
         * Creates a new suffix
         * 
         * @param exp the expression
         */
        public DotAllocationSuffix(final Allocation exp) {
            this.expression = exp;
        }

        /**
         * Creates an expression node
         * 
         * @param prefix the prefix expression
         * @param it an iterator over the suffixes
         */
        public Expression createExpression(final Expression prefix, final Iterator it) {
            Expression exp = prefix;
            if (it.hasNext()) {
                exp = ((ExpressionSuffix) it.next()).createExpression(prefix, it);
            } else {
                if (prefix instanceof CompileTimeExpression) {
                    exp = ((CompileTimeExpression) prefix).createRuntimeExpression();
                }
            }
            if (this.expression instanceof SimpleAllocation) {
                final SimpleAllocation sa = (SimpleAllocation) this.expression;
                return new InnerAllocation(exp, sa.getCreationType(), sa.getArguments(), Parser.this.filename, exp.getBeginLine(), exp.getBeginColumn(), sa.getEndLine(), sa.getEndColumn());
            } else {
                final ClassAllocation ca = (ClassAllocation) this.expression;
                return new InnerClassAllocation(exp, ca.getCreationType(), ca.getArguments(), ca.getMembers(), Parser.this.filename, exp.getBeginLine(), exp.getBeginColumn(), ca.getEndLine(), ca
                        .getEndColumn());
            }
        }
    }

    class DotIdentifierSuffix extends ExpressionSuffix {
        /**
         * The identifier
         */
        public Token identifier;

        /**
         * Creates a new suffix
         * 
         * @param ident the identifier
         */
        public DotIdentifierSuffix(final Token ident) {
            this.identifier = ident;
        }

        /**
         * Creates an expression node
         * 
         * @param prefix the prefix expression
         * @param it an iterator over the suffixes
         */
        public Expression createExpression(final Expression prefix, final Iterator it) {
            Expression exp = prefix;
            if (it.hasNext()) {
                exp = ((ExpressionSuffix) it.next()).createExpression(prefix, it);
            } else {
                if (prefix instanceof CompileTimeExpression) {
                    exp = ((CompileTimeExpression) prefix).createRuntimeExpression();
                }
            }
            return new ObjectFieldAccess(exp, this.identifier.image, Parser.this.filename, exp.getBeginLine(), exp.getBeginColumn(), this.identifier.endLine, this.identifier.endColumn);
        }
    }

    class ArrayReferenceSuffix extends ExpressionSuffix {
        /**
         * The expression
         */
        public Expression expression;

        /**
         * The end line
         */
        public int endLine;

        /**
         * The end column
         */
        public int endColumn;

        /**
         * Creates a new suffix
         * 
         * @param exp the expression
         * @param el the end line
         * @param ec the end column
         */
        public ArrayReferenceSuffix(final Expression exp, final int el, final int ec) {
            this.expression = exp;
            this.endLine = el;
            this.endColumn = ec;
        }

        /**
         * Creates an expression node
         * 
         * @param prefix the prefix expression
         * @param it an iterator over the suffixes
         */
        public Expression createExpression(final Expression prefix, final Iterator it) {
            Expression exp = prefix;
            if (it.hasNext()) {
                exp = ((ExpressionSuffix) it.next()).createExpression(prefix, it);
            } else {
                if (prefix instanceof CompileTimeExpression) {
                    exp = ((CompileTimeExpression) prefix).createRuntimeExpression();
                }
            }
            return new ArrayAccess(exp, this.expression, Parser.this.filename, exp.getBeginLine(), exp.getBeginColumn(), this.endLine, this.endColumn);
        }
    }

    class DotThisSuffix extends ExpressionSuffix {
        /**
         * The end line
         */
        public int endLine;

        /**
         * The end column
         */
        public int endColumn;

        /**
         * Creates a new suffix
         * 
         * @param el the end line
         * @param ec the end column
         * @param fn the file name
         */
        public DotThisSuffix(final int el, final int ec) {
            this.endLine = el;
            this.endColumn = ec;
        }

        /**
         * Creates an expression node
         * 
         * @param prefix the prefix expression
         * @param it an iterator over the suffixes
         */
        public Expression createExpression(final Expression prefix, final Iterator it) {
            Expression exp = prefix;
            if (it.hasNext()) {
                exp = ((ExpressionSuffix) it.next()).createExpression(prefix, it);
            } else {
                if (prefix instanceof CompileTimeExpression) {
                    exp = ((CompileTimeExpression) prefix).createRuntimeExpression();
                }
            }
            if (exp instanceof QualifiedName) {
                return new ThisExpression(((QualifiedName) exp).getIdentifiers(), Parser.this.filename, exp.getBeginLine(), exp.getBeginColumn(), this.endLine, this.endColumn);
            } else {
                throw new ParseError(Parser.this.reader.getMessage("this.prefix", null), Parser.this.filename, exp.getBeginLine(), exp.getBeginColumn());
            }
        }
    }

    class ArgumentsSuffix extends ExpressionSuffix {
        /**
         * The arguments
         */
        public List arguments;

        /**
         * The end line
         */
        public int endLine;

        /**
         * The end column
         */
        public int endColumn;

        /**
         * Creates a new argument suffix
         * 
         * @param args the list of argument
         * @param el the end line
         * @param ec the end column
         */
        public ArgumentsSuffix(final List args, final int el, final int ec) {
            this.arguments = args;
            this.endLine = el;
            this.endColumn = ec;
        }

        /**
         * Creates an expression node
         * 
         * @param prefix the prefix expression
         * @param it an iterator over the suffixes
         */
        public Expression createExpression(final Expression prefix, final Iterator it) {
            if (it.hasNext()) {
                final ExpressionSuffix es = (ExpressionSuffix) it.next();
                if (es instanceof DotIdentifierSuffix) {
                    final DotIdentifierSuffix dis = (DotIdentifierSuffix) es;
                    Expression exp = prefix;
                    if (it.hasNext()) {
                        exp = ((ExpressionSuffix) it.next()).createExpression(prefix, it);
                    } else if (prefix instanceof CompileTimeExpression) {
                        exp = ((CompileTimeExpression) prefix).createRuntimeExpression();
                    }
                    return new ObjectMethodCall(exp, dis.identifier.image, this.arguments, Parser.this.filename, exp.getBeginLine(), exp.getBeginColumn(), this.endLine, this.endColumn);
                } else {
                    throw new ParseError(Parser.this.reader.getMessage("parameter.list", null), Parser.this.filename, this.endLine, this.endColumn);
                }
            } else {
                if (prefix instanceof CompileTimeQualifiedName) {
                    // Remove the last identifier from the qualified name
                    final List l = ((CompileTimeQualifiedName) prefix).identifiers;
                    final Token f = ((TreeToken) l.get(0)).getToken();
                    final Token t = ((TreeToken) l.remove(l.size() - 1)).getToken();
                    Expression exp = null;
                    if (l.size() >= 1) {
                        exp = ((CompileTimeQualifiedName) prefix).createRuntimeExpression();
                    }
                    return new ObjectMethodCall(exp, t.image, this.arguments, Parser.this.filename, f.beginLine, f.beginColumn, this.endLine, this.endColumn);
                } else if (prefix instanceof CompileTimeSuperExpression) {
                    // Transform the super expression into a super method call
                    final CompileTimeSuperExpression se = (CompileTimeSuperExpression) prefix;
                    return new SuperMethodCall(se.identifier, this.arguments, Parser.this.filename, se.getBeginLine(), se.getBeginColumn(), this.endLine, this.endColumn);
                } else {
                    throw new ParseError(Parser.this.reader.getMessage("parameter.list", null), Parser.this.filename, this.endLine, this.endColumn);
                }
            }
        }
    }

    interface CompileTimeExpression {
        /**
         * Builds a runtime expression from this compile-time one. This method must only be called
         * when the expression has no suffix.
         */
        Expression createRuntimeExpression();

    }

    class CompileTimeSuperExpression extends Expression implements CompileTimeExpression {
        /**
         * The identifier from the superclass
         */
        public String identifier;

        /**
         * Initializes the expression
         * 
         * @param ident the identifier from the super class
         * @param bl the begin line
         * @param bc the begin column
         * @param el the end line
         * @param ec the end column
         */
        public CompileTimeSuperExpression(final String ident, final int bl, final int bc, final int el, final int ec) {
            super("", bl, bc, el, ec);
            this.identifier = ident;
        }

        /**
         * Builds a runtime expression from this compile-time one. This method must be called when
         * the expression has no suffix
         */
        public Expression createRuntimeExpression() {
            return new SuperFieldAccess(this.identifier, Parser.this.filename, getBeginLine(), getBeginColumn(), getEndLine(), getEndColumn());
        }

        /**
         * Not used
         */
        public Object acceptVisitor(final Visitor visitor) {
            return null;
        }
    }

    class CompileTimeQualifiedName extends Expression implements CompileTimeExpression {
        /**
         * The identifiers (tokens)
         */
        public List identifiers;

        /**
         * Initializes the expression
         * 
         * @param ids a list of token
         */
        public CompileTimeQualifiedName(final List ids) {
            super("", 0, 0, 0, 0);
            this.identifiers = ids;
        }

        /**
         * Creates a runtime qualified name
         */
        public Expression createFieldAccess() {
            if (this.identifiers.size() == 1) {
                final Token t = ((TreeToken) this.identifiers.get(0)).getToken();
                return new QualifiedName(this.identifiers, Parser.this.filename, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
            } else {
                final Token f = ((TreeToken) this.identifiers.get(0)).getToken();
                final Token t = ((TreeToken) this.identifiers.remove(this.identifiers.size() - 1)).getToken();
                ;
                final Token l = ((TreeToken) this.identifiers.get(this.identifiers.size() - 1)).getToken();
                return new ObjectFieldAccess(new QualifiedName(this.identifiers, Parser.this.filename, f.beginLine, f.beginColumn, l.endLine, l.endColumn), t.image, Parser.this.filename, f.beginLine,
                        f.beginColumn, t.endLine, t.endColumn);
            }
        }

        /**
         * Builds a runtime expression from this compile-time one. This method must be called when
         * the expression has no suffix
         */
        public Expression createRuntimeExpression() {
            final Token first = ((TreeToken) this.identifiers.get(0)).getToken();
            final Token last = ((TreeToken) this.identifiers.get(this.identifiers.size() - 1)).getToken();
            return new QualifiedName(this.identifiers, Parser.this.filename, first.beginLine, first.beginColumn, last.endLine, last.endColumn);
        }

        /**
         * Not used
         */
        public Object acceptVisitor(final Visitor visitor) {
            return null;
        }
    }

    /**
     * To store modifier flags
     */
    static class ModifierFlags {
        int accessFlags;
        int beginLine;
        int beginColumn;

        ModifierFlags(final int flags, final int bl, final int bc) {
            this.accessFlags = flags;
            this.beginLine = bl;
            this.beginColumn = bc;
        }
    }

    /**
     * To store a class body
     */
    static class ClassBody {
        List list;
        int endLine;
        int endColumn;

        ClassBody(final List l, final int el, final int ec) {
            this.list = l;
            this.endLine = el;
            this.endColumn = ec;
        }
    }

    /*
     * The syntactic grammar
     */

    // Productions for the intepreter ////////////////////////////////////////////////
    /**
     * Parses top level statements. This production is not a Java language rule. It is used by
     * DynamicJava.
     * 
     * @return a list of nodes (possibly empty)
     * @see koala.dynamicjava.tree.Node
     */
    final public List parseStream() throws ParseException {
        final List list = new LinkedList();
        List l;
        Node root = null;
        label_1: while (true) {
            switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
            case ABSTRACT:
            case BOOLEAN:
            case BREAK:
            case BYTE:
            case CHAR:
            case CLASS:
            case CONTINUE:
            case DO:
            case DOUBLE:
            case FALSE:
            case FINAL:
            case FLOAT:
            case FOR:
            case IF:
            case IMPORT:
            case INT:
            case INTERFACE:
            case LONG:
            case NATIVE:
            case NEW:
            case NULL:
            case PACKAGE:
            case PRIVATE:
            case PROTECTED:
            case PUBLIC:
            case RETURN:
            case SHORT:
            case STATIC:
            case SUPER:
            case SWITCH:
            case SYNCHRONIZED:
            case THIS:
            case THROW:
            case TRANSIENT:
            case TRUE:
            case TRY:
            case VOID:
            case VOLATILE:
            case WHILE:
            case INTEGER_LITERAL:
            case LONG_LITERAL:
            case FLOAT_LITERAL:
            case DOUBLE_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
            case IDENTIFIER:
            case LPAREN:
            case LBRACE:
            case SEMICOLON:
            case BANG:
            case TILDE:
            case INCREMENT:
            case DECREMENT:
            case PLUS:
            case MINUS:
                ;
                break;
            default:
                this.jj_la1[0] = this.jj_gen;
                break label_1;
            }
            switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
            case PACKAGE:
                root = packageDeclaration();
                break;
            case IMPORT:
                root = importDeclaration();
                break;
            default:
                this.jj_la1[1] = this.jj_gen;
                if (jj_2_1(2147483647)) {
                    root = methodDeclaration();
                } else if (jj_2_2(2147483647)) {
                    l = localVariableDeclaration();
                    jj_consume_token(SEMICOLON);
                    list.addAll(l);
                } else if (jj_2_3(2)) {
                    root = topLevelStatement();
                } else {
                    switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
                    case ABSTRACT:
                    case CLASS:
                    case FINAL:
                    case INTERFACE:
                    case NATIVE:
                    case PRIVATE:
                    case PROTECTED:
                    case PUBLIC:
                    case STATIC:
                    case SYNCHRONIZED:
                    case TRANSIENT:
                    case VOLATILE:
                        root = typeDeclaration();
                        break;
                    default:
                        this.jj_la1[2] = this.jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                    }
                }
            }
            if (root != null) {
                list.add(root);
                root = null;
            }
        }
        jj_consume_token(0);
        {
            if (true) {
                return list;
            }
        }
        throw new Error("Missing return statement in function");
    }

    /**
     * Parses one top level statement. This production is not a Java language rule. It is used by
     * DynamicJava.
     * 
     * @return a node
     * @see koala.dynamicjava.tree.Node
     */
    final public Node topLevelStatement() throws ParseException {
        Node node;
        if (jj_2_4(2)) {
            node = labeledStatement();
        } else {
            switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
            case SEMICOLON:
                node = emptyStatement();
                break;
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FALSE:
            case FLOAT:
            case INT:
            case LONG:
            case NEW:
            case NULL:
            case SHORT:
            case SUPER:
            case THIS:
            case TRUE:
            case VOID:
            case INTEGER_LITERAL:
            case LONG_LITERAL:
            case FLOAT_LITERAL:
            case DOUBLE_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
            case IDENTIFIER:
            case LPAREN:
            case BANG:
            case TILDE:
            case INCREMENT:
            case DECREMENT:
            case PLUS:
            case MINUS:
                node = expression();
                jj_consume_token(SEMICOLON);
                break;
            case LBRACE:
                node = block();
                break;
            case IF:
                node = ifStatement();
                break;
            case WHILE:
                node = whileStatement();
                break;
            case DO:
                node = doStatement();
                break;
            case SWITCH:
                node = switchStatement();
                break;
            case FOR:
                node = forStatement();
                break;
            case BREAK:
                node = breakStatement();
                break;
            case CONTINUE:
                node = continueStatement();
                break;
            case RETURN:
                node = returnStatement();
                break;
            case THROW:
                node = throwStatement();
                break;
            case SYNCHRONIZED:
                node = synchronizedStatement();
                break;
            case TRY:
                node = tryStatement();
                break;
            default:
                this.jj_la1[3] = this.jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
        }
        {
            if (true) {
                return node;
            }
        }
        throw new Error("Missing return statement in function");
    }

    // Productions for Packages ////////////////////////////////////////////////////////

    /**
     * Parses a Java compilation unit
     * 
     * @return a list of nodes (possibly empty)
     * @see koala.dynamicjava.tree.Node
     */
    final public List parseCompilationUnit() throws ParseException {
        final List list = new LinkedList();
        Node node;
        switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
        case PACKAGE:
            node = packageDeclaration();
            list.add(node);
            break;
        default:
            this.jj_la1[4] = this.jj_gen;
            ;
        }
        label_2: while (true) {
            switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
            case IMPORT:
                ;
                break;
            default:
                this.jj_la1[5] = this.jj_gen;
                break label_2;
            }
            node = importDeclaration();
            list.add(node);
        }
        label_3: while (true) {
            switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
            case ABSTRACT:
            case CLASS:
            case FINAL:
            case INTERFACE:
            case NATIVE:
            case PRIVATE:
            case PROTECTED:
            case PUBLIC:
            case STATIC:
            case SYNCHRONIZED:
            case TRANSIENT:
            case VOLATILE:
            case SEMICOLON:
                ;
                break;
            default:
                this.jj_la1[6] = this.jj_gen;
                break label_3;
            }
            switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
            case ABSTRACT:
            case CLASS:
            case FINAL:
            case INTERFACE:
            case NATIVE:
            case PRIVATE:
            case PROTECTED:
            case PUBLIC:
            case STATIC:
            case SYNCHRONIZED:
            case TRANSIENT:
            case VOLATILE:
                node = typeDeclaration();
                list.add(node);
                break;
            case SEMICOLON:
                jj_consume_token(SEMICOLON);
                break;
            default:
                this.jj_la1[7] = this.jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
        }
        jj_consume_token(0);
        {
            if (true) {
                return list;
            }
        }
        throw new Error("Missing return statement in function");
    }

    /**
     * Parses a package declaration
     * 
     * @see koala.dynamicjava.tree.PackageDeclaration
     */
    final public PackageDeclaration packageDeclaration() throws ParseException {
        List list = null;
        Token t1, t2;
        t1 = jj_consume_token(PACKAGE);
        switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
        case IDENTIFIER:
            list = name();
            break;
        default:
            this.jj_la1[8] = this.jj_gen;
            ;
        }
        t2 = jj_consume_token(SEMICOLON);
        {
            if (true) {
                return new PackageDeclaration(list, this.filename, t1.beginLine, t1.beginColumn, t2.endLine, t2.endColumn);
            }
        }
        throw new Error("Missing return statement in function");
    }

    /**
     * Parses an import declaration
     * 
     * @see koala.dynamicjava.tree.ImportDeclaration
     */
    final public ImportDeclaration importDeclaration() throws ParseException {
        List list;
        Token star = null;
        Token t1, t2;
        t1 = jj_consume_token(IMPORT);
        list = name();
        switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
        case DOT:
            jj_consume_token(DOT);
            star = jj_consume_token(STAR);
            break;
        default:
            this.jj_la1[9] = this.jj_gen;
            ;
        }
        t2 = jj_consume_token(SEMICOLON);
        {
            if (true) {
                return new ImportDeclaration(list, star != null, this.filename, t1.beginLine, t1.beginColumn, t2.endLine, t2.endColumn);
            }
        }
        throw new Error("Missing return statement in function");
    }

    /**
     * Parses a type declaration
     * 
     * @see koala.dynamicjava.tree.TypeDeclaration
     */
    final public TypeDeclaration typeDeclaration() throws ParseException {
        TypeDeclaration node;
        if (jj_2_5(2147483647)) {
            node = classDeclaration();
        } else {
            switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
            case ABSTRACT:
            case FINAL:
            case INTERFACE:
            case NATIVE:
            case PRIVATE:
            case PROTECTED:
            case PUBLIC:
            case STATIC:
            case SYNCHRONIZED:
            case TRANSIENT:
            case VOLATILE:
                node = interfaceDeclaration();
                break;
            default:
                this.jj_la1[10] = this.jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
        }
        {
            if (true) {
                return node;
            }
        }
        throw new Error("Missing return statement in function");
    }

    // Productions for Names ////////////////////////////////////////////////////////

    /**
     * Parses a name
     * 
     * @return a list of tree token
     * @see koala.dynamicjava.parser.wrapper.TreeToken
     */
    final public List name() throws ParseException {
        Token id;
        final List list = new LinkedList();
        id = jj_consume_token(IDENTIFIER);
        list.add(new TreeToken(id));
        label_4: while (true) {
            if (jj_2_6(2)) {
                ;
            } else {
                break label_4;
            }
            jj_consume_token(DOT);
            id = jj_consume_token(IDENTIFIER);
            list.add(new TreeToken(id));
        }
        {
            if (true) {
                return list;
            }
        }
        throw new Error("Missing return statement in function");
    }

    /**
     * Parses a comma separated list of names
     * 
     * @return a list of list of token
     * @see koala.dynamicjava.parser.wrapper.TreeToken
     */
    final public List nameList() throws ParseException {
        final List list = new LinkedList();
        Object obj;
        obj = name();
        list.add(obj);
        label_5: while (true) {
            switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
            case COMMA:
                ;
                break;
            default:
                this.jj_la1[11] = this.jj_gen;
                break label_5;
            }
            jj_consume_token(COMMA);
            obj = name();
            list.add(obj);
        }
        {
            if (true) {
                return list;
            }
        }
        throw new Error("Missing return statement in function");
    }

    // Productions for Classes //////////////////////////////////////////////////////

    // Productions for Class Declaration ============================================

    /**
     * Parses a class declaration
     * 
     * @see koala.dynamicjava.tree.ClassDeclaration
     */
    final public ClassDeclaration classDeclaration() throws ParseException {
        ClassDeclaration cd;
        ModifierFlags md;
        md = modifiers();
        cd = unmodifiedClassDeclaration(md);
        {
            if (true) {
                return cd;
            }
        }
        throw new Error("Missing return statement in function");
    }

    /**
     * Used internally to parse a modifier
     */
    final public ModifierFlags modifiers() throws ParseException {
        Token t;
        int flags = 0;
        Token ft = null;
        label_6: while (true) {
            switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
            case ABSTRACT:
            case FINAL:
            case NATIVE:
            case PRIVATE:
            case PROTECTED:
            case PUBLIC:
            case STATIC:
            case SYNCHRONIZED:
            case TRANSIENT:
            case VOLATILE:
                ;
                break;
            default:
                this.jj_la1[12] = this.jj_gen;
                break label_6;
            }
            switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
            case ABSTRACT:
                t = jj_consume_token(ABSTRACT);
                if (ft == null) {
                    ft = t;
                } else if ((flags & Modifier.ABSTRACT) != 0) {
                    {
                        if (true) {
                            throw new ParseError(this.reader.getMessage("abstract.abstract", null), this.filename, t.beginLine, t.beginColumn);
                        }
                    }
                } else if ((flags & Modifier.FINAL) != 0) {
                    {
                        if (true) {
                            throw new ParseError(this.reader.getMessage("abstract.final", null), this.filename, t.beginLine, t.beginColumn);
                        }
                    }
                }
                flags |= Modifier.ABSTRACT;
                break;
            case FINAL:
                t = jj_consume_token(FINAL);
                if (ft == null) {
                    ft = t;
                } else if ((flags & Modifier.FINAL) != 0) {
                    {
                        if (true) {
                            throw new ParseError(this.reader.getMessage("final.final", null), this.filename, t.beginLine, t.beginColumn);
                        }
                    }
                } else if ((flags & Modifier.ABSTRACT) != 0) {
                    {
                        if (true) {
                            throw new ParseError(this.reader.getMessage("abstract.final", null), this.filename, t.beginLine, t.beginColumn);
                        }
                    }
                }
                flags |= Modifier.FINAL;
                break;
            case PUBLIC:
                t = jj_consume_token(PUBLIC);
                if (ft == null) {
                    ft = t;
                } else if ((flags & Modifier.PUBLIC) != 0) {
                    {
                        if (true) {
                            throw new ParseError(this.reader.getMessage("public.public", null), this.filename, t.beginLine, t.beginColumn);
                        }
                    }
                } else if ((flags & Modifier.PROTECTED) != 0) {
                    {
                        if (true) {
                            throw new ParseError(this.reader.getMessage("public.protected", null), this.filename, t.beginLine, t.beginColumn);
                        }
                    }
                } else if ((flags & Modifier.PRIVATE) != 0) {
                    {
                        if (true) {
                            throw new ParseError(this.reader.getMessage("public.private", null), this.filename, t.beginLine, t.beginColumn);
                        }
                    }
                }

                flags |= Modifier.PUBLIC;
                break;
            case PROTECTED:
                t = jj_consume_token(PROTECTED);
                if (ft == null) {
                    ft = t;
                } else if ((flags & Modifier.PROTECTED) != 0) {
                    {
                        if (true) {
                            throw new ParseError(this.reader.getMessage("protected.protected", null), this.filename, t.beginLine, t.beginColumn);
                        }
                    }
                } else if ((flags & Modifier.PUBLIC) != 0) {
                    {
                        if (true) {
                            throw new ParseError(this.reader.getMessage("public.protected", null), this.filename, t.beginLine, t.beginColumn);
                        }
                    }
                } else if ((flags & Modifier.PRIVATE) != 0) {
                    {
                        if (true) {
                            throw new ParseError(this.reader.getMessage("protected.private", null), this.filename, t.beginLine, t.beginColumn);
                        }
                    }
                }
                flags |= Modifier.PROTECTED;
                break;
            case PRIVATE:
                t = jj_consume_token(PRIVATE);
                if (ft == null) {
                    ft = t;
                } else if ((flags & Modifier.PRIVATE) != 0) {
                    {
                        if (true) {
                            throw new ParseError(this.reader.getMessage("private.private", null), this.filename, t.beginLine, t.beginColumn);
                        }
                    }
                } else if ((flags & Modifier.PUBLIC) != 0) {
                    {
                        if (true) {
                            throw new ParseError(this.reader.getMessage("public.private", null), this.filename, t.beginLine, t.beginColumn);
                        }
                    }
                } else if ((flags & Modifier.PROTECTED) != 0) {
                    {
                        if (true) {
                            throw new ParseError(this.reader.getMessage("protected.private", null), this.filename, t.beginLine, t.beginColumn);
                        }
                    }
                }
                flags |= Modifier.PRIVATE;
                break;
            case TRANSIENT:
                t = jj_consume_token(TRANSIENT);
                if (ft == null) {
                    ft = t;
                } else if ((flags & Modifier.TRANSIENT) != 0) {
                    {
                        if (true) {
                            throw new ParseError(this.reader.getMessage("transient.transient", null), this.filename, t.beginLine, t.beginColumn);
                        }
                    }
                }
                flags |= Modifier.TRANSIENT;
                break;
            case VOLATILE:
                t = jj_consume_token(VOLATILE);
                if (ft == null) {
                    ft = t;
                } else if ((flags & Modifier.VOLATILE) != 0) {
                    {
                        if (true) {
                            throw new ParseError(this.reader.getMessage("volatile.volatile", null), this.filename, t.beginLine, t.beginColumn);
                        }
                    }
                }
                flags |= Modifier.VOLATILE;
                break;
            case NATIVE:
                t = jj_consume_token(NATIVE);
                if (ft == null) {
                    ft = t;
                } else if ((flags & Modifier.NATIVE) != 0) {
                    {
                        if (true) {
                            throw new ParseError(this.reader.getMessage("native.native", null), this.filename, t.beginLine, t.beginColumn);
                        }
                    }
                } else if ((flags & Modifier.ABSTRACT) != 0) {
                    {
                        if (true) {
                            throw new ParseError(this.reader.getMessage("abstract.native", null), this.filename, t.beginLine, t.beginColumn);
                        }
                    }
                }
                flags |= Modifier.NATIVE;
                break;
            case STATIC:
                t = jj_consume_token(STATIC);
                if (ft == null) {
                    ft = t;
                } else if ((flags & Modifier.STATIC) != 0) {
                    {
                        if (true) {
                            throw new ParseError(this.reader.getMessage("static.static", null), this.filename, t.beginLine, t.beginColumn);
                        }
                    }
                }
                flags |= Modifier.STATIC;
                break;
            case SYNCHRONIZED:
                t = jj_consume_token(SYNCHRONIZED);
                if (ft == null) {
                    ft = t;
                } else if ((flags & Modifier.SYNCHRONIZED) != 0) {
                    {
                        if (true) {
                            throw new ParseError(this.reader.getMessage("synchronized.synchronized", null), this.filename, t.beginLine, t.beginColumn);
                        }
                    }
                }
                flags |= Modifier.SYNCHRONIZED;
                break;
            default:
                this.jj_la1[13] = this.jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
        }
        {
            if (true) {
                return ft == null ? null : new ModifierFlags(flags, ft.beginLine, ft.beginColumn);
            }
        }
        throw new Error("Missing return statement in function");
    }

    /**
     * Parses a class declaration without modifier
     * 
     * @see koala.dynamicjava.tree.ClassDeclaration
     */
    final public ClassDeclaration unmodifiedClassDeclaration(final ModifierFlags mf) throws ParseException {
        Token t;
        Token id;
        List ext = null;
        List impl = null;
        ClassBody body;
        t = jj_consume_token(CLASS);
        id = jj_consume_token(IDENTIFIER);
        switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
        case EXTENDS:
            jj_consume_token(EXTENDS);
            ext = name();
            break;
        default:
            this.jj_la1[14] = this.jj_gen;
            ;
        }
        switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
        case IMPLEMENTS:
            jj_consume_token(IMPLEMENTS);
            impl = nameList();
            break;
        default:
            this.jj_la1[15] = this.jj_gen;
            ;
        }
        body = classBody();
        if (mf == null) {
            {
                if (true) {
                    return new ClassDeclaration(0, id.image, ext, impl, body.list, this.filename, t.beginLine, t.beginColumn, body.endLine, body.endColumn);
                }
            }
        } else {
            {
                if (true) {
                    return new ClassDeclaration(mf.accessFlags, id.image, ext, impl, body.list, this.filename, mf.beginLine, mf.beginColumn, body.endLine, body.endColumn);
                }
            }
        }
        throw new Error("Missing return statement in function");
    }

    /**
     * Used internally to parse the body of a class
     */
    final public ClassBody classBody() throws ParseException {
        Token t;
        final List list = new LinkedList();
        List decl;
        jj_consume_token(LBRACE);
        label_7: while (true) {
            switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
            case ABSTRACT:
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case CLASS:
            case DOUBLE:
            case FINAL:
            case FLOAT:
            case INT:
            case INTERFACE:
            case LONG:
            case NATIVE:
            case PRIVATE:
            case PROTECTED:
            case PUBLIC:
            case SHORT:
            case STATIC:
            case SYNCHRONIZED:
            case TRANSIENT:
            case VOID:
            case VOLATILE:
            case IDENTIFIER:
            case LBRACE:
            case SEMICOLON:
                ;
                break;
            default:
                this.jj_la1[16] = this.jj_gen;
                break label_7;
            }
            decl = classBodyDeclaration();
            list.addAll(decl);
        }
        t = jj_consume_token(RBRACE);
        {
            if (true) {
                return new ClassBody(list, t.endLine, t.endColumn);
            }
        }
        throw new Error("Missing return statement in function");
    }

    /**
     * Parses one declaration in the body of a class.
     * 
     * @return a list of node because one field declaration can contain multiple declarations.
     * @see koala.dynamicjava.tree.Node
     */
    final public List classBodyDeclaration() throws ParseException {
        Node node = null;
        List list = new LinkedList();
        if (jj_2_7(2)) {
            node = initializer();
        } else if (jj_2_8(2147483647)) {
            node = classDeclaration();
        } else if (jj_2_9(2147483647)) {
            node = interfaceDeclaration();
        } else if (jj_2_10(2147483647)) {
            node = constructorDeclaration();
        } else if (jj_2_11(2147483647)) {
            node = methodDeclaration();
        } else {
            switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
            case ABSTRACT:
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FINAL:
            case FLOAT:
            case INT:
            case LONG:
            case NATIVE:
            case PRIVATE:
            case PROTECTED:
            case PUBLIC:
            case SHORT:
            case STATIC:
            case SYNCHRONIZED:
            case TRANSIENT:
            case VOLATILE:
            case IDENTIFIER:
                list = fieldDeclaration();
                break;
            case SEMICOLON:
                jj_consume_token(SEMICOLON);
                break;
            default:
                this.jj_la1[17] = this.jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
        }
        if (node != null) {
            list.add(node);
        }
        {
            if (true) {
                return list;
            }
        }
        throw new Error("Missing return statement in function");
    }

    // Productions for Field Declaration ============================================

    /**
     * Parses a field declaration.
     * 
     * @return a list of field declaration because one field declaration can contain multiple
     *         declarations.
     * @see koala.dynamicjava.tree.FieldDeclaration
     */
    final public List fieldDeclaration() throws ParseException {
        ModifierFlags mf;
        Type typ;
        Token id;
        int dim = 0;
        Expression exp = null;
        final List list = new LinkedList();
        mf = modifiers();
        typ = type();
        id = jj_consume_token(IDENTIFIER);
        label_8: while (true) {
            switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
            case LBRACKET:
                ;
                break;
            default:
                this.jj_la1[18] = this.jj_gen;
                break label_8;
            }
            jj_consume_token(LBRACKET);
            jj_consume_token(RBRACKET);
            dim++;
        }
        switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
        case ASSIGN:
            jj_consume_token(ASSIGN);
            exp = variableInitializer();
            break;
        default:
            this.jj_la1[19] = this.jj_gen;
            ;
        }
        list.add(createFieldDeclaration(mf, typ, id, exp, dim));
        label_9: while (true) {
            switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
            case COMMA:
                ;
                break;
            default:
                this.jj_la1[20] = this.jj_gen;
                break label_9;
            }
            jj_consume_token(COMMA);
            dim = 0;
            exp = null;
            id = jj_consume_token(IDENTIFIER);
            label_10: while (true) {
                switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
                case LBRACKET:
                    ;
                    break;
                default:
                    this.jj_la1[21] = this.jj_gen;
                    break label_10;
                }
                jj_consume_token(LBRACKET);
                jj_consume_token(RBRACKET);
                dim++;
            }
            switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
            case ASSIGN:
                jj_consume_token(ASSIGN);
                exp = variableInitializer();
                break;
            default:
                this.jj_la1[22] = this.jj_gen;
                ;
            }
            list.add(createFieldDeclaration(mf, typ, id, exp, dim));
        }
        jj_consume_token(SEMICOLON);
        {
            if (true) {
                return list;
            }
        }
        throw new Error("Missing return statement in function");
    }

    // Productions for Method Declaration ===========================================

    /**
     * Parses a method declaration
     * 
     * @see koala.dynamicjava.tree.MethodDeclaration
     */
    final public MethodDeclaration methodDeclaration() throws ParseException {
        final MethodDeclaration md;
        ModifierFlags mf;
        int bl;
        int bc;
        int flags = 0;
        Type typ;
        Token id;
        int dim = 0;
        List params;
        List exceptions = new LinkedList();
        Node body = null;
        mf = modifiers();
        typ = resultType();
        id = jj_consume_token(IDENTIFIER);
        params = formalParameters();
        label_11: while (true) {
            switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
            case LBRACKET:
                ;
                break;
            default:
                this.jj_la1[23] = this.jj_gen;
                break label_11;
            }
            jj_consume_token(LBRACKET);
            jj_consume_token(RBRACKET);
            dim++;
        }
        switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
        case THROWS:
            jj_consume_token(THROWS);
            exceptions = nameList();
            break;
        default:
            this.jj_la1[24] = this.jj_gen;
            ;
        }
        switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
        case LBRACE:
            body = block();
            break;
        case SEMICOLON:
            body = emptyStatement();
            break;
        default:
            this.jj_la1[25] = this.jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
        if (mf != null) {
            bl = mf.beginLine;
            bc = mf.beginColumn;
            flags = mf.accessFlags;
        } else {
            bl = typ.getBeginLine();
            bc = typ.getBeginColumn();
        }

        if (dim > 0) {
            typ = new ArrayType(typ, dim, this.filename, typ.getBeginLine(), typ.getBeginColumn(), typ.getEndLine(), typ.getEndColumn());
        }

        {
            if (true) {
                return new MethodDeclaration(flags, typ, id.image, params, exceptions, body instanceof BlockStatement ? (BlockStatement) body : null, this.filename, bl, bc, body.getEndLine(), body
                        .getEndColumn());
            }
        }
        throw new Error("Missing return statement in function");
    }

    /**
     * Parses formal parameters of the form '(param, param, ...)'
     * 
     * @see koala.dynamicjava.tree.FormalParameter
     */
    final public List formalParameters() throws ParseException {
        final List list = new LinkedList();
        Node node;
        jj_consume_token(LPAREN);
        switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FINAL:
        case FLOAT:
        case INT:
        case LONG:
        case SHORT:
        case IDENTIFIER:
            node = formalParameter();
            list.add(node);
            label_12: while (true) {
                switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
                case COMMA:
                    ;
                    break;
                default:
                    this.jj_la1[26] = this.jj_gen;
                    break label_12;
                }
                jj_consume_token(COMMA);
                node = formalParameter();
                list.add(node);
            }
            break;
        default:
            this.jj_la1[27] = this.jj_gen;
            ;
        }
        jj_consume_token(RPAREN);
        {
            if (true) {
                return list;
            }
        }
        throw new Error("Missing return statement in function");
    }

    /**
     * Parses one formal parameter
     * 
     * @see koala.dynamicjava.tree.FormalParameter
     */
    final public FormalParameter formalParameter() throws ParseException {
        Type typ;
        Token id;
        Token f = null;
        int dim = 0;
        switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
        case FINAL:
            f = jj_consume_token(FINAL);
            break;
        default:
            this.jj_la1[28] = this.jj_gen;
            ;
        }
        typ = type();
        id = jj_consume_token(IDENTIFIER);
        label_13: while (true) {
            switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
            case LBRACKET:
                ;
                break;
            default:
                this.jj_la1[29] = this.jj_gen;
                break label_13;
            }
            jj_consume_token(LBRACKET);
            jj_consume_token(RBRACKET);
            dim++;
        }
        if (dim > 0) {
            typ = new ArrayType(typ, dim, this.filename, typ.getBeginLine(), typ.getBeginColumn(), typ.getEndLine(), typ.getEndColumn());
        }
        {
            if (true) {
                return new FormalParameter(f != null, typ, id.image, this.filename, f != null ? f.beginLine : typ.getBeginLine(), f != null ? f.beginColumn : typ.getBeginColumn(), id.endLine,
                        id.endColumn);
            }
        }
        throw new Error("Missing return statement in function");
    }

    // Production for Initializer ===================================================

    /**
     * Parses one initializer
     * 
     * @see koala.dynamicjava.tree.Initializer
     */
    final public Initializer initializer() throws ParseException {
        Token t = null;
        BlockStatement node;
        switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
        case STATIC:
            t = jj_consume_token(STATIC);
            break;
        default:
            this.jj_la1[30] = this.jj_gen;
            ;
        }
        node = block();
        if (t == null) {
            {
                if (true) {
                    return new InstanceInitializer(node, this.filename, node.getBeginLine(), node.getEndColumn(), node.getEndLine(), node.getEndColumn());
                }
            }
        } else {
            {
                if (true) {
                    return new ClassInitializer(node, this.filename, t.beginLine, t.beginColumn, node.getEndLine(), node.getEndColumn());
                }
            }
        }
        throw new Error("Missing return statement in function");
    }

    // Productions for Constructor Declaration ======================================

    /**
     * Parses a constructor declaration
     * 
     * @see koala.dynamicjava.tree.ConstructorDeclaration
     */
    final public ConstructorDeclaration constructorDeclaration() throws ParseException {
        Token t = null;
        int flag = 0;
        Token id;
        List params;
        List exceptions = new LinkedList();
        ConstructorInvocation ci = null;
        List stmt;
        final List stmts = new LinkedList();
        int bl, bc;
        Token e;
        switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
            switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
            case PUBLIC:
                t = jj_consume_token(PUBLIC);
                flag = Modifier.PUBLIC;
                break;
            case PROTECTED:
                t = jj_consume_token(PROTECTED);
                flag = Modifier.PROTECTED;
                break;
            case PRIVATE:
                t = jj_consume_token(PRIVATE);
                flag = Modifier.PRIVATE;
                break;
            default:
                this.jj_la1[31] = this.jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
            break;
        default:
            this.jj_la1[32] = this.jj_gen;
            ;
        }
        id = jj_consume_token(IDENTIFIER);
        params = formalParameters();
        switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
        case THROWS:
            jj_consume_token(THROWS);
            exceptions = nameList();
            break;
        default:
            this.jj_la1[33] = this.jj_gen;
            ;
        }
        jj_consume_token(LBRACE);
        if (jj_2_12(2147483647)) {
            ci = explicitConstructorInvocation();
        } else {
            ;
        }
        label_14: while (true) {
            switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
            case BOOLEAN:
            case BREAK:
            case BYTE:
            case CHAR:
            case CLASS:
            case CONTINUE:
            case DO:
            case DOUBLE:
            case FALSE:
            case FINAL:
            case FLOAT:
            case FOR:
            case IF:
            case INT:
            case INTERFACE:
            case LONG:
            case NEW:
            case NULL:
            case RETURN:
            case SHORT:
            case SUPER:
            case SWITCH:
            case SYNCHRONIZED:
            case THIS:
            case THROW:
            case TRUE:
            case TRY:
            case VOID:
            case WHILE:
            case INTEGER_LITERAL:
            case LONG_LITERAL:
            case FLOAT_LITERAL:
            case DOUBLE_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
            case IDENTIFIER:
            case LPAREN:
            case LBRACE:
            case SEMICOLON:
            case INCREMENT:
            case DECREMENT:
                ;
                break;
            default:
                this.jj_la1[34] = this.jj_gen;
                break label_14;
            }
            stmt = blockStatement();
            stmts.addAll(stmt);
        }
        e = jj_consume_token(RBRACE);
        if (t == null) {
            bl = id.beginLine;
            bc = id.beginColumn;
        } else {
            bl = t.beginLine;
            bc = t.beginColumn;
        }
        {
            if (true) {
                return new ConstructorDeclaration(flag, id.image, params, exceptions, ci, stmts, this.filename, bl, bc, e.endLine, e.endColumn);
            }
        }
        throw new Error("Missing return statement in function");
    }

    /**
     * Parses a constructor invocation
     * 
     * @see koala.dynamicjava.tree.ConstructorInvocation
     */
    final public ConstructorInvocation explicitConstructorInvocation() throws ParseException {
        Token b, e;
        ArgumentsSuffix args;
        Expression exp = null;
        if (jj_2_14(2147483647)) {
            b = jj_consume_token(THIS);
            args = arguments();
            e = jj_consume_token(SEMICOLON);
        } else {
            switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FALSE:
            case FLOAT:
            case INT:
            case LONG:
            case NEW:
            case NULL:
            case SHORT:
            case SUPER:
            case THIS:
            case TRUE:
            case VOID:
            case INTEGER_LITERAL:
            case LONG_LITERAL:
            case FLOAT_LITERAL:
            case DOUBLE_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
            case IDENTIFIER:
            case LPAREN:
                if (jj_2_13(2)) {
                    exp = primaryExpression();
                    jj_consume_token(DOT);
                } else {
                    ;
                }
                b = jj_consume_token(SUPER);
                args = arguments();
                e = jj_consume_token(SEMICOLON);
                break;
            default:
                this.jj_la1[35] = this.jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
        }
        {
            if (true) {
                return new ConstructorInvocation(exp, args.arguments, b.image.equals("super"), this.filename, b.beginLine, b.beginColumn, e.endLine, e.endColumn);
            }
        }
        throw new Error("Missing return statement in function");
    }

    // Productions for Interfaces ///////////////////////////////////////////////////

    /**
     * Parses a interface declaration
     * 
     * @see koala.dynamicjava.tree.InterfaceDeclaration
     */
    final public InterfaceDeclaration interfaceDeclaration() throws ParseException {
        InterfaceDeclaration id;
        ModifierFlags md;
        md = modifiers();
        id = unmodifiedInterfaceDeclaration(md);
        {
            if (true) {
                return id;
            }
        }
        throw new Error("Missing return statement in function");
    }

    /**
     * Parses a interface declaration without modifier
     * 
     * @see koala.dynamicjava.tree.InterfaceDeclaration
     */
    final public InterfaceDeclaration unmodifiedInterfaceDeclaration(final ModifierFlags mf) throws ParseException {
        Token t;
        Token id;
        Token e;
        List impl = null;
        final List list = new LinkedList();
        List decl;
        int m = 0;
        t = jj_consume_token(INTERFACE);
        id = jj_consume_token(IDENTIFIER);
        switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
        case EXTENDS:
            jj_consume_token(EXTENDS);
            impl = nameList();
            break;
        default:
            this.jj_la1[36] = this.jj_gen;
            ;
        }
        jj_consume_token(LBRACE);
        label_15: while (true) {
            switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
            case ABSTRACT:
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case CLASS:
            case DOUBLE:
            case FINAL:
            case FLOAT:
            case INT:
            case INTERFACE:
            case LONG:
            case NATIVE:
            case PRIVATE:
            case PROTECTED:
            case PUBLIC:
            case SHORT:
            case STATIC:
            case SYNCHRONIZED:
            case TRANSIENT:
            case VOID:
            case VOLATILE:
            case IDENTIFIER:
                ;
                break;
            default:
                this.jj_la1[37] = this.jj_gen;
                break label_15;
            }
            decl = interfaceMemberDeclaration();
            list.addAll(decl);
        }
        e = jj_consume_token(RBRACE);
        if (mf != null) {
            m = mf.accessFlags;
        }
        {
            if (true) {
                return new InterfaceDeclaration(m, id.image, impl, list, this.filename, t.beginLine, t.beginColumn, e.endLine, e.endColumn);
            }
        }
        throw new Error("Missing return statement in function");
    }

    /**
     * Parses one declaration in the body of an interface.
     * 
     * @return a list of node because one field declaration can contain multiple declarations.
     * @see koala.dynamicjava.tree.Node
     */
    final public List interfaceMemberDeclaration() throws ParseException {
        Node node = null;
        List list = new LinkedList();
        if (jj_2_15(2147483647)) {
            node = classDeclaration();
        } else if (jj_2_16(2147483647)) {
            node = interfaceDeclaration();
        } else if (jj_2_17(2147483647)) {
            node = methodDeclaration();
        } else {
            switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
            case ABSTRACT:
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FINAL:
            case FLOAT:
            case INT:
            case LONG:
            case NATIVE:
            case PRIVATE:
            case PROTECTED:
            case PUBLIC:
            case SHORT:
            case STATIC:
            case SYNCHRONIZED:
            case TRANSIENT:
            case VOLATILE:
            case IDENTIFIER:
                list = fieldDeclaration();
                break;
            default:
                this.jj_la1[38] = this.jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
        }
        if (node != null) {
            list.add(node);
        }
        {
            if (true) {
                return list;
            }
        }
        throw new Error("Missing return statement in function");
    }

    // Productions for Arrays ////////////////////////////////////////////////////////

    /**
     * Parses an array initializer
     * 
     * @see koala.dynamicjava.tree.ArrayInitializer
     */
    final public ArrayInitializer arrayInitializer() throws ParseException {
        Expression init;
        Token t = null, b, e;
        final List list = new LinkedList();
        b = jj_consume_token(LBRACE);
        switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FALSE:
        case FLOAT:
        case INT:
        case LONG:
        case NEW:
        case NULL:
        case SHORT:
        case SUPER:
        case THIS:
        case TRUE:
        case VOID:
        case INTEGER_LITERAL:
        case LONG_LITERAL:
        case FLOAT_LITERAL:
        case DOUBLE_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case LBRACE:
        case BANG:
        case TILDE:
        case INCREMENT:
        case DECREMENT:
        case PLUS:
        case MINUS:
            init = variableInitializer();
            list.add(init);
            label_16: while (true) {
                if (jj_2_18(2)) {
                    ;
                } else {
                    break label_16;
                }
                jj_consume_token(COMMA);
                init = variableInitializer();
                list.add(init);
            }
            break;
        default:
            this.jj_la1[39] = this.jj_gen;
            ;
        }
        switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
        case COMMA:
            t = jj_consume_token(COMMA);
            break;
        default:
            this.jj_la1[40] = this.jj_gen;
            ;
        }
        e = jj_consume_token(RBRACE);
        {
            if (true) {
                return new ArrayInitializer(list, this.filename, b.beginLine, b.beginColumn, e.endLine, e.endColumn);
            }
        }
        throw new Error("Missing return statement in function");
    }

    /**
     * Parses a variable initializer (ie. an expression or an array initializer)
     * 
     * @see koala.dynamicjava.tree.Expression
     */
    final public Expression variableInitializer() throws ParseException {
        Expression exp;
        switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
        case LBRACE:
            exp = arrayInitializer();
            break;
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FALSE:
        case FLOAT:
        case INT:
        case LONG:
        case NEW:
        case NULL:
        case SHORT:
        case SUPER:
        case THIS:
        case TRUE:
        case VOID:
        case INTEGER_LITERAL:
        case LONG_LITERAL:
        case FLOAT_LITERAL:
        case DOUBLE_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case BANG:
        case TILDE:
        case INCREMENT:
        case DECREMENT:
        case PLUS:
        case MINUS:
            exp = expression();
            break;
        default:
            this.jj_la1[41] = this.jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
        {
            if (true) {
                return exp;
            }
        }
        throw new Error("Missing return statement in function");
    }

    // Productions for Blocks And Statements ////////////////////////////////////////////

    /**
     * Parses a block
     * 
     * @see koala.dynamicjava.tree.BlockStatement
     */
    final public BlockStatement block() throws ParseException {
        Token p1;
        Token p2;
        List nodes;
        final List list = new LinkedList();
        p1 = jj_consume_token(LBRACE);
        label_17: while (true) {
            switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
            case BOOLEAN:
            case BREAK:
            case BYTE:
            case CHAR:
            case CLASS:
            case CONTINUE:
            case DO:
            case DOUBLE:
            case FALSE:
            case FINAL:
            case FLOAT:
            case FOR:
            case IF:
            case INT:
            case INTERFACE:
            case LONG:
            case NEW:
            case NULL:
            case RETURN:
            case SHORT:
            case SUPER:
            case SWITCH:
            case SYNCHRONIZED:
            case THIS:
            case THROW:
            case TRUE:
            case TRY:
            case VOID:
            case WHILE:
            case INTEGER_LITERAL:
            case LONG_LITERAL:
            case FLOAT_LITERAL:
            case DOUBLE_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
            case IDENTIFIER:
            case LPAREN:
            case LBRACE:
            case SEMICOLON:
            case INCREMENT:
            case DECREMENT:
                ;
                break;
            default:
                this.jj_la1[42] = this.jj_gen;
                break label_17;
            }
            nodes = blockStatement();
            list.addAll(nodes);
        }
        p2 = jj_consume_token(RBRACE);
        {
            if (true) {
                return new BlockStatement(list, this.filename, p1.beginLine, p1.beginColumn, p2.endLine, p2.endColumn);
            }
        }
        throw new Error("Missing return statement in function");
    }

    /**
     * Parses one block statement.
     * 
     * @return a list of node because one variable declaration can contain multiple declarations.
     * @see koala.dynamicjava.tree.Node
     */
    final public List blockStatement() throws ParseException {
        Node node = null;
        List list = new LinkedList();
        if (jj_2_19(2147483647)) {
            list = localVariableDeclaration();
            jj_consume_token(SEMICOLON);
        } else {
            switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
            case BOOLEAN:
            case BREAK:
            case BYTE:
            case CHAR:
            case CONTINUE:
            case DO:
            case DOUBLE:
            case FALSE:
            case FLOAT:
            case FOR:
            case IF:
            case INT:
            case LONG:
            case NEW:
            case NULL:
            case RETURN:
            case SHORT:
            case SUPER:
            case SWITCH:
            case SYNCHRONIZED:
            case THIS:
            case THROW:
            case TRUE:
            case TRY:
            case VOID:
            case WHILE:
            case INTEGER_LITERAL:
            case LONG_LITERAL:
            case FLOAT_LITERAL:
            case DOUBLE_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
            case IDENTIFIER:
            case LPAREN:
            case LBRACE:
            case SEMICOLON:
            case INCREMENT:
            case DECREMENT:
                node = statement();
                list.add(node);
                break;
            case CLASS:
                node = unmodifiedClassDeclaration(null);
                list.add(node);
                break;
            case INTERFACE:
                node = unmodifiedInterfaceDeclaration(null);
                list.add(node);
                break;
            default:
                this.jj_la1[43] = this.jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
        }
        {
            if (true) {
                return list;
            }
        }
        throw new Error("Missing return statement in function");
    }

    /**
     * Parses one variable declaration
     * 
     * @return a list of node because one variable declaration can contain multiple declarations.
     * @see koala.dynamicjava.tree.VariableDeclaration
     */
    final public List localVariableDeclaration() throws ParseException {
        Token t = null;
        Expression init = null;
        Type typ;
        Token id;
        int dim = 0;
        final List list = new LinkedList();
        switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
        case FINAL:
            t = jj_consume_token(FINAL);
            break;
        default:
            this.jj_la1[44] = this.jj_gen;
            ;
        }
        typ = type();
        id = jj_consume_token(IDENTIFIER);
        label_18: while (true) {
            switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
            case LBRACKET:
                ;
                break;
            default:
                this.jj_la1[45] = this.jj_gen;
                break label_18;
            }
            jj_consume_token(LBRACKET);
            jj_consume_token(RBRACKET);
            dim++;
        }
        switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
        case ASSIGN:
            jj_consume_token(ASSIGN);
            init = variableInitializer();
            break;
        default:
            this.jj_la1[46] = this.jj_gen;
            ;
        }
        list.add(createVariableDeclaration(t, typ, id, init, dim));
        label_19: while (true) {
            switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
            case COMMA:
                ;
                break;
            default:
                this.jj_la1[47] = this.jj_gen;
                break label_19;
            }
            init = null;
            dim = 0;
            jj_consume_token(COMMA);
            id = jj_consume_token(IDENTIFIER);
            label_20: while (true) {
                switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
                case LBRACKET:
                    ;
                    break;
                default:
                    this.jj_la1[48] = this.jj_gen;
                    break label_20;
                }
                jj_consume_token(LBRACKET);
                jj_consume_token(RBRACKET);
                dim++;
            }
            switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
            case ASSIGN:
                jj_consume_token(ASSIGN);
                init = variableInitializer();
                break;
            default:
                this.jj_la1[49] = this.jj_gen;
                ;
            }
            list.add(createVariableDeclaration(t, typ, id, init, dim));
        }
        {
            if (true) {
                return list;
            }
        }
        throw new Error("Missing return statement in function");
    }

    /**
     * Parses one statement
     * 
     * @see koala.dynamicjava.tree.Node
     */
    final public Node statement() throws ParseException {
        Node node = null;
        if (jj_2_20(2)) {
            node = labeledStatement();
        } else {
            switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
            case SEMICOLON:
                node = emptyStatement();
                break;
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FALSE:
            case FLOAT:
            case INT:
            case LONG:
            case NEW:
            case NULL:
            case SHORT:
            case SUPER:
            case THIS:
            case TRUE:
            case VOID:
            case INTEGER_LITERAL:
            case LONG_LITERAL:
            case FLOAT_LITERAL:
            case DOUBLE_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
            case IDENTIFIER:
            case LPAREN:
            case INCREMENT:
            case DECREMENT:
                node = statementExpression();
                jj_consume_token(SEMICOLON);
                break;
            case LBRACE:
                node = block();
                break;
            case IF:
                node = ifStatement();
                break;
            case WHILE:
                node = whileStatement();
                break;
            case DO:
                node = doStatement();
                break;
            case SWITCH:
                node = switchStatement();
                break;
            case FOR:
                node = forStatement();
                break;
            case BREAK:
                node = breakStatement();
                break;
            case CONTINUE:
                node = continueStatement();
                break;
            case RETURN:
                node = returnStatement();
                break;
            case THROW:
                node = throwStatement();
                break;
            case SYNCHRONIZED:
                node = synchronizedStatement();
                break;
            case TRY:
                node = tryStatement();
                break;
            default:
                this.jj_la1[50] = this.jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
        }
        {
            if (true) {
                return node;
            }
        }
        throw new Error("Missing return statement in function");
    }

    /**
     * Parses a labeled statement
     * 
     * @see koala.dynamicjava.tree.ContinueTarget
     * @see koala.dynamicjava.tree.LabeledStatement
     */
    final public Statement labeledStatement() throws ParseException {
        Token id;
        Node node;
        id = jj_consume_token(IDENTIFIER);
        jj_consume_token(COLON);
        node = statement();
        if (node instanceof ContinueTarget) {
            ((ContinueTarget) node).addLabel(id.image);
            {
                if (true) {
                    return (Statement) node;
                }
            }
        } else {
            {
                if (true) {
                    return new LabeledStatement(id.image, node, this.filename, id.beginLine, id.beginColumn, node.getEndLine(), node.getEndColumn());
                }
            }
        }
        throw new Error("Missing return statement in function");
    }

    /**
     * Parses an empty statement
     * 
     * @see koala.dynamicjava.tree.EmptyStatement
     */
    final public EmptyStatement emptyStatement() throws ParseException {
        Token t;
        t = jj_consume_token(SEMICOLON);
        {
            if (true) {
                return new EmptyStatement(this.filename, t.beginLine, t.beginColumn);
            }
        }
        throw new Error("Missing return statement in function");
    }

    /**
     * Parses an if statement
     * 
     * @see koala.dynamicjava.tree.IfThenStatement
     * @see koala.dynamicjava.tree.IfThenElseStatement
     */
    final public Statement ifStatement() throws ParseException {
        Token t;
        Expression exp;
        Node stat1;
        Node stat2 = null;
        t = jj_consume_token(IF);
        jj_consume_token(LPAREN);
        exp = expression();
        jj_consume_token(RPAREN);
        stat1 = statement();
        switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
        case ELSE:
            jj_consume_token(ELSE);
            stat2 = statement();
            break;
        default:
            this.jj_la1[51] = this.jj_gen;
            ;
        }
        if (stat2 == null) {
            {
                if (true) {
                    return new IfThenStatement(exp, stat1, this.filename, t.beginLine, t.beginColumn, stat1.getEndLine(), stat1.getEndColumn());
                }
            }
        } else {
            {
                if (true) {
                    return new IfThenElseStatement(exp, stat1, stat2, this.filename, t.beginLine, t.beginColumn, stat2.getEndLine(), stat2.getEndColumn());
                }
            }
        }
        throw new Error("Missing return statement in function");
    }

    /**
     * Parses a while statement
     * 
     * @see koala.dynamicjava.tree.WhileStatement
     */
    final public WhileStatement whileStatement() throws ParseException {
        Token t;
        Expression exp;
        Node stat;
        t = jj_consume_token(WHILE);
        jj_consume_token(LPAREN);
        exp = expression();
        jj_consume_token(RPAREN);
        stat = statement();
        {
            if (true) {
                return new WhileStatement(exp, stat, this.filename, t.beginLine, t.beginColumn, stat.getEndLine(), stat.getEndColumn());
            }
        }
        throw new Error("Missing return statement in function");
    }

    /**
     * Parses a do statement
     * 
     * @see koala.dynamicjava.tree.DoStatement
     */
    final public DoStatement doStatement() throws ParseException {
        Token t1, t2;
        Expression exp;
        Node stat;
        t1 = jj_consume_token(DO);
        stat = statement();
        jj_consume_token(WHILE);
        jj_consume_token(LPAREN);
        exp = expression();
        jj_consume_token(RPAREN);
        t2 = jj_consume_token(SEMICOLON);
        {
            if (true) {
                return new DoStatement(exp, stat, this.filename, t1.beginLine, t1.beginColumn, t2.endLine, t2.endColumn);
            }
        }
        throw new Error("Missing return statement in function");
    }

    /**
     * Parses a switch statement
     * 
     * @see koala.dynamicjava.tree.SwitchStatement
     */
    final public SwitchStatement switchStatement() throws ParseException {
        Token b, e;
        Expression sel;
        Expression val = null;
        List stat = null;
        final List cases = new LinkedList();
        List list = new LinkedList();
        Token t = null;
        b = jj_consume_token(SWITCH);
        jj_consume_token(LPAREN);
        sel = expression();
        jj_consume_token(RPAREN);
        jj_consume_token(LBRACE);
        label_21: while (true) {
            switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
            case CASE:
            case _DEFAULT:
                ;
                break;
            default:
                this.jj_la1[52] = this.jj_gen;
                break label_21;
            }
            switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
            case CASE:
                jj_consume_token(CASE);
                val = expression();
                break;
            case _DEFAULT:
                t = jj_consume_token(_DEFAULT);
                break;
            default:
                this.jj_la1[53] = this.jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
            jj_consume_token(COLON);
            label_22: while (true) {
                switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
                case BOOLEAN:
                case BREAK:
                case BYTE:
                case CHAR:
                case CLASS:
                case CONTINUE:
                case DO:
                case DOUBLE:
                case FALSE:
                case FINAL:
                case FLOAT:
                case FOR:
                case IF:
                case INT:
                case INTERFACE:
                case LONG:
                case NEW:
                case NULL:
                case RETURN:
                case SHORT:
                case SUPER:
                case SWITCH:
                case SYNCHRONIZED:
                case THIS:
                case THROW:
                case TRUE:
                case TRY:
                case VOID:
                case WHILE:
                case INTEGER_LITERAL:
                case LONG_LITERAL:
                case FLOAT_LITERAL:
                case DOUBLE_LITERAL:
                case CHARACTER_LITERAL:
                case STRING_LITERAL:
                case IDENTIFIER:
                case LPAREN:
                case LBRACE:
                case SEMICOLON:
                case INCREMENT:
                case DECREMENT:
                    ;
                    break;
                default:
                    this.jj_la1[54] = this.jj_gen;
                    break label_22;
                }
                stat = blockStatement();
                list.addAll(stat);
            }
            int bl, bc, el, ec;
            if (t != null) {
                bl = t.beginLine;
                bc = t.beginColumn;
                el = t.endLine;
                ec = t.endColumn;
            } else {
                bl = val.getBeginLine();
                bc = val.getBeginColumn();
                el = val.getEndLine();
                ec = val.getEndColumn();
            }

            if (list.size() != 0) {
                final Node n = (Node) list.get(list.size() - 1);
                el = n.getEndLine();
                ec = n.getEndColumn();
            }

            cases.add(new SwitchBlock(val, list.size() != 0 ? list : null, this.filename, bl, bc, el, ec));
            val = null;
            t = null;
            if (list.size() != 0) {
                list = new LinkedList();
            }
        }
        e = jj_consume_token(RBRACE);
        {
            if (true) {
                return new SwitchStatement(sel, cases, this.filename, b.beginLine, b.beginColumn, e.endLine, e.endColumn);
            }
        }
        throw new Error("Missing return statement in function");
    }

    /**
     * Parses a for statement
     * 
     * @see koala.dynamicjava.tree.ForStatement
     */
    final public ForStatement forStatement() throws ParseException {
        Token t;
        List init = null;
        Expression exp = null;
        List update = null;
        Node stmt;
        t = jj_consume_token(FOR);
        jj_consume_token(LPAREN);
        switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FALSE:
        case FINAL:
        case FLOAT:
        case INT:
        case LONG:
        case NEW:
        case NULL:
        case SHORT:
        case SUPER:
        case THIS:
        case TRUE:
        case VOID:
        case INTEGER_LITERAL:
        case LONG_LITERAL:
        case FLOAT_LITERAL:
        case DOUBLE_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case INCREMENT:
        case DECREMENT:
            init = forInit();
            break;
        default:
            this.jj_la1[55] = this.jj_gen;
            ;
        }
        jj_consume_token(SEMICOLON);
        switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FALSE:
        case FLOAT:
        case INT:
        case LONG:
        case NEW:
        case NULL:
        case SHORT:
        case SUPER:
        case THIS:
        case TRUE:
        case VOID:
        case INTEGER_LITERAL:
        case LONG_LITERAL:
        case FLOAT_LITERAL:
        case DOUBLE_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case BANG:
        case TILDE:
        case INCREMENT:
        case DECREMENT:
        case PLUS:
        case MINUS:
            exp = expression();
            break;
        default:
            this.jj_la1[56] = this.jj_gen;
            ;
        }
        jj_consume_token(SEMICOLON);
        switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FALSE:
        case FLOAT:
        case INT:
        case LONG:
        case NEW:
        case NULL:
        case SHORT:
        case SUPER:
        case THIS:
        case TRUE:
        case VOID:
        case INTEGER_LITERAL:
        case LONG_LITERAL:
        case FLOAT_LITERAL:
        case DOUBLE_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case INCREMENT:
        case DECREMENT:
            update = statementExpressionList();
            break;
        default:
            this.jj_la1[57] = this.jj_gen;
            ;
        }
        jj_consume_token(RPAREN);
        stmt = statement();
        {
            if (true) {
                return new ForStatement(init, exp, update, stmt, this.filename, t.beginLine, t.beginColumn, stmt.getEndLine(), stmt.getEndColumn());
            }
        }
        throw new Error("Missing return statement in function");
    }

    /**
     * Used internally to parse a 'for' statement
     */
    final public List forInit() throws ParseException {
        List list;
        if (jj_2_21(2147483647)) {
            list = localVariableDeclaration();
        } else {
            switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FALSE:
            case FLOAT:
            case INT:
            case LONG:
            case NEW:
            case NULL:
            case SHORT:
            case SUPER:
            case THIS:
            case TRUE:
            case VOID:
            case INTEGER_LITERAL:
            case LONG_LITERAL:
            case FLOAT_LITERAL:
            case DOUBLE_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
            case IDENTIFIER:
            case LPAREN:
            case INCREMENT:
            case DECREMENT:
                list = statementExpressionList();
                break;
            default:
                this.jj_la1[58] = this.jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
        }
        {
            if (true) {
                return list;
            }
        }
        throw new Error("Missing return statement in function");
    }

    /**
     * Parses a comma separated list of expression
     */
    final public List statementExpressionList() throws ParseException {
        final List list = new LinkedList();
        Node node;
        node = statementExpression();
        list.add(node);
        label_23: while (true) {
            switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
            case COMMA:
                ;
                break;
            default:
                this.jj_la1[59] = this.jj_gen;
                break label_23;
            }
            jj_consume_token(COMMA);
            node = statementExpression();
            list.add(node);
        }
        {
            if (true) {
                return list;
            }
        }
        throw new Error("Missing return statement in function");
    }

    /**
     * Parses a break statement
     * 
     * @see koala.dynamicjava.tree.BreakStatement
     */
    final public BreakStatement breakStatement() throws ParseException {
        Token b, e;
        Token id = null;
        b = jj_consume_token(BREAK);
        switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
        case IDENTIFIER:
            id = jj_consume_token(IDENTIFIER);
            break;
        default:
            this.jj_la1[60] = this.jj_gen;
            ;
        }
        e = jj_consume_token(SEMICOLON);
        {
            if (true) {
                return new BreakStatement(id != null ? id.image : null, this.filename, b.beginLine, b.beginColumn, e.endLine, e.endColumn);
            }
        }
        throw new Error("Missing return statement in function");
    }

    /**
     * Parses a continue statement
     * 
     * @see koala.dynamicjava.tree.ContinueStatement
     */
    final public ContinueStatement continueStatement() throws ParseException {
        Token b, e;
        Token id = null;
        b = jj_consume_token(CONTINUE);
        switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
        case IDENTIFIER:
            id = jj_consume_token(IDENTIFIER);
            break;
        default:
            this.jj_la1[61] = this.jj_gen;
            ;
        }
        e = jj_consume_token(SEMICOLON);
        {
            if (true) {
                return new ContinueStatement(id != null ? id.image : null, this.filename, b.beginLine, b.beginColumn, e.endLine, e.endColumn);
            }
        }
        throw new Error("Missing return statement in function");
    }

    /**
     * Parses a return statement
     * 
     * @see koala.dynamicjava.tree.ReturnStatement
     */
    final public ReturnStatement returnStatement() throws ParseException {
        Token b, e;
        Expression exp = null;
        b = jj_consume_token(RETURN);
        switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FALSE:
        case FLOAT:
        case INT:
        case LONG:
        case NEW:
        case NULL:
        case SHORT:
        case SUPER:
        case THIS:
        case TRUE:
        case VOID:
        case INTEGER_LITERAL:
        case LONG_LITERAL:
        case FLOAT_LITERAL:
        case DOUBLE_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case BANG:
        case TILDE:
        case INCREMENT:
        case DECREMENT:
        case PLUS:
        case MINUS:
            exp = expression();
            break;
        default:
            this.jj_la1[62] = this.jj_gen;
            ;
        }
        e = jj_consume_token(SEMICOLON);
        {
            if (true) {
                return new ReturnStatement(exp, this.filename, b.beginLine, b.beginColumn, e.endLine, e.endColumn);
            }
        }
        throw new Error("Missing return statement in function");
    }

    /**
     * Parses a throw statement
     * 
     * @see koala.dynamicjava.tree.ThrowStatement
     */
    final public ThrowStatement throwStatement() throws ParseException {
        Token b, e;
        Expression exp;
        b = jj_consume_token(THROW);
        exp = expression();
        e = jj_consume_token(SEMICOLON);
        {
            if (true) {
                return new ThrowStatement(exp, this.filename, b.beginLine, b.beginColumn, e.endLine, e.endColumn);
            }
        }
        throw new Error("Missing return statement in function");
    }

    /**
     * Parses a synchronized statement
     * 
     * @see koala.dynamicjava.tree.SynchronizedStatement
     */
    final public SynchronizedStatement synchronizedStatement() throws ParseException {
        Token t;
        Expression exp;
        Node stmt;
        t = jj_consume_token(SYNCHRONIZED);
        jj_consume_token(LPAREN);
        exp = expression();
        jj_consume_token(RPAREN);
        stmt = block();
        {
            if (true) {
                return new SynchronizedStatement(exp, stmt, this.filename, t.beginLine, t.beginColumn, stmt.getEndLine(), stmt.getEndColumn());
            }
        }
        throw new Error("Missing return statement in function");
    }

    /**
     * Parses a try statement
     * 
     * @see koala.dynamicjava.tree.TryStatement
     */
    final public TryStatement tryStatement() throws ParseException {
        Token t, u;
        Node tryBlock;
        Node catchBlock;
        final List catches = new LinkedList();
        FormalParameter formal;
        Node finallyBlock = null;
        int el = 0, ec = 0;
        t = jj_consume_token(TRY);
        tryBlock = block();
        label_24: while (true) {
            switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
            case CATCH:
                ;
                break;
            default:
                this.jj_la1[63] = this.jj_gen;
                break label_24;
            }
            u = jj_consume_token(CATCH);
            jj_consume_token(LPAREN);
            formal = formalParameter();
            jj_consume_token(RPAREN);
            catchBlock = block();
            el = catchBlock.getEndLine();
            ec = catchBlock.getEndColumn();
            catches.add(new CatchStatement(formal, catchBlock, this.filename, u.beginLine, u.beginColumn, el, ec));
        }
        switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
        case FINALLY:
            jj_consume_token(FINALLY);
            finallyBlock = block();
            el = finallyBlock.getEndLine();
            ec = finallyBlock.getEndColumn();
            break;
        default:
            this.jj_la1[64] = this.jj_gen;
            ;
        }
        if (finallyBlock == null && catches.size() == 0) {
            {
                if (true) {
                    throw new ParseError(this.reader.getMessage("try.without.catch", null), this.filename, t.beginLine, t.beginColumn);
                }
            }
        }
        {
            if (true) {
                return new TryStatement(tryBlock, catches, finallyBlock, this.filename, t.beginLine, t.beginColumn, el, ec);
            }
        }
        throw new Error("Missing return statement in function");
    }

    /**
     * Parses one statement expression
     * 
     * @see koala.dynamicjava.tree.Expression
     */
    final public Node statementExpression() throws ParseException {
        Expression exp;
        final Expression exp2;
        final Expression exp3 = null;
        Token t;
        switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
        case INCREMENT:
            exp = preIncrementExpression();
            break;
        case DECREMENT:
            exp = preDecrementExpression();
            break;
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FALSE:
        case FLOAT:
        case INT:
        case LONG:
        case NEW:
        case NULL:
        case SHORT:
        case SUPER:
        case THIS:
        case TRUE:
        case VOID:
        case INTEGER_LITERAL:
        case LONG_LITERAL:
        case FLOAT_LITERAL:
        case DOUBLE_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
            exp = primaryExpression();
            switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
            case ASSIGN:
            case INCREMENT:
            case DECREMENT:
            case PLUS_ASSIGN:
            case MINUS_ASSIGN:
            case STAR_ASSIGN:
            case SLASH_ASSIGN:
            case AND_ASSIGN:
            case OR_ASSIGN:
            case XOR_ASSIGN:
            case REMAINDER_ASSIGN:
            case LEFT_SHIFT_ASSIGN:
            case RIGHT_SIGNED_SHIFT_ASSIGN:
            case RIGHT_UNSIGNED_SHIFTASSIGN:
                switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
                case INCREMENT:
                    t = jj_consume_token(INCREMENT);
                    exp = new PostIncrement(exp, this.filename, exp.getBeginLine(), exp.getBeginColumn(), t.endLine, t.endColumn);
                    break;
                case DECREMENT:
                    t = jj_consume_token(DECREMENT);
                    exp = new PostDecrement(exp, this.filename, exp.getBeginLine(), exp.getBeginColumn(), t.endLine, t.endColumn);
                    break;
                case ASSIGN:
                case PLUS_ASSIGN:
                case MINUS_ASSIGN:
                case STAR_ASSIGN:
                case SLASH_ASSIGN:
                case AND_ASSIGN:
                case OR_ASSIGN:
                case XOR_ASSIGN:
                case REMAINDER_ASSIGN:
                case LEFT_SHIFT_ASSIGN:
                case RIGHT_SIGNED_SHIFT_ASSIGN:
                case RIGHT_UNSIGNED_SHIFTASSIGN:
                    exp = expressionSuffix(exp);
                    break;
                default:
                    this.jj_la1[65] = this.jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
                }
                break;
            default:
                this.jj_la1[66] = this.jj_gen;
                ;
            }
            break;
        default:
            this.jj_la1[67] = this.jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
        if (exp instanceof ExpressionStatement) {
            {
                if (true) {
                    return exp;
                }
            }
        } else {
            {
                if (true) {
                    throw new ParseError(this.reader.getMessage("expression.statement", null), this.filename, exp.getBeginLine(), exp.getBeginColumn());
                }
            }
        }
        throw new Error("Missing return statement in function");
    }

    // Productions for Statements /////////////////////////////////////////////////////////

    /**
     * Parses an expression
     * 
     * @see koala.dynamicjava.tree.Expression
     */
    final public Expression expression() throws ParseException {
        Expression exp;
        exp = conditionalExpression();
        switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
        case ASSIGN:
        case PLUS_ASSIGN:
        case MINUS_ASSIGN:
        case STAR_ASSIGN:
        case SLASH_ASSIGN:
        case AND_ASSIGN:
        case OR_ASSIGN:
        case XOR_ASSIGN:
        case REMAINDER_ASSIGN:
        case LEFT_SHIFT_ASSIGN:
        case RIGHT_SIGNED_SHIFT_ASSIGN:
        case RIGHT_UNSIGNED_SHIFTASSIGN:
            exp = expressionSuffix(exp);
            break;
        default:
            this.jj_la1[68] = this.jj_gen;
            ;
        }
        {
            if (true) {
                return exp;
            }
        }
        throw new Error("Missing return statement in function");
    }

    /**
     * Used internally to parse an expression
     */
    final public Expression expressionSuffix(final Expression pre) throws ParseException {
        Expression exp2;
        Expression exp;
        switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
        case ASSIGN:
            jj_consume_token(ASSIGN);
            exp2 = expression();
            exp = new SimpleAssignExpression(pre, exp2, this.filename, pre.getBeginLine(), pre.getBeginColumn(), exp2.getEndLine(), exp2.getEndColumn());
            break;
        case STAR_ASSIGN:
            jj_consume_token(STAR_ASSIGN);
            exp2 = expression();
            exp = new MultiplyAssignExpression(pre, exp2, this.filename, pre.getBeginLine(), pre.getBeginColumn(), exp2.getEndLine(), exp2.getEndColumn());
            break;
        case SLASH_ASSIGN:
            jj_consume_token(SLASH_ASSIGN);
            exp2 = expression();
            exp = new DivideAssignExpression(pre, exp2, this.filename, pre.getBeginLine(), pre.getBeginColumn(), exp2.getEndLine(), exp2.getEndColumn());
            break;
        case REMAINDER_ASSIGN:
            jj_consume_token(REMAINDER_ASSIGN);
            exp2 = expression();
            exp = new RemainderAssignExpression(pre, exp2, this.filename, pre.getBeginLine(), pre.getBeginColumn(), exp2.getEndLine(), exp2.getEndColumn());
            break;
        case PLUS_ASSIGN:
            jj_consume_token(PLUS_ASSIGN);
            exp2 = expression();
            exp = new AddAssignExpression(pre, exp2, this.filename, pre.getBeginLine(), pre.getBeginColumn(), exp2.getEndLine(), exp2.getEndColumn());
            break;
        case MINUS_ASSIGN:
            jj_consume_token(MINUS_ASSIGN);
            exp2 = expression();
            exp = new SubtractAssignExpression(pre, exp2, this.filename, pre.getBeginLine(), pre.getBeginColumn(), exp2.getEndLine(), exp2.getEndColumn());
            break;
        case LEFT_SHIFT_ASSIGN:
            jj_consume_token(LEFT_SHIFT_ASSIGN);
            exp2 = expression();
            exp = new ShiftLeftAssignExpression(pre, exp2, this.filename, pre.getBeginLine(), pre.getBeginColumn(), exp2.getEndLine(), exp2.getEndColumn());
            break;
        case RIGHT_SIGNED_SHIFT_ASSIGN:
            jj_consume_token(RIGHT_SIGNED_SHIFT_ASSIGN);
            exp2 = expression();
            exp = new ShiftRightAssignExpression(pre, exp2, this.filename, pre.getBeginLine(), pre.getBeginColumn(), exp2.getEndLine(), exp2.getEndColumn());
            break;
        case RIGHT_UNSIGNED_SHIFTASSIGN:
            jj_consume_token(RIGHT_UNSIGNED_SHIFTASSIGN);
            exp2 = expression();
            exp = new UnsignedShiftRightAssignExpression(pre, exp2, this.filename, pre.getBeginLine(), pre.getBeginColumn(), exp2.getEndLine(), exp2.getEndColumn());
            break;
        case AND_ASSIGN:
            jj_consume_token(AND_ASSIGN);
            exp2 = expression();
            exp = new BitAndAssignExpression(pre, exp2, this.filename, pre.getBeginLine(), pre.getBeginColumn(), exp2.getEndLine(), exp2.getEndColumn());
            break;
        case XOR_ASSIGN:
            jj_consume_token(XOR_ASSIGN);
            exp2 = expression();
            exp = new ExclusiveOrAssignExpression(pre, exp2, this.filename, pre.getBeginLine(), pre.getBeginColumn(), exp2.getEndLine(), exp2.getEndColumn());
            break;
        case OR_ASSIGN:
            jj_consume_token(OR_ASSIGN);
            exp2 = expression();
            exp = new BitOrAssignExpression(pre, exp2, this.filename, pre.getBeginLine(), pre.getBeginColumn(), exp2.getEndLine(), exp2.getEndColumn());
            break;
        default:
            this.jj_la1[69] = this.jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
        if (!(pre instanceof LeftHandSide)) {
            {
                if (true) {
                    throw new ParseError(this.reader.getMessage("left.expression.in.assignment", null), this.filename, pre.getBeginLine(), pre.getBeginColumn());
                }
            }
        }
        {
            if (true) {
                return exp;
            }
        }
        throw new Error("Missing return statement in function");
    }

    /**
     * Used internally to parse an expression
     */
    final public Expression conditionalExpression() throws ParseException {
        Expression exp;
        Expression exp2;
        Expression exp3;
        exp = conditionalOrExpression();
        switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
        case HOOK:
            jj_consume_token(HOOK);
            exp2 = expression();
            jj_consume_token(COLON);
            exp3 = conditionalExpression();
            exp = new ConditionalExpression(exp, exp2, exp3, this.filename, exp.getBeginLine(), exp.getBeginColumn(), exp3.getEndLine(), exp3.getEndColumn());
            break;
        default:
            this.jj_la1[70] = this.jj_gen;
            ;
        }
        {
            if (true) {
                return exp;
            }
        }
        throw new Error("Missing return statement in function");
    }

    /**
     * Used internally to parse an expression
     */
    final public Expression conditionalOrExpression() throws ParseException {
        Expression exp;
        Expression exp2;
        exp = conditionalAndExpression();
        label_25: while (true) {
            switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
            case CONDITIONAL_OR:
                ;
                break;
            default:
                this.jj_la1[71] = this.jj_gen;
                break label_25;
            }
            jj_consume_token(CONDITIONAL_OR);
            exp2 = conditionalAndExpression();
            exp = new OrExpression(exp, exp2, this.filename, exp.getBeginLine(), exp.getBeginColumn(), exp2.getEndLine(), exp2.getEndColumn());
        }
        {
            if (true) {
                return exp;
            }
        }
        throw new Error("Missing return statement in function");
    }

    /**
     * Used internally to parse an expression
     */
    final public Expression conditionalAndExpression() throws ParseException {
        Expression exp;
        Expression exp2;
        exp = inclusiveOrExpression();
        label_26: while (true) {
            switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
            case CONDITIONAL_AND:
                ;
                break;
            default:
                this.jj_la1[72] = this.jj_gen;
                break label_26;
            }
            jj_consume_token(CONDITIONAL_AND);
            exp2 = inclusiveOrExpression();
            exp = new AndExpression(exp, exp2, this.filename, exp.getBeginLine(), exp.getBeginColumn(), exp2.getEndLine(), exp2.getEndColumn());
        }
        {
            if (true) {
                return exp;
            }
        }
        throw new Error("Missing return statement in function");
    }

    /**
     * Used internally to parse an expression
     */
    final public Expression inclusiveOrExpression() throws ParseException {
        Expression exp;
        Expression exp2;
        exp = exclusiveOrExpression();
        label_27: while (true) {
            switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
            case BITWISE_OR:
                ;
                break;
            default:
                this.jj_la1[73] = this.jj_gen;
                break label_27;
            }
            jj_consume_token(BITWISE_OR);
            exp2 = exclusiveOrExpression();
            exp = new BitOrExpression(exp, exp2, this.filename, exp.getBeginLine(), exp.getBeginColumn(), exp2.getEndLine(), exp2.getEndColumn());
        }
        {
            if (true) {
                return exp;
            }
        }
        throw new Error("Missing return statement in function");
    }

    /**
     * Used internally to parse an expression
     */
    final public Expression exclusiveOrExpression() throws ParseException {
        Expression exp;
        Expression exp2;
        exp = andExpression();
        label_28: while (true) {
            switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
            case XOR:
                ;
                break;
            default:
                this.jj_la1[74] = this.jj_gen;
                break label_28;
            }
            jj_consume_token(XOR);
            exp2 = andExpression();
            exp = new ExclusiveOrExpression(exp, exp2, this.filename, exp.getBeginLine(), exp.getBeginColumn(), exp2.getEndLine(), exp2.getEndColumn());
        }
        {
            if (true) {
                return exp;
            }
        }
        throw new Error("Missing return statement in function");
    }

    /**
     * Used internally to parse an expression
     */
    final public Expression andExpression() throws ParseException {
        Expression exp;
        Expression exp2;
        exp = equalityExpression();
        label_29: while (true) {
            switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
            case BITWISE_AND:
                ;
                break;
            default:
                this.jj_la1[75] = this.jj_gen;
                break label_29;
            }
            jj_consume_token(BITWISE_AND);
            exp2 = equalityExpression();
            exp = new BitAndExpression(exp, exp2, this.filename, exp.getBeginLine(), exp.getBeginColumn(), exp2.getEndLine(), exp2.getEndColumn());
        }
        {
            if (true) {
                return exp;
            }
        }
        throw new Error("Missing return statement in function");
    }

    /**
     * Used internally to parse an expression
     */
    final public Expression equalityExpression() throws ParseException {
        Expression exp;
        Expression exp2;
        exp = instanceOfExpression();
        label_30: while (true) {
            switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
            case EQUAL:
            case NOT_EQUAL:
                ;
                break;
            default:
                this.jj_la1[76] = this.jj_gen;
                break label_30;
            }
            switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
            case EQUAL:
                jj_consume_token(EQUAL);
                exp2 = instanceOfExpression();
                exp = new EqualExpression(exp, exp2, this.filename, exp.getBeginLine(), exp.getBeginColumn(), exp2.getEndLine(), exp2.getEndColumn());
                break;
            case NOT_EQUAL:
                jj_consume_token(NOT_EQUAL);
                exp2 = instanceOfExpression();
                exp = new NotEqualExpression(exp, exp2, this.filename, exp.getBeginLine(), exp.getBeginColumn(), exp2.getEndLine(), exp2.getEndColumn());
                break;
            default:
                this.jj_la1[77] = this.jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
        }
        {
            if (true) {
                return exp;
            }
        }
        throw new Error("Missing return statement in function");
    }

    /**
     * Used internally to parse an expression
     */
    final public Expression instanceOfExpression() throws ParseException {
        Expression exp;
        Type typ = null;
        exp = relationalExpression();
        switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
        case INSTANCEOF:
            jj_consume_token(INSTANCEOF);
            typ = type();
            break;
        default:
            this.jj_la1[78] = this.jj_gen;
            ;
        }
        if (typ != null) {
            {
                if (true) {
                    return new InstanceOfExpression(exp, typ, this.filename, exp.getBeginLine(), exp.getBeginColumn(), typ.getEndLine(), typ.getEndColumn());
                }
            }
        } else {
            {
                if (true) {
                    return exp;
                }
            }
        }
        throw new Error("Missing return statement in function");
    }

    /**
     * Used internally to parse an expression
     */
    final public Expression relationalExpression() throws ParseException {
        Expression exp;
        Expression exp2;
        exp = shiftExpression();
        label_31: while (true) {
            switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
            case GREATER_THAN:
            case LESS:
            case LESS_OR_EQUAL:
            case GREATER_OR_EQUAL:
                ;
                break;
            default:
                this.jj_la1[79] = this.jj_gen;
                break label_31;
            }
            switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
            case LESS:
                jj_consume_token(LESS);
                exp2 = shiftExpression();
                exp = new LessExpression(exp, exp2, this.filename, exp.getBeginLine(), exp.getBeginColumn(), exp2.getEndLine(), exp2.getEndColumn());
                break;
            case GREATER_THAN:
                jj_consume_token(GREATER_THAN);
                exp2 = shiftExpression();
                exp = new GreaterExpression(exp, exp2, this.filename, exp.getBeginLine(), exp.getBeginColumn(), exp2.getEndLine(), exp2.getEndColumn());
                break;
            case LESS_OR_EQUAL:
                jj_consume_token(LESS_OR_EQUAL);
                exp2 = shiftExpression();
                exp = new LessOrEqualExpression(exp, exp2, this.filename, exp.getBeginLine(), exp.getBeginColumn(), exp2.getEndLine(), exp2.getEndColumn());
                break;
            case GREATER_OR_EQUAL:
                jj_consume_token(GREATER_OR_EQUAL);
                exp2 = shiftExpression();
                exp = new GreaterOrEqualExpression(exp, exp2, this.filename, exp.getBeginLine(), exp.getBeginColumn(), exp2.getEndLine(), exp2.getEndColumn());
                break;
            default:
                this.jj_la1[80] = this.jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
        }
        {
            if (true) {
                return exp;
            }
        }
        throw new Error("Missing return statement in function");
    }

    /**
     * Used internally to parse an expression
     */
    final public Expression shiftExpression() throws ParseException {
        Expression exp;
        Expression exp2;
        exp = additiveExpression();
        label_32: while (true) {
            switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
            case LEFT_SHIFT:
            case RIGHT_SIGNED_SHIFT:
            case RIGHT_UNSIGNED_SHIFT:
                ;
                break;
            default:
                this.jj_la1[81] = this.jj_gen;
                break label_32;
            }
            switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
            case LEFT_SHIFT:
                jj_consume_token(LEFT_SHIFT);
                exp2 = additiveExpression();
                exp = new ShiftLeftExpression(exp, exp2, this.filename, exp.getBeginLine(), exp.getBeginColumn(), exp2.getEndLine(), exp2.getEndColumn());
                break;
            case RIGHT_SIGNED_SHIFT:
                jj_consume_token(RIGHT_SIGNED_SHIFT);
                exp2 = additiveExpression();
                exp = new ShiftRightExpression(exp, exp2, this.filename, exp.getBeginLine(), exp.getBeginColumn(), exp2.getEndLine(), exp2.getEndColumn());
                break;
            case RIGHT_UNSIGNED_SHIFT:
                jj_consume_token(RIGHT_UNSIGNED_SHIFT);
                exp2 = additiveExpression();
                exp = new UnsignedShiftRightExpression(exp, exp2, this.filename, exp.getBeginLine(), exp.getBeginColumn(), exp2.getEndLine(), exp2.getEndColumn());
                break;
            default:
                this.jj_la1[82] = this.jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
        }
        {
            if (true) {
                return exp;
            }
        }
        throw new Error("Missing return statement in function");
    }

    /**
     * Used internally to parse an expression
     */
    final public Expression additiveExpression() throws ParseException {
        Expression exp;
        Expression exp2;
        exp = multiplicativeExpression();
        label_33: while (true) {
            switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
            case PLUS:
            case MINUS:
                ;
                break;
            default:
                this.jj_la1[83] = this.jj_gen;
                break label_33;
            }
            switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
            case PLUS:
                jj_consume_token(PLUS);
                exp2 = multiplicativeExpression();
                exp = new AddExpression(exp, exp2, this.filename, exp.getBeginLine(), exp.getBeginColumn(), exp2.getEndLine(), exp2.getEndColumn());
                break;
            case MINUS:
                jj_consume_token(MINUS);
                exp2 = multiplicativeExpression();
                exp = new SubtractExpression(exp, exp2, this.filename, exp.getBeginLine(), exp.getBeginColumn(), exp2.getEndLine(), exp2.getEndColumn());
                break;
            default:
                this.jj_la1[84] = this.jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
        }
        {
            if (true) {
                return exp;
            }
        }
        throw new Error("Missing return statement in function");
    }

    /**
     * Used internally to parse an expression
     */
    final public Expression multiplicativeExpression() throws ParseException {
        Expression exp;
        Expression exp2;
        exp = unaryExpression();
        label_34: while (true) {
            switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
            case STAR:
            case SLASH:
            case REMAINDER:
                ;
                break;
            default:
                this.jj_la1[85] = this.jj_gen;
                break label_34;
            }
            switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
            case STAR:
                jj_consume_token(STAR);
                exp2 = unaryExpression();
                exp = new MultiplyExpression(exp, exp2, this.filename, exp.getBeginLine(), exp.getBeginColumn(), exp2.getEndLine(), exp2.getEndColumn());
                break;
            case SLASH:
                jj_consume_token(SLASH);
                exp2 = unaryExpression();
                exp = new DivideExpression(exp, exp2, this.filename, exp.getBeginLine(), exp.getBeginColumn(), exp2.getEndLine(), exp2.getEndColumn());
                break;
            case REMAINDER:
                jj_consume_token(REMAINDER);
                exp2 = unaryExpression();
                exp = new RemainderExpression(exp, exp2, this.filename, exp.getBeginLine(), exp.getBeginColumn(), exp2.getEndLine(), exp2.getEndColumn());
                break;
            default:
                this.jj_la1[86] = this.jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
        }
        {
            if (true) {
                return exp;
            }
        }
        throw new Error("Missing return statement in function");
    }

    /**
     * Used internally to parse an expression
     */
    final public Expression unaryExpression() throws ParseException {
        Expression exp = null;
        Token t;
        switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
        case PLUS:
            t = jj_consume_token(PLUS);
            exp = unaryExpression();
            {
                if (true) {
                    return new PlusExpression(exp, this.filename, t.beginLine, t.beginColumn, exp.getEndLine(), exp.getEndColumn());
                }
            }
            break;
        case MINUS:
            t = jj_consume_token(MINUS);
            exp = unaryExpression();
            {
                if (true) {
                    return new MinusExpression(exp, this.filename, t.beginLine, t.beginColumn, exp.getEndLine(), exp.getEndColumn());
                }
            }
            break;
        case INCREMENT:
            exp = preIncrementExpression();
            break;
        case DECREMENT:
            exp = preDecrementExpression();
            break;
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FALSE:
        case FLOAT:
        case INT:
        case LONG:
        case NEW:
        case NULL:
        case SHORT:
        case SUPER:
        case THIS:
        case TRUE:
        case VOID:
        case INTEGER_LITERAL:
        case LONG_LITERAL:
        case FLOAT_LITERAL:
        case DOUBLE_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case BANG:
        case TILDE:
            exp = unaryExpressionNotPlusMinus();
            break;
        default:
            this.jj_la1[87] = this.jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
        {
            if (true) {
                return exp;
            }
        }
        throw new Error("Missing return statement in function");
    }

    /**
     * Used internally to parse an expression
     */
    final public Expression unaryExpressionNotPlusMinus() throws ParseException {
        Expression exp;
        Token t;
        switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
        case TILDE:
            t = jj_consume_token(TILDE);
            exp = unaryExpression();
            {
                if (true) {
                    return new ComplementExpression(exp, this.filename, t.beginLine, t.beginColumn, exp.getEndLine(), exp.getEndColumn());
                }
            }
            break;
        case BANG:
            t = jj_consume_token(BANG);
            exp = unaryExpression();
            {
                if (true) {
                    return new NotExpression(exp, this.filename, t.beginLine, t.beginColumn, exp.getEndLine(), exp.getEndColumn());
                }
            }
            break;
        default:
            this.jj_la1[88] = this.jj_gen;
            if (jj_2_22(2147483647)) {
                exp = castExpression();
            } else {
                switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
                case BOOLEAN:
                case BYTE:
                case CHAR:
                case DOUBLE:
                case FALSE:
                case FLOAT:
                case INT:
                case LONG:
                case NEW:
                case NULL:
                case SHORT:
                case SUPER:
                case THIS:
                case TRUE:
                case VOID:
                case INTEGER_LITERAL:
                case LONG_LITERAL:
                case FLOAT_LITERAL:
                case DOUBLE_LITERAL:
                case CHARACTER_LITERAL:
                case STRING_LITERAL:
                case IDENTIFIER:
                case LPAREN:
                    exp = postfixExpression();
                    break;
                default:
                    this.jj_la1[89] = this.jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
                }
            }
        }
        {
            if (true) {
                return exp;
            }
        }
        throw new Error("Missing return statement in function");
    }

    /**
     * Used internally to parse an expression
     */
    final public Expression castExpression() throws ParseException {
        Type typ;
        Token t;
        Expression exp;
        if (jj_2_23(2147483647)) {
            t = jj_consume_token(LPAREN);
            typ = type();
            jj_consume_token(RPAREN);
            exp = unaryExpression();
        } else {
            switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
            case LPAREN:
                t = jj_consume_token(LPAREN);
                typ = type();
                jj_consume_token(RPAREN);
                exp = unaryExpressionNotPlusMinus();
                break;
            default:
                this.jj_la1[90] = this.jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
        }
        {
            if (true) {
                return new CastExpression(typ, exp, this.filename, t.beginLine, t.beginColumn, exp.getEndLine(), exp.getEndColumn());
            }
        }
        throw new Error("Missing return statement in function");
    }

    /**
     * Used internally to parse an expression
     */
    final public Expression preIncrementExpression() throws ParseException {
        Expression pe;
        Token t;
        t = jj_consume_token(INCREMENT);
        pe = primaryExpression();
        {
            if (true) {
                return new PreIncrement(pe, this.filename, pe.getBeginLine(), pe.getBeginColumn(), t.endLine, t.endColumn);
            }
        }
        throw new Error("Missing return statement in function");
    }

    /**
     * Used internally to parse an expression
     */
    final public Expression preDecrementExpression() throws ParseException {
        Expression pe;
        Token t;
        t = jj_consume_token(DECREMENT);
        pe = primaryExpression();
        {
            if (true) {
                return new PreDecrement(pe, this.filename, pe.getBeginLine(), pe.getBeginColumn(), t.endLine, t.endColumn);
            }
        }
        throw new Error("Missing return statement in function");
    }

    /**
     * Used internally to parse an expression
     */
    final public Expression postfixExpression() throws ParseException {
        Expression pe;
        Token t;
        pe = primaryExpression();
        switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
        case INCREMENT:
        case DECREMENT:
            switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
            case INCREMENT:
                t = jj_consume_token(INCREMENT);
                {
                    if (true) {
                        return new PostIncrement(pe, this.filename, pe.getBeginLine(), pe.getBeginColumn(), t.endLine, t.endColumn);
                    }
                }
                break;
            case DECREMENT:
                t = jj_consume_token(DECREMENT);
                {
                    if (true) {
                        return new PostDecrement(pe, this.filename, pe.getBeginLine(), pe.getBeginColumn(), t.endLine, t.endColumn);
                    }
                }
                break;
            default:
                this.jj_la1[91] = this.jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
            break;
        default:
            this.jj_la1[92] = this.jj_gen;
            ;
        }
        {
            if (true) {
                return pe;
            }
        }
        throw new Error("Missing return statement in function");
    }

    /**
     * Used internally to parse an expression
     */
    final public Expression primaryExpression() throws ParseException {
        Expression pp;
        ExpressionSuffix es;
        final List list = new LinkedList();
        pp = primaryPrefix();
        label_35: while (true) {
            if (jj_2_24(2)) {
                ;
            } else {
                break label_35;
            }
            es = primarySuffix();
            // Build the list of suffixes in reverse order
            list.add(0, es);
        }
        {
            if (true) {
                return createPrimaryExpression(pp, list);
            }
        }
        throw new Error("Missing return statement in function");
    }

    /**
     * Used internally to parse an expression
     */
    final public Expression primaryPrefix() throws ParseException {
        Expression exp;
        switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
        case FALSE:
        case NULL:
        case TRUE:
        case INTEGER_LITERAL:
        case LONG_LITERAL:
        case FLOAT_LITERAL:
        case DOUBLE_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
            exp = literal();
            break;
        case THIS:
            exp = thisExpression();
            break;
        case SUPER:
            exp = superExpression();
            break;
        case NEW:
            exp = allocationExpression();
            break;
        case LPAREN:
            jj_consume_token(LPAREN);
            exp = expression();
            jj_consume_token(RPAREN);
            break;
        default:
            this.jj_la1[93] = this.jj_gen;
            if (jj_2_25(2147483647)) {
                exp = classExpression();
            } else {
                switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
                case IDENTIFIER:
                    exp = qualifiedName();
                    break;
                default:
                    this.jj_la1[94] = this.jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
                }
            }
        }
        {
            if (true) {
                return exp;
            }
        }
        throw new Error("Missing return statement in function");
    }

    /**
     * Used internally to parse an expression
     */
    final public ExpressionSuffix primarySuffix() throws ParseException {
        ExpressionSuffix es;
        if (jj_2_26(2)) {
            es = dotThis();
        } else if (jj_2_27(2)) {
            es = dotAllocationExpression();
        } else {
            switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
            case LBRACKET:
                es = arrayReference();
                break;
            case DOT:
                es = dotIdentifier();
                break;
            case LPAREN:
                es = arguments();
                break;
            default:
                this.jj_la1[95] = this.jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
        }
        {
            if (true) {
                return es;
            }
        }
        throw new Error("Missing return statement in function");
    }

    /**
     * Used internally to parse an expression
     */
    final public ExpressionSuffix dotThis() throws ParseException {
        Token t;
        jj_consume_token(DOT);
        t = jj_consume_token(THIS);
        {
            if (true) {
                return new DotThisSuffix(t.endLine, t.endColumn);
            }
        }
        throw new Error("Missing return statement in function");
    }

    /**
     * Used internally to parse an expression
     */
    final public ExpressionSuffix dotAllocationExpression() throws ParseException {
        Allocation a;
        jj_consume_token(DOT);
        a = simpleAllocationExpression();
        {
            if (true) {
                return new DotAllocationSuffix(a);
            }
        }
        throw new Error("Missing return statement in function");
    }

    /**
     * Used internally to parse an expression
     */
    final public Allocation simpleAllocationExpression() throws ParseException {
        Token t;
        List ls;
        ArgumentsSuffix as;
        ClassBody cb = null;
        t = jj_consume_token(NEW);
        ls = name();
        as = arguments();
        switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
        case LBRACE:
            cb = classBody();
            break;
        default:
            this.jj_la1[96] = this.jj_gen;
            ;
        }
        final IdentifierToken f = (IdentifierToken) ls.get(0);
        final IdentifierToken l = (IdentifierToken) ls.get(ls.size() - 1);
        if (cb == null) {
            {
                if (true) {
                    return new SimpleAllocation(new ReferenceType(ls, this.filename, f.beginLine(), f.beginColumn(), l.endLine(), l.endColumn()), as.arguments, this.filename, t.beginLine,
                            t.beginColumn, as.endLine, as.endColumn);
                }
            }
        } else {
            {
                if (true) {
                    return new ClassAllocation(new ReferenceType(ls, this.filename, f.beginLine(), f.beginColumn(), l.endLine(), l.endColumn()), as.arguments, cb.list, this.filename, t.beginLine,
                            t.beginColumn, cb.endLine, cb.endColumn);
                }
            }
        }
        throw new Error("Missing return statement in function");
    }

    /**
     * Used internally to parse an expression
     */
    final public ExpressionSuffix dotIdentifier() throws ParseException {
        Token id;
        jj_consume_token(DOT);
        id = jj_consume_token(IDENTIFIER);
        {
            if (true) {
                return new DotIdentifierSuffix(id);
            }
        }
        throw new Error("Missing return statement in function");
    }

    /**
     * Used internally to parse an expression
     */
    final public ExpressionSuffix arrayReference() throws ParseException {
        Expression exp;
        Token t;
        jj_consume_token(LBRACKET);
        exp = expression();
        t = jj_consume_token(RBRACKET);
        {
            if (true) {
                return new ArrayReferenceSuffix(exp, t.endLine, t.endColumn);
            }
        }
        throw new Error("Missing return statement in function");
    }

    /**
     * Used internally to parse an expression
     */
    final public ArgumentsSuffix arguments() throws ParseException {
        List list = null;
        Token t;
        jj_consume_token(LPAREN);
        switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FALSE:
        case FLOAT:
        case INT:
        case LONG:
        case NEW:
        case NULL:
        case SHORT:
        case SUPER:
        case THIS:
        case TRUE:
        case VOID:
        case INTEGER_LITERAL:
        case LONG_LITERAL:
        case FLOAT_LITERAL:
        case DOUBLE_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case BANG:
        case TILDE:
        case INCREMENT:
        case DECREMENT:
        case PLUS:
        case MINUS:
            list = argumentList();
            break;
        default:
            this.jj_la1[97] = this.jj_gen;
            ;
        }
        t = jj_consume_token(RPAREN);
        {
            if (true) {
                return new ArgumentsSuffix(list, t.endLine, t.endColumn);
            }
        }
        throw new Error("Missing return statement in function");
    }

    /**
     * Used internally to parse an expression
     */
    final public List argumentList() throws ParseException {
        final List list = new LinkedList();
        Expression exp;
        exp = expression();
        list.add(exp);
        label_36: while (true) {
            switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
            case COMMA:
                ;
                break;
            default:
                this.jj_la1[98] = this.jj_gen;
                break label_36;
            }
            jj_consume_token(COMMA);
            exp = expression();
            list.add(exp);
        }
        {
            if (true) {
                return list;
            }
        }
        throw new Error("Missing return statement in function");
    }

    /**
     * Used internally to parse an expression
     */
    final public Expression literal() throws ParseException {
        Token t;
        switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
        case INTEGER_LITERAL:
            t = jj_consume_token(INTEGER_LITERAL);
            {
                if (true) {
                    return new IntegerLiteral(t.image, this.filename, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
                }
            }
            break;
        case LONG_LITERAL:
            t = jj_consume_token(LONG_LITERAL);
            {
                if (true) {
                    return new LongLiteral(t.image, this.filename, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
                }
            }
            break;
        case FLOAT_LITERAL:
            t = jj_consume_token(FLOAT_LITERAL);
            {
                if (true) {
                    return new FloatLiteral(t.image, this.filename, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
                }
            }
            break;
        case DOUBLE_LITERAL:
            t = jj_consume_token(DOUBLE_LITERAL);
            {
                if (true) {
                    return new DoubleLiteral(t.image, this.filename, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
                }
            }
            break;
        case CHARACTER_LITERAL:
            t = jj_consume_token(CHARACTER_LITERAL);
            {
                if (true) {
                    return new CharacterLiteral(t.image, this.filename, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
                }
            }
            break;
        case STRING_LITERAL:
            t = jj_consume_token(STRING_LITERAL);
            {
                if (true) {
                    return new StringLiteral(t.image, this.filename, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
                }
            }
            break;
        case TRUE:
            t = jj_consume_token(TRUE);
            {
                if (true) {
                    return new BooleanLiteral(true, this.filename, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
                }
            }
            break;
        case FALSE:
            t = jj_consume_token(FALSE);
            {
                if (true) {
                    return new BooleanLiteral(false, this.filename, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
                }
            }
            break;
        case NULL:
            t = jj_consume_token(NULL);
            {
                if (true) {
                    return new NullLiteral(this.filename, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
                }
            }
            break;
        default:
            this.jj_la1[99] = this.jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
        throw new Error("Missing return statement in function");
    }

    /**
     * Used internally to parse an expression
     */
    final public Expression thisExpression() throws ParseException {
        Token t;
        t = jj_consume_token(THIS);
        {
            if (true) {
                return new ThisExpression(new LinkedList(), this.filename, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
            }
        }
        throw new Error("Missing return statement in function");
    }

    /**
     * Used internally to parse an expression
     */
    final public Expression superExpression() throws ParseException {
        Token t;
        Token id;
        t = jj_consume_token(SUPER);
        jj_consume_token(DOT);
        id = jj_consume_token(IDENTIFIER);
        {
            if (true) {
                return new CompileTimeSuperExpression(id.image, t.beginLine, t.beginColumn, id.endLine, id.endColumn);
            }
        }
        throw new Error("Missing return statement in function");
    }

    /**
     * Used internally to parse an expression
     */
    final public Expression qualifiedName() throws ParseException {
        List list;
        list = name();
        {
            if (true) {
                return new CompileTimeQualifiedName(list);
            }
        }
        throw new Error("Missing return statement in function");
    }

    /**
     * Used internally to parse an expression
     */
    final public Expression classExpression() throws ParseException {
        Type typ;
        Token t;
        typ = resultType();
        jj_consume_token(DOT);
        t = jj_consume_token(CLASS);
        {
            if (true) {
                return new TypeExpression(typ, this.filename, typ.getBeginLine(), typ.getBeginColumn(), t.endLine, t.endColumn);
            }
        }
        throw new Error("Missing return statement in function");
    }

    /**
     * Used internally to parse an expression
     */
    final public Expression allocationExpression() throws ParseException {
        Token t;
        ArrayAllocation.TypeDescriptor td;
        Type pt;
        List ls;
        ArgumentsSuffix as;
        ClassBody cb = null;
        if (jj_2_28(2)) {
            t = jj_consume_token(NEW);
            pt = primitiveType();
            td = arrayDimsAndInits();
            {
                if (true) {
                    return new ArrayAllocation(pt, td, this.filename, t.beginLine, t.beginColumn, td.endLine, td.endColumn);
                }
            }
        } else {
            switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
            case NEW:
                t = jj_consume_token(NEW);
                ls = name();
                final IdentifierToken f = (IdentifierToken) ls.get(0);
                final IdentifierToken l = (IdentifierToken) ls.get(ls.size() - 1);
                pt = new ReferenceType(ls, this.filename, f.beginLine(), f.beginColumn(), l.endLine(), l.endColumn());
                switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
                case LBRACKET:
                    td = arrayDimsAndInits();
                    {
                        if (true) {
                            return new ArrayAllocation(pt, td, this.filename, t.beginLine, t.beginColumn, td.endLine, td.endColumn);
                        }
                    }
                    break;
                case LPAREN:
                    as = arguments();
                    switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
                    case LBRACE:
                        cb = classBody();
                        break;
                    default:
                        this.jj_la1[100] = this.jj_gen;
                        ;
                    }
                    if (cb == null) {
                        {
                            if (true) {
                                return new SimpleAllocation(pt, as.arguments, this.filename, t.beginLine, t.beginColumn, as.endLine, as.endColumn);
                            }
                        }
                    } else {
                        {
                            if (true) {
                                return new ClassAllocation(pt, as.arguments, cb.list, this.filename, t.beginLine, t.beginColumn, cb.endLine, cb.endColumn);
                            }
                        }
                    }
                    break;
                default:
                    this.jj_la1[101] = this.jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
                }
                break;
            default:
                this.jj_la1[102] = this.jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
        }
        throw new Error("Missing return statement in function");
    }

    /**
     * Used internally to parse an expression
     */
    final public ArrayAllocation.TypeDescriptor arrayDimsAndInits() throws ParseException {
        final List dims = new LinkedList();
        int dim = 0;
        Token t;
        Expression exp;
        ArrayInitializer ai;
        if (jj_2_31(2)) {
            label_37: while (true) {
                jj_consume_token(LBRACKET);
                exp = expression();
                t = jj_consume_token(RBRACKET);
                dims.add(exp);
                if (jj_2_29(2)) {
                    ;
                } else {
                    break label_37;
                }
            }
            label_38: while (true) {
                if (jj_2_30(2)) {
                    ;
                } else {
                    break label_38;
                }
                jj_consume_token(LBRACKET);
                t = jj_consume_token(RBRACKET);
                dim++;
            }
            {
                if (true) {
                    return new ArrayAllocation.TypeDescriptor(dims, dim + dims.size(), null, t.endLine, t.endColumn);
                }
            }
        } else {
            switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
            case LBRACKET:
                label_39: while (true) {
                    jj_consume_token(LBRACKET);
                    jj_consume_token(RBRACKET);
                    dim++;
                    switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
                    case LBRACKET:
                        ;
                        break;
                    default:
                        this.jj_la1[103] = this.jj_gen;
                        break label_39;
                    }
                }
                ai = arrayInitializer();
                {
                    if (true) {
                        return new ArrayAllocation.TypeDescriptor(dims, dim, ai, ai.getEndLine(), ai.getEndColumn());
                    }
                }
                break;
            default:
                this.jj_la1[104] = this.jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
        }
        throw new Error("Missing return statement in function");
    }

    // Productions for Types ///////////////////////////////////////////////////////////

    /**
     * Used internally to parse types
     */
    final public Type type() throws ParseException {
        int dim = 0;
        Type pt = null;
        List ls = null;
        Token t = null;
        switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FLOAT:
        case INT:
        case LONG:
        case SHORT:
            pt = primitiveType();
            break;
        case IDENTIFIER:
            ls = name();
            break;
        default:
            this.jj_la1[105] = this.jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
        label_40: while (true) {
            switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
            case LBRACKET:
                ;
                break;
            default:
                this.jj_la1[106] = this.jj_gen;
                break label_40;
            }
            jj_consume_token(LBRACKET);
            t = jj_consume_token(RBRACKET);
            dim++;
        }
        Type rt;
        if (pt != null) {
            rt = pt;
        } else {
            final IdentifierToken f = (IdentifierToken) ls.get(0);
            final IdentifierToken l = (IdentifierToken) ls.get(ls.size() - 1);
            rt = new ReferenceType(ls, this.filename, f.beginLine(), f.beginColumn(), l.endLine(), l.endColumn());
        }
        if (dim == 0) {
            {
                if (true) {
                    return rt;
                }
            }
        } else {
            {
                if (true) {
                    return new ArrayType(rt, dim, this.filename, rt.getBeginLine(), rt.getBeginColumn(), t.endLine, t.endColumn);
                }
            }
        }
        throw new Error("Missing return statement in function");
    }

    /**
     * Used internally to parse types
     */
    final public Type resultType() throws ParseException {
        Type typ;
        Token t;
        switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
        case VOID:
            t = jj_consume_token(VOID);
            {
                if (true) {
                    return new VoidType(this.filename, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
                }
            }
            break;
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FLOAT:
        case INT:
        case LONG:
        case SHORT:
        case IDENTIFIER:
            typ = type();
            {
                if (true) {
                    return typ;
                }
            }
            break;
        default:
            this.jj_la1[107] = this.jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
        throw new Error("Missing return statement in function");
    }

    /**
     * Used internally to parse types
     */
    final public Type primitiveType() throws ParseException {
        Token t;
        switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
        case BOOLEAN:
            t = jj_consume_token(BOOLEAN);
            {
                if (true) {
                    return new BooleanType(this.filename, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
                }
            }
            break;
        case CHAR:
            t = jj_consume_token(CHAR);
            {
                if (true) {
                    return new CharType(this.filename, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
                }
            }
            break;
        case BYTE:
            t = jj_consume_token(BYTE);
            {
                if (true) {
                    return new ByteType(this.filename, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
                }
            }
            break;
        case SHORT:
            t = jj_consume_token(SHORT);
            {
                if (true) {
                    return new ShortType(this.filename, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
                }
            }
            break;
        case INT:
            t = jj_consume_token(INT);
            {
                if (true) {
                    return new IntType(this.filename, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
                }
            }
            break;
        case LONG:
            t = jj_consume_token(LONG);
            {
                if (true) {
                    return new LongType(this.filename, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
                }
            }
            break;
        case FLOAT:
            t = jj_consume_token(FLOAT);
            {
                if (true) {
                    return new FloatType(this.filename, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
                }
            }
            break;
        case DOUBLE:
            t = jj_consume_token(DOUBLE);
            {
                if (true) {
                    return new DoubleType(this.filename, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
                }
            }
            break;
        default:
            this.jj_la1[108] = this.jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
        throw new Error("Missing return statement in function");
    }

    // Lookahead productions ////////////////////////////////////////////////////////

    /**
     * Used internally for lookahead
     */
    final public void castLookahead() throws ParseException {
        if (jj_2_32(2)) {
            jj_consume_token(LPAREN);
            primitiveTypeLookahead();
        } else if (jj_2_33(2147483647)) {
            jj_consume_token(LPAREN);
            nameLookahead();
            jj_consume_token(LBRACKET);
            jj_consume_token(RBRACKET);
        } else {
            switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
            case LPAREN:
                jj_consume_token(LPAREN);
                nameLookahead();
                jj_consume_token(RPAREN);
                switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
                case TILDE:
                    jj_consume_token(TILDE);
                    break;
                case BANG:
                    jj_consume_token(BANG);
                    break;
                case LPAREN:
                    jj_consume_token(LPAREN);
                    break;
                case IDENTIFIER:
                    jj_consume_token(IDENTIFIER);
                    break;
                case THIS:
                    jj_consume_token(THIS);
                    break;
                case SUPER:
                    jj_consume_token(SUPER);
                    break;
                case NEW:
                    jj_consume_token(NEW);
                    break;
                case FALSE:
                case NULL:
                case TRUE:
                case INTEGER_LITERAL:
                case LONG_LITERAL:
                case FLOAT_LITERAL:
                case DOUBLE_LITERAL:
                case CHARACTER_LITERAL:
                case STRING_LITERAL:
                    literalLookahead();
                    break;
                default:
                    this.jj_la1[109] = this.jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
                }
                break;
            default:
                this.jj_la1[110] = this.jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }

    /**
     * Used internally for lookahead
     */
    final public void typeLookahead() throws ParseException {
        switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FLOAT:
        case INT:
        case LONG:
        case SHORT:
            primitiveTypeLookahead();
            break;
        case IDENTIFIER:
            nameLookahead();
            break;
        default:
            this.jj_la1[111] = this.jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
        label_41: while (true) {
            switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
            case LBRACKET:
                ;
                break;
            default:
                this.jj_la1[112] = this.jj_gen;
                break label_41;
            }
            jj_consume_token(LBRACKET);
            jj_consume_token(RBRACKET);
        }
    }

    /**
     * Used internally for lookahead
     */
    final public void resultTypeLookahead() throws ParseException {
        switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
        case VOID:
            jj_consume_token(VOID);
            break;
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FLOAT:
        case INT:
        case LONG:
        case SHORT:
        case IDENTIFIER:
            typeLookahead();
            break;
        default:
            this.jj_la1[113] = this.jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
    }

    /**
     * Used internally for lookahead
     */
    final public void nameLookahead() throws ParseException {
        jj_consume_token(IDENTIFIER);
        label_42: while (true) {
            if (jj_2_34(2)) {
                ;
            } else {
                break label_42;
            }
            jj_consume_token(DOT);
            jj_consume_token(IDENTIFIER);
        }
    }

    /**
     * Used internally for lookahead
     */
    final public void primitiveTypeLookahead() throws ParseException {
        switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
        case BOOLEAN:
            jj_consume_token(BOOLEAN);
            break;
        case CHAR:
            jj_consume_token(CHAR);
            break;
        case BYTE:
            jj_consume_token(BYTE);
            break;
        case SHORT:
            jj_consume_token(SHORT);
            break;
        case INT:
            jj_consume_token(INT);
            break;
        case LONG:
            jj_consume_token(LONG);
            break;
        case FLOAT:
            jj_consume_token(FLOAT);
            break;
        case DOUBLE:
            jj_consume_token(DOUBLE);
            break;
        default:
            this.jj_la1[114] = this.jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
    }

    /**
     * Used internally for lookahead
     */
    final public void literalLookahead() throws ParseException {
        switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
        case INTEGER_LITERAL:
            jj_consume_token(INTEGER_LITERAL);
            break;
        case LONG_LITERAL:
            jj_consume_token(LONG_LITERAL);
            break;
        case FLOAT_LITERAL:
            jj_consume_token(FLOAT_LITERAL);
            break;
        case DOUBLE_LITERAL:
            jj_consume_token(DOUBLE_LITERAL);
            break;
        case CHARACTER_LITERAL:
            jj_consume_token(CHARACTER_LITERAL);
            break;
        case STRING_LITERAL:
            jj_consume_token(STRING_LITERAL);
            break;
        case TRUE:
            jj_consume_token(TRUE);
            break;
        case FALSE:
            jj_consume_token(FALSE);
            break;
        case NULL:
            jj_consume_token(NULL);
            break;
        default:
            this.jj_la1[115] = this.jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
    }

    /**
     * Used internally for lookahead
     */
    final public void explicitConstructorInvocationLookahead() throws ParseException {
        if (jj_2_36(2147483647)) {
            jj_consume_token(THIS);
            argumentsLookahead();
            jj_consume_token(SEMICOLON);
        } else {
            switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FALSE:
            case FLOAT:
            case INT:
            case LONG:
            case NEW:
            case NULL:
            case SHORT:
            case SUPER:
            case THIS:
            case TRUE:
            case VOID:
            case INTEGER_LITERAL:
            case LONG_LITERAL:
            case FLOAT_LITERAL:
            case DOUBLE_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
            case IDENTIFIER:
            case LPAREN:
                if (jj_2_35(2)) {
                    primaryExpressionLookahead();
                    jj_consume_token(DOT);
                } else {
                    ;
                }
                jj_consume_token(SUPER);
                argumentsLookahead();
                jj_consume_token(SEMICOLON);
                break;
            default:
                this.jj_la1[116] = this.jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }

    /**
     * Used internally for lookahead
     */
    final public void argumentsLookahead() throws ParseException {
        jj_consume_token(LPAREN);
        switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FALSE:
        case FLOAT:
        case INT:
        case LONG:
        case NEW:
        case NULL:
        case SHORT:
        case SUPER:
        case THIS:
        case TRUE:
        case VOID:
        case INTEGER_LITERAL:
        case LONG_LITERAL:
        case FLOAT_LITERAL:
        case DOUBLE_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case BANG:
        case TILDE:
        case INCREMENT:
        case DECREMENT:
        case PLUS:
        case MINUS:
            expressionLookahead();
            label_43: while (true) {
                switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
                case COMMA:
                    ;
                    break;
                default:
                    this.jj_la1[117] = this.jj_gen;
                    break label_43;
                }
                jj_consume_token(COMMA);
                expressionLookahead();
            }
            break;
        default:
            this.jj_la1[118] = this.jj_gen;
            ;
        }
        jj_consume_token(RPAREN);
    }

    /**
     * Used internally for lookahead
     */
    final public void expressionLookahead() throws ParseException {
        conditionalExpressionLookahead();
        switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
        case ASSIGN:
        case PLUS_ASSIGN:
        case MINUS_ASSIGN:
        case STAR_ASSIGN:
        case SLASH_ASSIGN:
        case AND_ASSIGN:
        case OR_ASSIGN:
        case XOR_ASSIGN:
        case REMAINDER_ASSIGN:
        case LEFT_SHIFT_ASSIGN:
        case RIGHT_SIGNED_SHIFT_ASSIGN:
        case RIGHT_UNSIGNED_SHIFTASSIGN:
            assignmentOperatorLookahead();
            expressionLookahead();
            break;
        default:
            this.jj_la1[119] = this.jj_gen;
            ;
        }
    }

    /**
     * Used internally for lookahead
     */
    final public void assignmentOperatorLookahead() throws ParseException {
        switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
        case ASSIGN:
            jj_consume_token(ASSIGN);
            break;
        case STAR_ASSIGN:
            jj_consume_token(STAR_ASSIGN);
            break;
        case SLASH_ASSIGN:
            jj_consume_token(SLASH_ASSIGN);
            break;
        case REMAINDER_ASSIGN:
            jj_consume_token(REMAINDER_ASSIGN);
            break;
        case PLUS_ASSIGN:
            jj_consume_token(PLUS_ASSIGN);
            break;
        case MINUS_ASSIGN:
            jj_consume_token(MINUS_ASSIGN);
            break;
        case LEFT_SHIFT_ASSIGN:
            jj_consume_token(LEFT_SHIFT_ASSIGN);
            break;
        case RIGHT_SIGNED_SHIFT_ASSIGN:
            jj_consume_token(RIGHT_SIGNED_SHIFT_ASSIGN);
            break;
        case RIGHT_UNSIGNED_SHIFTASSIGN:
            jj_consume_token(RIGHT_UNSIGNED_SHIFTASSIGN);
            break;
        case AND_ASSIGN:
            jj_consume_token(AND_ASSIGN);
            break;
        case XOR_ASSIGN:
            jj_consume_token(XOR_ASSIGN);
            break;
        case OR_ASSIGN:
            jj_consume_token(OR_ASSIGN);
            break;
        default:
            this.jj_la1[120] = this.jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
    }

    /**
     * Used internally for lookahead
     */
    final public void conditionalExpressionLookahead() throws ParseException {
        conditionalOrExpressionLookahead();
        switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
        case HOOK:
            jj_consume_token(HOOK);
            expressionLookahead();
            jj_consume_token(COLON);
            conditionalExpressionLookahead();
            break;
        default:
            this.jj_la1[121] = this.jj_gen;
            ;
        }
    }

    /**
     * Used internally for lookahead
     */
    final public void conditionalOrExpressionLookahead() throws ParseException {
        conditionalAndExpressionLookahead();
        label_44: while (true) {
            switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
            case CONDITIONAL_OR:
                ;
                break;
            default:
                this.jj_la1[122] = this.jj_gen;
                break label_44;
            }
            jj_consume_token(CONDITIONAL_OR);
            conditionalAndExpressionLookahead();
        }
    }

    /**
     * Used internally for lookahead
     */
    final public void conditionalAndExpressionLookahead() throws ParseException {
        inclusiveOrExpressionLookahead();
        label_45: while (true) {
            switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
            case CONDITIONAL_AND:
                ;
                break;
            default:
                this.jj_la1[123] = this.jj_gen;
                break label_45;
            }
            jj_consume_token(CONDITIONAL_AND);
            inclusiveOrExpressionLookahead();
        }
    }

    /**
     * Used internally for lookahead
     */
    final public void inclusiveOrExpressionLookahead() throws ParseException {
        exclusiveOrExpressionLookahead();
        label_46: while (true) {
            switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
            case BITWISE_OR:
                ;
                break;
            default:
                this.jj_la1[124] = this.jj_gen;
                break label_46;
            }
            jj_consume_token(BITWISE_OR);
            exclusiveOrExpressionLookahead();
        }
    }

    /**
     * Used internally for lookahead
     */
    final public void exclusiveOrExpressionLookahead() throws ParseException {
        andExpressionLookahead();
        label_47: while (true) {
            switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
            case XOR:
                ;
                break;
            default:
                this.jj_la1[125] = this.jj_gen;
                break label_47;
            }
            jj_consume_token(XOR);
            andExpressionLookahead();
        }
    }

    /**
     * Used internally for lookahead
     */
    final public void andExpressionLookahead() throws ParseException {
        equalityExpressionLookahead();
        label_48: while (true) {
            switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
            case BITWISE_AND:
                ;
                break;
            default:
                this.jj_la1[126] = this.jj_gen;
                break label_48;
            }
            jj_consume_token(BITWISE_AND);
            equalityExpressionLookahead();
        }
    }

    /**
     * Used internally for lookahead
     */
    final public void equalityExpressionLookahead() throws ParseException {
        instanceOfExpressionLookahead();
        label_49: while (true) {
            switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
            case EQUAL:
            case NOT_EQUAL:
                ;
                break;
            default:
                this.jj_la1[127] = this.jj_gen;
                break label_49;
            }
            switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
            case EQUAL:
                jj_consume_token(EQUAL);
                break;
            case NOT_EQUAL:
                jj_consume_token(NOT_EQUAL);
                break;
            default:
                this.jj_la1[128] = this.jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
            instanceOfExpressionLookahead();
        }
    }

    /**
     * Used internally for lookahead
     */
    final public void instanceOfExpressionLookahead() throws ParseException {
        relationalExpressionLookahead();
        switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
        case INSTANCEOF:
            jj_consume_token(INSTANCEOF);
            typeLookahead();
            break;
        default:
            this.jj_la1[129] = this.jj_gen;
            ;
        }
    }

    /**
     * Used internally for lookahead
     */
    final public void relationalExpressionLookahead() throws ParseException {
        shiftExpressionLookahead();
        label_50: while (true) {
            switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
            case GREATER_THAN:
            case LESS:
            case LESS_OR_EQUAL:
            case GREATER_OR_EQUAL:
                ;
                break;
            default:
                this.jj_la1[130] = this.jj_gen;
                break label_50;
            }
            switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
            case LESS:
                jj_consume_token(LESS);
                break;
            case GREATER_THAN:
                jj_consume_token(GREATER_THAN);
                break;
            case LESS_OR_EQUAL:
                jj_consume_token(LESS_OR_EQUAL);
                break;
            case GREATER_OR_EQUAL:
                jj_consume_token(GREATER_OR_EQUAL);
                break;
            default:
                this.jj_la1[131] = this.jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
            shiftExpressionLookahead();
        }
    }

    /**
     * Used internally for lookahead
     */
    final public void shiftExpressionLookahead() throws ParseException {
        additiveExpressionLookahead();
        label_51: while (true) {
            switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
            case LEFT_SHIFT:
            case RIGHT_SIGNED_SHIFT:
            case RIGHT_UNSIGNED_SHIFT:
                ;
                break;
            default:
                this.jj_la1[132] = this.jj_gen;
                break label_51;
            }
            switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
            case LEFT_SHIFT:
                jj_consume_token(LEFT_SHIFT);
                break;
            case RIGHT_SIGNED_SHIFT:
                jj_consume_token(RIGHT_SIGNED_SHIFT);
                break;
            case RIGHT_UNSIGNED_SHIFT:
                jj_consume_token(RIGHT_UNSIGNED_SHIFT);
                break;
            default:
                this.jj_la1[133] = this.jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
            additiveExpressionLookahead();
        }
    }

    /**
     * Used internally for lookahead
     */
    final public void additiveExpressionLookahead() throws ParseException {
        multiplicativeExpressionLookahead();
        label_52: while (true) {
            switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
            case PLUS:
            case MINUS:
                ;
                break;
            default:
                this.jj_la1[134] = this.jj_gen;
                break label_52;
            }
            switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
            case PLUS:
                jj_consume_token(PLUS);
                break;
            case MINUS:
                jj_consume_token(MINUS);
                break;
            default:
                this.jj_la1[135] = this.jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
            multiplicativeExpressionLookahead();
        }
    }

    /**
     * Used internally for lookahead
     */
    final public void multiplicativeExpressionLookahead() throws ParseException {
        unaryExpressionLookahead();
        label_53: while (true) {
            switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
            case STAR:
            case SLASH:
            case REMAINDER:
                ;
                break;
            default:
                this.jj_la1[136] = this.jj_gen;
                break label_53;
            }
            switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
            case STAR:
                jj_consume_token(STAR);
                break;
            case SLASH:
                jj_consume_token(SLASH);
                break;
            case REMAINDER:
                jj_consume_token(REMAINDER);
                break;
            default:
                this.jj_la1[137] = this.jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
            unaryExpressionLookahead();
        }
    }

    /**
     * Used internally for lookahead
     */
    final public void unaryExpressionLookahead() throws ParseException {
        switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
        case PLUS:
        case MINUS:
            switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
            case PLUS:
                jj_consume_token(PLUS);
                break;
            case MINUS:
                jj_consume_token(MINUS);
                break;
            default:
                this.jj_la1[138] = this.jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
            unaryExpressionLookahead();
            break;
        case INCREMENT:
            preIncrementExpressionLookahead();
            break;
        case DECREMENT:
            preDecrementExpressionLookahead();
            break;
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FALSE:
        case FLOAT:
        case INT:
        case LONG:
        case NEW:
        case NULL:
        case SHORT:
        case SUPER:
        case THIS:
        case TRUE:
        case VOID:
        case INTEGER_LITERAL:
        case LONG_LITERAL:
        case FLOAT_LITERAL:
        case DOUBLE_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case BANG:
        case TILDE:
            unaryExpressionNotPlusMinusLookahead();
            break;
        default:
            this.jj_la1[139] = this.jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
    }

    /**
     * Used internally for lookahead
     */
    final public void preIncrementExpressionLookahead() throws ParseException {
        jj_consume_token(INCREMENT);
        primaryExpressionLookahead();
    }

    /**
     * Used internally for lookahead
     */
    final public void preDecrementExpressionLookahead() throws ParseException {
        jj_consume_token(DECREMENT);
        primaryExpressionLookahead();
    }

    /**
     * Used internally for lookahead
     */
    final public void unaryExpressionNotPlusMinusLookahead() throws ParseException {
        switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
        case BANG:
        case TILDE:
            switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
            case TILDE:
                jj_consume_token(TILDE);
                break;
            case BANG:
                jj_consume_token(BANG);
                break;
            default:
                this.jj_la1[140] = this.jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
            unaryExpressionLookahead();
            break;
        default:
            this.jj_la1[141] = this.jj_gen;
            if (jj_2_37(2147483647)) {
                castExpressionLookahead();
            } else {
                switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
                case BOOLEAN:
                case BYTE:
                case CHAR:
                case DOUBLE:
                case FALSE:
                case FLOAT:
                case INT:
                case LONG:
                case NEW:
                case NULL:
                case SHORT:
                case SUPER:
                case THIS:
                case TRUE:
                case VOID:
                case INTEGER_LITERAL:
                case LONG_LITERAL:
                case FLOAT_LITERAL:
                case DOUBLE_LITERAL:
                case CHARACTER_LITERAL:
                case STRING_LITERAL:
                case IDENTIFIER:
                case LPAREN:
                    postfixExpressionLookahead();
                    break;
                default:
                    this.jj_la1[142] = this.jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
                }
            }
        }
    }

    /**
     * Used internally for lookahead
     */
    final public void postfixExpressionLookahead() throws ParseException {
        primaryExpressionLookahead();
        switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
        case INCREMENT:
        case DECREMENT:
            switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
            case INCREMENT:
                jj_consume_token(INCREMENT);
                break;
            case DECREMENT:
                jj_consume_token(DECREMENT);
                break;
            default:
                this.jj_la1[143] = this.jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
            break;
        default:
            this.jj_la1[144] = this.jj_gen;
            ;
        }
    }

    /**
     * Used internally for lookahead
     */
    final public void castExpressionLookahead() throws ParseException {
        if (jj_2_38(2147483647)) {
            jj_consume_token(LPAREN);
            typeLookahead();
            jj_consume_token(RPAREN);
            unaryExpressionLookahead();
        } else {
            switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
            case LPAREN:
                jj_consume_token(LPAREN);
                typeLookahead();
                jj_consume_token(RPAREN);
                unaryExpressionNotPlusMinusLookahead();
                break;
            default:
                this.jj_la1[145] = this.jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }

    /**
     * Used internally for lookahead
     */
    final public void primaryExpressionLookahead() throws ParseException {
        primaryPrefixLookahead();
        label_54: while (true) {
            if (jj_2_39(2)) {
                ;
            } else {
                break label_54;
            }
            primarySuffixLookahead();
        }
    }

    /**
     * Used internally for lookahead
     */
    final public void primaryPrefixLookahead() throws ParseException {
        switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
        case FALSE:
        case NULL:
        case TRUE:
        case INTEGER_LITERAL:
        case LONG_LITERAL:
        case FLOAT_LITERAL:
        case DOUBLE_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
            literalLookahead();
            break;
        case THIS:
            jj_consume_token(THIS);
            break;
        case SUPER:
            jj_consume_token(SUPER);
            jj_consume_token(DOT);
            jj_consume_token(IDENTIFIER);
            break;
        case LPAREN:
            jj_consume_token(LPAREN);
            expressionLookahead();
            jj_consume_token(RPAREN);
            break;
        case NEW:
            allocationExpressionLookahead();
            break;
        default:
            this.jj_la1[146] = this.jj_gen;
            if (jj_2_40(2147483647)) {
                resultTypeLookahead();
                jj_consume_token(DOT);
                jj_consume_token(CLASS);
            } else {
                switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
                case IDENTIFIER:
                    nameLookahead();
                    break;
                default:
                    this.jj_la1[147] = this.jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
                }
            }
        }
    }

    /**
     * Used internally for lookahead
     */
    final public void primarySuffixLookahead() throws ParseException {
        if (jj_2_41(2)) {
            jj_consume_token(DOT);
            jj_consume_token(THIS);
        } else if (jj_2_42(2)) {
            jj_consume_token(DOT);
            allocationExpressionLookahead();
        } else {
            switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
            case LBRACKET:
                jj_consume_token(LBRACKET);
                expressionLookahead();
                jj_consume_token(RBRACKET);
                break;
            case DOT:
                jj_consume_token(DOT);
                jj_consume_token(IDENTIFIER);
                break;
            case LPAREN:
                argumentsLookahead();
                break;
            default:
                this.jj_la1[148] = this.jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }

    /**
     * Used internally for lookahead
     */
    final public void allocationExpressionLookahead() throws ParseException {
        if (jj_2_43(2)) {
            jj_consume_token(NEW);
            primitiveTypeLookahead();
            arrayDimsAndInitsLookahead();
        } else {
            switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
            case NEW:
                jj_consume_token(NEW);
                nameLookahead();
                switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
                case LBRACKET:
                    arrayDimsAndInitsLookahead();
                    break;
                case LPAREN:
                    argumentsLookahead();
                    switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
                    case LBRACE:
                        classBodyLookahead();
                        break;
                    default:
                        this.jj_la1[149] = this.jj_gen;
                        ;
                    }
                    break;
                default:
                    this.jj_la1[150] = this.jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
                }
                break;
            default:
                this.jj_la1[151] = this.jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }

    /**
     * Used internally for lookahead
     */
    final public void classBodyLookahead() throws ParseException {
        jj_consume_token(LBRACE);
        label_55: while (true) {
            switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
            case ABSTRACT:
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case CLASS:
            case DOUBLE:
            case FINAL:
            case FLOAT:
            case INT:
            case INTERFACE:
            case LONG:
            case NATIVE:
            case PRIVATE:
            case PROTECTED:
            case PUBLIC:
            case SHORT:
            case STATIC:
            case SYNCHRONIZED:
            case TRANSIENT:
            case VOID:
            case VOLATILE:
            case IDENTIFIER:
            case LBRACE:
                ;
                break;
            default:
                this.jj_la1[152] = this.jj_gen;
                break label_55;
            }
            classBodyDeclarationLookahead();
        }
        jj_consume_token(RBRACE);
    }

    /**
     * Used internally for lookahead
     */
    final public void classBodyDeclarationLookahead() throws ParseException {
        if (jj_2_44(2)) {
            initializerLookahead();
        } else if (jj_2_45(2147483647)) {
            classDeclarationLookahead2();
        } else if (jj_2_46(2147483647)) {
            interfaceDeclarationLookahead2();
        } else if (jj_2_47(2147483647)) {
            constructorDeclarationLookahead2();
        } else if (jj_2_48(2147483647)) {
            methodDeclarationLookahead2();
        } else {
            switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
            case ABSTRACT:
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FINAL:
            case FLOAT:
            case INT:
            case LONG:
            case NATIVE:
            case PRIVATE:
            case PROTECTED:
            case PUBLIC:
            case SHORT:
            case STATIC:
            case SYNCHRONIZED:
            case TRANSIENT:
            case VOLATILE:
            case IDENTIFIER:
                fieldDeclarationLookahead();
                break;
            default:
                this.jj_la1[153] = this.jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }

    /**
     * Used internally for lookahead
     */
    final public void initializerLookahead() throws ParseException {
        switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
        case STATIC:
            jj_consume_token(STATIC);
            break;
        default:
            this.jj_la1[154] = this.jj_gen;
            ;
        }
        blockLookahead();
    }

    /**
     * Used internally for lookahead
     */
    final public void modifiersLookahead() throws ParseException {
        label_56: while (true) {
            switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
            case ABSTRACT:
            case FINAL:
            case NATIVE:
            case PRIVATE:
            case PROTECTED:
            case PUBLIC:
            case STATIC:
            case SYNCHRONIZED:
            case TRANSIENT:
            case VOLATILE:
                ;
                break;
            default:
                this.jj_la1[155] = this.jj_gen;
                break label_56;
            }
            switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
            case PUBLIC:
                jj_consume_token(PUBLIC);
                break;
            case PROTECTED:
                jj_consume_token(PROTECTED);
                break;
            case PRIVATE:
                jj_consume_token(PRIVATE);
                break;
            case STATIC:
                jj_consume_token(STATIC);
                break;
            case ABSTRACT:
                jj_consume_token(ABSTRACT);
                break;
            case FINAL:
                jj_consume_token(FINAL);
                break;
            case NATIVE:
                jj_consume_token(NATIVE);
                break;
            case SYNCHRONIZED:
                jj_consume_token(SYNCHRONIZED);
                break;
            case TRANSIENT:
                jj_consume_token(TRANSIENT);
                break;
            case VOLATILE:
                jj_consume_token(VOLATILE);
                break;
            default:
                this.jj_la1[156] = this.jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }

    /**
     * Used internally for lookahead
     */
    final public void constructorDeclarationLookahead() throws ParseException {
        modifiersLookahead();
        jj_consume_token(IDENTIFIER);
        jj_consume_token(LPAREN);
    }

    /**
     * Used internally for lookahead
     */
    final public void constructorDeclarationLookahead2() throws ParseException {
        modifiersLookahead();
        jj_consume_token(IDENTIFIER);
        formalParametersLookahead();
        switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
        case THROWS:
            jj_consume_token(THROWS);
            nameListLookahead();
            break;
        default:
            this.jj_la1[157] = this.jj_gen;
            ;
        }
        jj_consume_token(LBRACE);
        if (jj_2_49(2147483647)) {
            explicitConstructorInvocationLookahead();
        } else {
            ;
        }
        label_57: while (true) {
            switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
            case BOOLEAN:
            case BREAK:
            case BYTE:
            case CHAR:
            case CONTINUE:
            case DO:
            case DOUBLE:
            case FALSE:
            case FLOAT:
            case FOR:
            case IF:
            case INT:
            case LONG:
            case NEW:
            case NULL:
            case RETURN:
            case SHORT:
            case SUPER:
            case SWITCH:
            case SYNCHRONIZED:
            case THIS:
            case THROW:
            case TRUE:
            case TRY:
            case VOID:
            case WHILE:
            case INTEGER_LITERAL:
            case LONG_LITERAL:
            case FLOAT_LITERAL:
            case DOUBLE_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
            case IDENTIFIER:
            case LPAREN:
            case LBRACE:
            case SEMICOLON:
            case INCREMENT:
            case DECREMENT:
                ;
                break;
            default:
                this.jj_la1[158] = this.jj_gen;
                break label_57;
            }
            statementLookahead();
        }
        jj_consume_token(RBRACE);
    }

    /**
     * Used internally for lookahead
     */
    final public void methodDeclarationLookahead() throws ParseException {
        modifiersLookahead();
        resultTypeLookahead();
        jj_consume_token(IDENTIFIER);
        jj_consume_token(LPAREN);
    }

    /**
     * Used internally for lookahead
     */
    final public void methodDeclarationLookahead2() throws ParseException {
        modifiersLookahead();
        resultTypeLookahead();
        methodDeclaratorLookahead();
        switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
        case THROWS:
            jj_consume_token(THROWS);
            nameListLookahead();
            break;
        default:
            this.jj_la1[159] = this.jj_gen;
            ;
        }
        switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
        case LBRACE:
            blockLookahead();
            break;
        case SEMICOLON:
            jj_consume_token(SEMICOLON);
            break;
        default:
            this.jj_la1[160] = this.jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
    }

    /**
     * Used internally for lookahead
     */
    final public void nameListLookahead() throws ParseException {
        nameLookahead();
        label_58: while (true) {
            switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
            case COMMA:
                ;
                break;
            default:
                this.jj_la1[161] = this.jj_gen;
                break label_58;
            }
            jj_consume_token(COMMA);
            nameLookahead();
        }
    }

    /**
     * Used internally for lookahead
     */
    final public void methodDeclaratorLookahead() throws ParseException {
        jj_consume_token(IDENTIFIER);
        formalParametersLookahead();
        label_59: while (true) {
            switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
            case LBRACKET:
                ;
                break;
            default:
                this.jj_la1[162] = this.jj_gen;
                break label_59;
            }
            jj_consume_token(LBRACKET);
            jj_consume_token(RBRACKET);
        }
    }

    /**
     * Used internally for lookahead
     */
    final public void formalParametersLookahead() throws ParseException {
        jj_consume_token(LPAREN);
        switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FINAL:
        case FLOAT:
        case INT:
        case LONG:
        case SHORT:
        case IDENTIFIER:
            formalParameterLookahead();
            label_60: while (true) {
                switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
                case COMMA:
                    ;
                    break;
                default:
                    this.jj_la1[163] = this.jj_gen;
                    break label_60;
                }
                jj_consume_token(COMMA);
                formalParameterLookahead();
            }
            break;
        default:
            this.jj_la1[164] = this.jj_gen;
            ;
        }
        jj_consume_token(RPAREN);
    }

    /**
     * Used internally for lookahead
     */
    final public void formalParameterLookahead() throws ParseException {
        switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
        case FINAL:
            jj_consume_token(FINAL);
            break;
        default:
            this.jj_la1[165] = this.jj_gen;
            ;
        }
        typeLookahead();
        variableDeclaratorIdLookahead();
    }

    /**
     * Used internally for lookahead
     */
    final public void fieldDeclarationLookahead() throws ParseException {
        modifiersLookahead();
        typeLookahead();
        variableDeclaratorLookahead();
        label_61: while (true) {
            switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
            case COMMA:
                ;
                break;
            default:
                this.jj_la1[166] = this.jj_gen;
                break label_61;
            }
            jj_consume_token(COMMA);
            variableDeclaratorLookahead();
        }
        jj_consume_token(SEMICOLON);
    }

    /**
     * Used internally for lookahead
     */
    final public void variableDeclaratorLookahead() throws ParseException {
        variableDeclaratorIdLookahead();
        switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
        case ASSIGN:
            jj_consume_token(ASSIGN);
            variableInitializerLookahead();
            break;
        default:
            this.jj_la1[167] = this.jj_gen;
            ;
        }
    }

    /**
     * Used internally for lookahead
     */
    final public void variableDeclaratorIdLookahead() throws ParseException {
        jj_consume_token(IDENTIFIER);
        label_62: while (true) {
            switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
            case LBRACKET:
                ;
                break;
            default:
                this.jj_la1[168] = this.jj_gen;
                break label_62;
            }
            jj_consume_token(LBRACKET);
            jj_consume_token(RBRACKET);
        }
    }

    /**
     * Used internally for lookahead
     */
    final public void blockLookahead() throws ParseException {
        jj_consume_token(LBRACE);
        label_63: while (true) {
            switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
            case BOOLEAN:
            case BREAK:
            case BYTE:
            case CHAR:
            case CLASS:
            case CONTINUE:
            case DO:
            case DOUBLE:
            case FALSE:
            case FINAL:
            case FLOAT:
            case FOR:
            case IF:
            case INT:
            case INTERFACE:
            case LONG:
            case NEW:
            case NULL:
            case RETURN:
            case SHORT:
            case SUPER:
            case SWITCH:
            case SYNCHRONIZED:
            case THIS:
            case THROW:
            case TRUE:
            case TRY:
            case VOID:
            case WHILE:
            case INTEGER_LITERAL:
            case LONG_LITERAL:
            case FLOAT_LITERAL:
            case DOUBLE_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
            case IDENTIFIER:
            case LPAREN:
            case LBRACE:
            case SEMICOLON:
            case INCREMENT:
            case DECREMENT:
                ;
                break;
            default:
                this.jj_la1[169] = this.jj_gen;
                break label_63;
            }
            blockStatementLookahead();
        }
        jj_consume_token(RBRACE);
    }

    /**
     * Used internally for lookahead
     */
    final public void blockStatementLookahead() throws ParseException {
        if (jj_2_50(2147483647)) {
            localVariableDeclarationLookahead();
            jj_consume_token(SEMICOLON);
        } else {
            switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
            case BOOLEAN:
            case BREAK:
            case BYTE:
            case CHAR:
            case CONTINUE:
            case DO:
            case DOUBLE:
            case FALSE:
            case FLOAT:
            case FOR:
            case IF:
            case INT:
            case LONG:
            case NEW:
            case NULL:
            case RETURN:
            case SHORT:
            case SUPER:
            case SWITCH:
            case SYNCHRONIZED:
            case THIS:
            case THROW:
            case TRUE:
            case TRY:
            case VOID:
            case WHILE:
            case INTEGER_LITERAL:
            case LONG_LITERAL:
            case FLOAT_LITERAL:
            case DOUBLE_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
            case IDENTIFIER:
            case LPAREN:
            case LBRACE:
            case SEMICOLON:
            case INCREMENT:
            case DECREMENT:
                statementLookahead();
                break;
            case CLASS:
                unmodifiedClassDeclarationLookahead();
                break;
            case INTERFACE:
                unmodifiedInterfaceDeclarationLookahead();
                break;
            default:
                this.jj_la1[170] = this.jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }

    /**
     * Used internally for lookahead
     */
    final public void statementLookahead() throws ParseException {
        if (jj_2_51(2)) {
            labeledStatementLookahead();
        } else {
            switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
            case LBRACE:
                blockLookahead();
                break;
            case SEMICOLON:
                jj_consume_token(SEMICOLON);
                break;
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FALSE:
            case FLOAT:
            case INT:
            case LONG:
            case NEW:
            case NULL:
            case SHORT:
            case SUPER:
            case THIS:
            case TRUE:
            case VOID:
            case INTEGER_LITERAL:
            case LONG_LITERAL:
            case FLOAT_LITERAL:
            case DOUBLE_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
            case IDENTIFIER:
            case LPAREN:
            case INCREMENT:
            case DECREMENT:
                statementExpressionLookahead();
                jj_consume_token(SEMICOLON);
                break;
            case SWITCH:
                switchStatementLookahead();
                break;
            case IF:
                ifStatementLookahead();
                break;
            case WHILE:
                whileStatementLookahead();
                break;
            case DO:
                doStatementLookahead();
                break;
            case FOR:
                forStatementLookahead();
                break;
            case BREAK:
                breakStatementLookahead();
                break;
            case CONTINUE:
                continueStatementLookahead();
                break;
            case RETURN:
                returnStatementLookahead();
                break;
            case THROW:
                throwStatementLookahead();
                break;
            case SYNCHRONIZED:
                synchronizedStatementLookahead();
                break;
            case TRY:
                tryStatementLookahead();
                break;
            default:
                this.jj_la1[171] = this.jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }

    /**
     * Used internally for lookahead
     */
    final public void labeledStatementLookahead() throws ParseException {
        jj_consume_token(IDENTIFIER);
        jj_consume_token(COLON);
        statementLookahead();
    }

    /**
     * Used internally for lookahead
     */
    final public void statementExpressionLookahead() throws ParseException {
        switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
        case INCREMENT:
            preIncrementExpressionLookahead();
            break;
        case DECREMENT:
            preDecrementExpressionLookahead();
            break;
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FALSE:
        case FLOAT:
        case INT:
        case LONG:
        case NEW:
        case NULL:
        case SHORT:
        case SUPER:
        case THIS:
        case TRUE:
        case VOID:
        case INTEGER_LITERAL:
        case LONG_LITERAL:
        case FLOAT_LITERAL:
        case DOUBLE_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
            primaryExpressionLookahead();
            switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
            case ASSIGN:
            case INCREMENT:
            case DECREMENT:
            case PLUS_ASSIGN:
            case MINUS_ASSIGN:
            case STAR_ASSIGN:
            case SLASH_ASSIGN:
            case AND_ASSIGN:
            case OR_ASSIGN:
            case XOR_ASSIGN:
            case REMAINDER_ASSIGN:
            case LEFT_SHIFT_ASSIGN:
            case RIGHT_SIGNED_SHIFT_ASSIGN:
            case RIGHT_UNSIGNED_SHIFTASSIGN:
                switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
                case INCREMENT:
                    jj_consume_token(INCREMENT);
                    break;
                case DECREMENT:
                    jj_consume_token(DECREMENT);
                    break;
                case ASSIGN:
                case PLUS_ASSIGN:
                case MINUS_ASSIGN:
                case STAR_ASSIGN:
                case SLASH_ASSIGN:
                case AND_ASSIGN:
                case OR_ASSIGN:
                case XOR_ASSIGN:
                case REMAINDER_ASSIGN:
                case LEFT_SHIFT_ASSIGN:
                case RIGHT_SIGNED_SHIFT_ASSIGN:
                case RIGHT_UNSIGNED_SHIFTASSIGN:
                    assignmentOperatorLookahead();
                    expressionLookahead();
                    break;
                default:
                    this.jj_la1[172] = this.jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
                }
                break;
            default:
                this.jj_la1[173] = this.jj_gen;
                ;
            }
            break;
        default:
            this.jj_la1[174] = this.jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
    }

    /**
     * Used internally for lookahead
     */
    final public void switchStatementLookahead() throws ParseException {
        jj_consume_token(SWITCH);
        jj_consume_token(LPAREN);
        expressionLookahead();
        jj_consume_token(RPAREN);
        jj_consume_token(LBRACE);
        label_64: while (true) {
            switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
            case CASE:
            case _DEFAULT:
                ;
                break;
            default:
                this.jj_la1[175] = this.jj_gen;
                break label_64;
            }
            switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
            case CASE:
                jj_consume_token(CASE);
                expressionLookahead();
                break;
            case _DEFAULT:
                jj_consume_token(_DEFAULT);
                break;
            default:
                this.jj_la1[176] = this.jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
            jj_consume_token(COLON);
            label_65: while (true) {
                switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
                case BOOLEAN:
                case BREAK:
                case BYTE:
                case CHAR:
                case CLASS:
                case CONTINUE:
                case DO:
                case DOUBLE:
                case FALSE:
                case FINAL:
                case FLOAT:
                case FOR:
                case IF:
                case INT:
                case INTERFACE:
                case LONG:
                case NEW:
                case NULL:
                case RETURN:
                case SHORT:
                case SUPER:
                case SWITCH:
                case SYNCHRONIZED:
                case THIS:
                case THROW:
                case TRUE:
                case TRY:
                case VOID:
                case WHILE:
                case INTEGER_LITERAL:
                case LONG_LITERAL:
                case FLOAT_LITERAL:
                case DOUBLE_LITERAL:
                case CHARACTER_LITERAL:
                case STRING_LITERAL:
                case IDENTIFIER:
                case LPAREN:
                case LBRACE:
                case SEMICOLON:
                case INCREMENT:
                case DECREMENT:
                    ;
                    break;
                default:
                    this.jj_la1[177] = this.jj_gen;
                    break label_65;
                }
                blockStatementLookahead();
            }
        }
        jj_consume_token(RBRACE);
    }

    /**
     * Used internally for lookahead
     */
    final public void ifStatementLookahead() throws ParseException {
        jj_consume_token(IF);
        jj_consume_token(LPAREN);
        expressionLookahead();
        jj_consume_token(RPAREN);
        statementLookahead();
        switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
        case ELSE:
            jj_consume_token(ELSE);
            statementLookahead();
            break;
        default:
            this.jj_la1[178] = this.jj_gen;
            ;
        }
    }

    /**
     * Used internally for lookahead
     */
    final public void whileStatementLookahead() throws ParseException {
        jj_consume_token(WHILE);
        jj_consume_token(LPAREN);
        expressionLookahead();
        jj_consume_token(RPAREN);
        statementLookahead();
    }

    /**
     * Used internally for lookahead
     */
    final public void doStatementLookahead() throws ParseException {
        jj_consume_token(DO);
        statementLookahead();
        jj_consume_token(WHILE);
        jj_consume_token(LPAREN);
        expressionLookahead();
        jj_consume_token(RPAREN);
        jj_consume_token(SEMICOLON);
    }

    /**
     * Used internally for lookahead
     */
    final public void forStatementLookahead() throws ParseException {
        jj_consume_token(FOR);
        jj_consume_token(LPAREN);
        switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FALSE:
        case FINAL:
        case FLOAT:
        case INT:
        case LONG:
        case NEW:
        case NULL:
        case SHORT:
        case SUPER:
        case THIS:
        case TRUE:
        case VOID:
        case INTEGER_LITERAL:
        case LONG_LITERAL:
        case FLOAT_LITERAL:
        case DOUBLE_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case INCREMENT:
        case DECREMENT:
            forInitLookahead();
            break;
        default:
            this.jj_la1[179] = this.jj_gen;
            ;
        }
        jj_consume_token(SEMICOLON);
        switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FALSE:
        case FLOAT:
        case INT:
        case LONG:
        case NEW:
        case NULL:
        case SHORT:
        case SUPER:
        case THIS:
        case TRUE:
        case VOID:
        case INTEGER_LITERAL:
        case LONG_LITERAL:
        case FLOAT_LITERAL:
        case DOUBLE_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case BANG:
        case TILDE:
        case INCREMENT:
        case DECREMENT:
        case PLUS:
        case MINUS:
            expressionLookahead();
            break;
        default:
            this.jj_la1[180] = this.jj_gen;
            ;
        }
        jj_consume_token(SEMICOLON);
        switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FALSE:
        case FLOAT:
        case INT:
        case LONG:
        case NEW:
        case NULL:
        case SHORT:
        case SUPER:
        case THIS:
        case TRUE:
        case VOID:
        case INTEGER_LITERAL:
        case LONG_LITERAL:
        case FLOAT_LITERAL:
        case DOUBLE_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case INCREMENT:
        case DECREMENT:
            statementExpressionListLookahead();
            break;
        default:
            this.jj_la1[181] = this.jj_gen;
            ;
        }
        jj_consume_token(RPAREN);
        statementLookahead();
    }

    /**
     * Used internally for lookahead
     */
    final public void forInitLookahead() throws ParseException {
        if (jj_2_52(2147483647)) {
            localVariableDeclarationLookahead();
        } else {
            switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FALSE:
            case FLOAT:
            case INT:
            case LONG:
            case NEW:
            case NULL:
            case SHORT:
            case SUPER:
            case THIS:
            case TRUE:
            case VOID:
            case INTEGER_LITERAL:
            case LONG_LITERAL:
            case FLOAT_LITERAL:
            case DOUBLE_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
            case IDENTIFIER:
            case LPAREN:
            case INCREMENT:
            case DECREMENT:
                statementExpressionListLookahead();
                break;
            default:
                this.jj_la1[182] = this.jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }

    /**
     * Used internally for lookahead
     */
    final public void statementExpressionListLookahead() throws ParseException {
        statementExpressionLookahead();
        label_66: while (true) {
            switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
            case COMMA:
                ;
                break;
            default:
                this.jj_la1[183] = this.jj_gen;
                break label_66;
            }
            jj_consume_token(COMMA);
            statementExpressionLookahead();
        }
    }

    /**
     * Used internally for lookahead
     */
    final public void breakStatementLookahead() throws ParseException {
        jj_consume_token(BREAK);
        switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
        case IDENTIFIER:
            jj_consume_token(IDENTIFIER);
            break;
        default:
            this.jj_la1[184] = this.jj_gen;
            ;
        }
        jj_consume_token(SEMICOLON);
    }

    /**
     * Used internally for lookahead
     */
    final public void continueStatementLookahead() throws ParseException {
        jj_consume_token(CONTINUE);
        switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
        case IDENTIFIER:
            jj_consume_token(IDENTIFIER);
            break;
        default:
            this.jj_la1[185] = this.jj_gen;
            ;
        }
        jj_consume_token(SEMICOLON);
    }

    /**
     * Used internally for lookahead
     */
    final public void returnStatementLookahead() throws ParseException {
        jj_consume_token(RETURN);
        switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FALSE:
        case FLOAT:
        case INT:
        case LONG:
        case NEW:
        case NULL:
        case SHORT:
        case SUPER:
        case THIS:
        case TRUE:
        case VOID:
        case INTEGER_LITERAL:
        case LONG_LITERAL:
        case FLOAT_LITERAL:
        case DOUBLE_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case BANG:
        case TILDE:
        case INCREMENT:
        case DECREMENT:
        case PLUS:
        case MINUS:
            expressionLookahead();
            break;
        default:
            this.jj_la1[186] = this.jj_gen;
            ;
        }
        jj_consume_token(SEMICOLON);
    }

    /**
     * Used internally for lookahead
     */
    final public void throwStatementLookahead() throws ParseException {
        jj_consume_token(THROW);
        expressionLookahead();
        jj_consume_token(SEMICOLON);
    }

    /**
     * Used internally for lookahead
     */
    final public void synchronizedStatementLookahead() throws ParseException {
        jj_consume_token(SYNCHRONIZED);
        jj_consume_token(LPAREN);
        expressionLookahead();
        jj_consume_token(RPAREN);
        blockLookahead();
    }

    /**
     * Used internally for lookahead
     */
    final public void localVariableDeclarationLookahead() throws ParseException {
        switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
        case FINAL:
            jj_consume_token(FINAL);
            break;
        default:
            this.jj_la1[187] = this.jj_gen;
            ;
        }
        typeLookahead();
        variableDeclaratorLookahead();
        label_67: while (true) {
            switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
            case COMMA:
                ;
                break;
            default:
                this.jj_la1[188] = this.jj_gen;
                break label_67;
            }
            jj_consume_token(COMMA);
            variableDeclaratorLookahead();
        }
    }

    /**
     * Used internally for lookahead
     */
    final public void tryStatementLookahead() throws ParseException {
        jj_consume_token(TRY);
        blockLookahead();
        label_68: while (true) {
            switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
            case CATCH:
                ;
                break;
            default:
                this.jj_la1[189] = this.jj_gen;
                break label_68;
            }
            jj_consume_token(CATCH);
            jj_consume_token(LPAREN);
            formalParameterLookahead();
            jj_consume_token(RPAREN);
            blockLookahead();
        }
        switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
        case FINALLY:
            jj_consume_token(FINALLY);
            blockLookahead();
            break;
        default:
            this.jj_la1[190] = this.jj_gen;
            ;
        }
    }

    /**
     * Used internally for lookahead
     */
    final public void arrayDimsAndInitsLookahead() throws ParseException {
        if (jj_2_55(2)) {
            label_69: while (true) {
                jj_consume_token(LBRACKET);
                expressionLookahead();
                jj_consume_token(RBRACKET);
                if (jj_2_53(2)) {
                    ;
                } else {
                    break label_69;
                }
            }
            label_70: while (true) {
                if (jj_2_54(2)) {
                    ;
                } else {
                    break label_70;
                }
                jj_consume_token(LBRACKET);
                jj_consume_token(RBRACKET);
            }
        } else {
            switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
            case LBRACKET:
                label_71: while (true) {
                    jj_consume_token(LBRACKET);
                    jj_consume_token(RBRACKET);
                    switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
                    case LBRACKET:
                        ;
                        break;
                    default:
                        this.jj_la1[191] = this.jj_gen;
                        break label_71;
                    }
                }
                arrayInitializerLookahead();
                break;
            default:
                this.jj_la1[192] = this.jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }

    /**
     * Used internally for lookahead
     */
    final public void arrayInitializerLookahead() throws ParseException {
        jj_consume_token(LBRACE);
        switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FALSE:
        case FLOAT:
        case INT:
        case LONG:
        case NEW:
        case NULL:
        case SHORT:
        case SUPER:
        case THIS:
        case TRUE:
        case VOID:
        case INTEGER_LITERAL:
        case LONG_LITERAL:
        case FLOAT_LITERAL:
        case DOUBLE_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case LBRACE:
        case BANG:
        case TILDE:
        case INCREMENT:
        case DECREMENT:
        case PLUS:
        case MINUS:
            variableInitializerLookahead();
            label_72: while (true) {
                if (jj_2_56(2)) {
                    ;
                } else {
                    break label_72;
                }
                jj_consume_token(COMMA);
                variableInitializerLookahead();
            }
            break;
        default:
            this.jj_la1[193] = this.jj_gen;
            ;
        }
        switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
        case COMMA:
            jj_consume_token(COMMA);
            break;
        default:
            this.jj_la1[194] = this.jj_gen;
            ;
        }
        jj_consume_token(RBRACE);
    }

    /**
     * Used internally for lookahead
     */
    final public void variableInitializerLookahead() throws ParseException {
        switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
        case LBRACE:
            arrayInitializerLookahead();
            break;
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FALSE:
        case FLOAT:
        case INT:
        case LONG:
        case NEW:
        case NULL:
        case SHORT:
        case SUPER:
        case THIS:
        case TRUE:
        case VOID:
        case INTEGER_LITERAL:
        case LONG_LITERAL:
        case FLOAT_LITERAL:
        case DOUBLE_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case BANG:
        case TILDE:
        case INCREMENT:
        case DECREMENT:
        case PLUS:
        case MINUS:
            expressionLookahead();
            break;
        default:
            this.jj_la1[195] = this.jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
    }

    /**
     * Used internally for lookahead
     */
    final public void classDeclarationLookahead() throws ParseException {
        modifiersLookahead();
        jj_consume_token(CLASS);
    }

    /**
     * Used internally for lookahead
     */
    final public void classDeclarationLookahead2() throws ParseException {
        modifiersLookahead();
        unmodifiedClassDeclarationLookahead();
    }

    /**
     * Used internally for lookahead
     */
    final public void unmodifiedClassDeclarationLookahead() throws ParseException {
        jj_consume_token(CLASS);
        jj_consume_token(IDENTIFIER);
        switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
        case EXTENDS:
            jj_consume_token(EXTENDS);
            nameLookahead();
            break;
        default:
            this.jj_la1[196] = this.jj_gen;
            ;
        }
        switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
        case IMPLEMENTS:
            jj_consume_token(IMPLEMENTS);
            nameListLookahead();
            break;
        default:
            this.jj_la1[197] = this.jj_gen;
            ;
        }
        classBodyLookahead();
    }

    /**
     * Used internally for lookahead
     */
    final public void interfaceDeclarationLookahead() throws ParseException {
        modifiersLookahead();
        jj_consume_token(INTERFACE);
    }

    /**
     * Used internally for lookahead
     */
    final public void interfaceDeclarationLookahead2() throws ParseException {
        modifiersLookahead();
        unmodifiedInterfaceDeclarationLookahead();
    }

    /**
     * Used internally for lookahead
     */
    final public void unmodifiedInterfaceDeclarationLookahead() throws ParseException {
        jj_consume_token(INTERFACE);
        jj_consume_token(IDENTIFIER);
        switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
        case EXTENDS:
            jj_consume_token(EXTENDS);
            nameListLookahead();
            break;
        default:
            this.jj_la1[198] = this.jj_gen;
            ;
        }
        jj_consume_token(LBRACE);
        label_73: while (true) {
            switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
            case ABSTRACT:
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case CLASS:
            case DOUBLE:
            case FINAL:
            case FLOAT:
            case INT:
            case INTERFACE:
            case LONG:
            case NATIVE:
            case PRIVATE:
            case PROTECTED:
            case PUBLIC:
            case SHORT:
            case STATIC:
            case SYNCHRONIZED:
            case TRANSIENT:
            case VOID:
            case VOLATILE:
            case IDENTIFIER:
                ;
                break;
            default:
                this.jj_la1[199] = this.jj_gen;
                break label_73;
            }
            interfaceMemberDeclarationLookahead();
        }
        jj_consume_token(RBRACE);
    }

    /**
     * Used internally for lookahead
     */
    final public void interfaceMemberDeclarationLookahead() throws ParseException {
        if (jj_2_57(2147483647)) {
            classDeclarationLookahead2();
        } else if (jj_2_58(2147483647)) {
            interfaceDeclarationLookahead2();
        } else if (jj_2_59(2147483647)) {
            methodDeclarationLookahead2();
        } else {
            switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) {
            case ABSTRACT:
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FINAL:
            case FLOAT:
            case INT:
            case LONG:
            case NATIVE:
            case PRIVATE:
            case PROTECTED:
            case PUBLIC:
            case SHORT:
            case STATIC:
            case SYNCHRONIZED:
            case TRANSIENT:
            case VOLATILE:
            case IDENTIFIER:
                fieldDeclarationLookahead();
                break;
            default:
                this.jj_la1[200] = this.jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }

    final private boolean jj_2_1(final int xla) {
        this.jj_la = xla;
        this.jj_lastpos = this.jj_scanpos = this.token;
        final boolean retval = !jj_3_1();
        jj_save(0, xla);
        return retval;
    }

    final private boolean jj_2_2(final int xla) {
        this.jj_la = xla;
        this.jj_lastpos = this.jj_scanpos = this.token;
        final boolean retval = !jj_3_2();
        jj_save(1, xla);
        return retval;
    }

    final private boolean jj_2_3(final int xla) {
        this.jj_la = xla;
        this.jj_lastpos = this.jj_scanpos = this.token;
        final boolean retval = !jj_3_3();
        jj_save(2, xla);
        return retval;
    }

    final private boolean jj_2_4(final int xla) {
        this.jj_la = xla;
        this.jj_lastpos = this.jj_scanpos = this.token;
        final boolean retval = !jj_3_4();
        jj_save(3, xla);
        return retval;
    }

    final private boolean jj_2_5(final int xla) {
        this.jj_la = xla;
        this.jj_lastpos = this.jj_scanpos = this.token;
        final boolean retval = !jj_3_5();
        jj_save(4, xla);
        return retval;
    }

    final private boolean jj_2_6(final int xla) {
        this.jj_la = xla;
        this.jj_lastpos = this.jj_scanpos = this.token;
        final boolean retval = !jj_3_6();
        jj_save(5, xla);
        return retval;
    }

    final private boolean jj_2_7(final int xla) {
        this.jj_la = xla;
        this.jj_lastpos = this.jj_scanpos = this.token;
        final boolean retval = !jj_3_7();
        jj_save(6, xla);
        return retval;
    }

    final private boolean jj_2_8(final int xla) {
        this.jj_la = xla;
        this.jj_lastpos = this.jj_scanpos = this.token;
        final boolean retval = !jj_3_8();
        jj_save(7, xla);
        return retval;
    }

    final private boolean jj_2_9(final int xla) {
        this.jj_la = xla;
        this.jj_lastpos = this.jj_scanpos = this.token;
        final boolean retval = !jj_3_9();
        jj_save(8, xla);
        return retval;
    }

    final private boolean jj_2_10(final int xla) {
        this.jj_la = xla;
        this.jj_lastpos = this.jj_scanpos = this.token;
        final boolean retval = !jj_3_10();
        jj_save(9, xla);
        return retval;
    }

    final private boolean jj_2_11(final int xla) {
        this.jj_la = xla;
        this.jj_lastpos = this.jj_scanpos = this.token;
        final boolean retval = !jj_3_11();
        jj_save(10, xla);
        return retval;
    }

    final private boolean jj_2_12(final int xla) {
        this.jj_la = xla;
        this.jj_lastpos = this.jj_scanpos = this.token;
        final boolean retval = !jj_3_12();
        jj_save(11, xla);
        return retval;
    }

    final private boolean jj_2_13(final int xla) {
        this.jj_la = xla;
        this.jj_lastpos = this.jj_scanpos = this.token;
        final boolean retval = !jj_3_13();
        jj_save(12, xla);
        return retval;
    }

    final private boolean jj_2_14(final int xla) {
        this.jj_la = xla;
        this.jj_lastpos = this.jj_scanpos = this.token;
        final boolean retval = !jj_3_14();
        jj_save(13, xla);
        return retval;
    }

    final private boolean jj_2_15(final int xla) {
        this.jj_la = xla;
        this.jj_lastpos = this.jj_scanpos = this.token;
        final boolean retval = !jj_3_15();
        jj_save(14, xla);
        return retval;
    }

    final private boolean jj_2_16(final int xla) {
        this.jj_la = xla;
        this.jj_lastpos = this.jj_scanpos = this.token;
        final boolean retval = !jj_3_16();
        jj_save(15, xla);
        return retval;
    }

    final private boolean jj_2_17(final int xla) {
        this.jj_la = xla;
        this.jj_lastpos = this.jj_scanpos = this.token;
        final boolean retval = !jj_3_17();
        jj_save(16, xla);
        return retval;
    }

    final private boolean jj_2_18(final int xla) {
        this.jj_la = xla;
        this.jj_lastpos = this.jj_scanpos = this.token;
        final boolean retval = !jj_3_18();
        jj_save(17, xla);
        return retval;
    }

    final private boolean jj_2_19(final int xla) {
        this.jj_la = xla;
        this.jj_lastpos = this.jj_scanpos = this.token;
        final boolean retval = !jj_3_19();
        jj_save(18, xla);
        return retval;
    }

    final private boolean jj_2_20(final int xla) {
        this.jj_la = xla;
        this.jj_lastpos = this.jj_scanpos = this.token;
        final boolean retval = !jj_3_20();
        jj_save(19, xla);
        return retval;
    }

    final private boolean jj_2_21(final int xla) {
        this.jj_la = xla;
        this.jj_lastpos = this.jj_scanpos = this.token;
        final boolean retval = !jj_3_21();
        jj_save(20, xla);
        return retval;
    }

    final private boolean jj_2_22(final int xla) {
        this.jj_la = xla;
        this.jj_lastpos = this.jj_scanpos = this.token;
        final boolean retval = !jj_3_22();
        jj_save(21, xla);
        return retval;
    }

    final private boolean jj_2_23(final int xla) {
        this.jj_la = xla;
        this.jj_lastpos = this.jj_scanpos = this.token;
        final boolean retval = !jj_3_23();
        jj_save(22, xla);
        return retval;
    }

    final private boolean jj_2_24(final int xla) {
        this.jj_la = xla;
        this.jj_lastpos = this.jj_scanpos = this.token;
        final boolean retval = !jj_3_24();
        jj_save(23, xla);
        return retval;
    }

    final private boolean jj_2_25(final int xla) {
        this.jj_la = xla;
        this.jj_lastpos = this.jj_scanpos = this.token;
        final boolean retval = !jj_3_25();
        jj_save(24, xla);
        return retval;
    }

    final private boolean jj_2_26(final int xla) {
        this.jj_la = xla;
        this.jj_lastpos = this.jj_scanpos = this.token;
        final boolean retval = !jj_3_26();
        jj_save(25, xla);
        return retval;
    }

    final private boolean jj_2_27(final int xla) {
        this.jj_la = xla;
        this.jj_lastpos = this.jj_scanpos = this.token;
        final boolean retval = !jj_3_27();
        jj_save(26, xla);
        return retval;
    }

    final private boolean jj_2_28(final int xla) {
        this.jj_la = xla;
        this.jj_lastpos = this.jj_scanpos = this.token;
        final boolean retval = !jj_3_28();
        jj_save(27, xla);
        return retval;
    }

    final private boolean jj_2_29(final int xla) {
        this.jj_la = xla;
        this.jj_lastpos = this.jj_scanpos = this.token;
        final boolean retval = !jj_3_29();
        jj_save(28, xla);
        return retval;
    }

    final private boolean jj_2_30(final int xla) {
        this.jj_la = xla;
        this.jj_lastpos = this.jj_scanpos = this.token;
        final boolean retval = !jj_3_30();
        jj_save(29, xla);
        return retval;
    }

    final private boolean jj_2_31(final int xla) {
        this.jj_la = xla;
        this.jj_lastpos = this.jj_scanpos = this.token;
        final boolean retval = !jj_3_31();
        jj_save(30, xla);
        return retval;
    }

    final private boolean jj_2_32(final int xla) {
        this.jj_la = xla;
        this.jj_lastpos = this.jj_scanpos = this.token;
        final boolean retval = !jj_3_32();
        jj_save(31, xla);
        return retval;
    }

    final private boolean jj_2_33(final int xla) {
        this.jj_la = xla;
        this.jj_lastpos = this.jj_scanpos = this.token;
        final boolean retval = !jj_3_33();
        jj_save(32, xla);
        return retval;
    }

    final private boolean jj_2_34(final int xla) {
        this.jj_la = xla;
        this.jj_lastpos = this.jj_scanpos = this.token;
        final boolean retval = !jj_3_34();
        jj_save(33, xla);
        return retval;
    }

    final private boolean jj_2_35(final int xla) {
        this.jj_la = xla;
        this.jj_lastpos = this.jj_scanpos = this.token;
        final boolean retval = !jj_3_35();
        jj_save(34, xla);
        return retval;
    }

    final private boolean jj_2_36(final int xla) {
        this.jj_la = xla;
        this.jj_lastpos = this.jj_scanpos = this.token;
        final boolean retval = !jj_3_36();
        jj_save(35, xla);
        return retval;
    }

    final private boolean jj_2_37(final int xla) {
        this.jj_la = xla;
        this.jj_lastpos = this.jj_scanpos = this.token;
        final boolean retval = !jj_3_37();
        jj_save(36, xla);
        return retval;
    }

    final private boolean jj_2_38(final int xla) {
        this.jj_la = xla;
        this.jj_lastpos = this.jj_scanpos = this.token;
        final boolean retval = !jj_3_38();
        jj_save(37, xla);
        return retval;
    }

    final private boolean jj_2_39(final int xla) {
        this.jj_la = xla;
        this.jj_lastpos = this.jj_scanpos = this.token;
        final boolean retval = !jj_3_39();
        jj_save(38, xla);
        return retval;
    }

    final private boolean jj_2_40(final int xla) {
        this.jj_la = xla;
        this.jj_lastpos = this.jj_scanpos = this.token;
        final boolean retval = !jj_3_40();
        jj_save(39, xla);
        return retval;
    }

    final private boolean jj_2_41(final int xla) {
        this.jj_la = xla;
        this.jj_lastpos = this.jj_scanpos = this.token;
        final boolean retval = !jj_3_41();
        jj_save(40, xla);
        return retval;
    }

    final private boolean jj_2_42(final int xla) {
        this.jj_la = xla;
        this.jj_lastpos = this.jj_scanpos = this.token;
        final boolean retval = !jj_3_42();
        jj_save(41, xla);
        return retval;
    }

    final private boolean jj_2_43(final int xla) {
        this.jj_la = xla;
        this.jj_lastpos = this.jj_scanpos = this.token;
        final boolean retval = !jj_3_43();
        jj_save(42, xla);
        return retval;
    }

    final private boolean jj_2_44(final int xla) {
        this.jj_la = xla;
        this.jj_lastpos = this.jj_scanpos = this.token;
        final boolean retval = !jj_3_44();
        jj_save(43, xla);
        return retval;
    }

    final private boolean jj_2_45(final int xla) {
        this.jj_la = xla;
        this.jj_lastpos = this.jj_scanpos = this.token;
        final boolean retval = !jj_3_45();
        jj_save(44, xla);
        return retval;
    }

    final private boolean jj_2_46(final int xla) {
        this.jj_la = xla;
        this.jj_lastpos = this.jj_scanpos = this.token;
        final boolean retval = !jj_3_46();
        jj_save(45, xla);
        return retval;
    }

    final private boolean jj_2_47(final int xla) {
        this.jj_la = xla;
        this.jj_lastpos = this.jj_scanpos = this.token;
        final boolean retval = !jj_3_47();
        jj_save(46, xla);
        return retval;
    }

    final private boolean jj_2_48(final int xla) {
        this.jj_la = xla;
        this.jj_lastpos = this.jj_scanpos = this.token;
        final boolean retval = !jj_3_48();
        jj_save(47, xla);
        return retval;
    }

    final private boolean jj_2_49(final int xla) {
        this.jj_la = xla;
        this.jj_lastpos = this.jj_scanpos = this.token;
        final boolean retval = !jj_3_49();
        jj_save(48, xla);
        return retval;
    }

    final private boolean jj_2_50(final int xla) {
        this.jj_la = xla;
        this.jj_lastpos = this.jj_scanpos = this.token;
        final boolean retval = !jj_3_50();
        jj_save(49, xla);
        return retval;
    }

    final private boolean jj_2_51(final int xla) {
        this.jj_la = xla;
        this.jj_lastpos = this.jj_scanpos = this.token;
        final boolean retval = !jj_3_51();
        jj_save(50, xla);
        return retval;
    }

    final private boolean jj_2_52(final int xla) {
        this.jj_la = xla;
        this.jj_lastpos = this.jj_scanpos = this.token;
        final boolean retval = !jj_3_52();
        jj_save(51, xla);
        return retval;
    }

    final private boolean jj_2_53(final int xla) {
        this.jj_la = xla;
        this.jj_lastpos = this.jj_scanpos = this.token;
        final boolean retval = !jj_3_53();
        jj_save(52, xla);
        return retval;
    }

    final private boolean jj_2_54(final int xla) {
        this.jj_la = xla;
        this.jj_lastpos = this.jj_scanpos = this.token;
        final boolean retval = !jj_3_54();
        jj_save(53, xla);
        return retval;
    }

    final private boolean jj_2_55(final int xla) {
        this.jj_la = xla;
        this.jj_lastpos = this.jj_scanpos = this.token;
        final boolean retval = !jj_3_55();
        jj_save(54, xla);
        return retval;
    }

    final private boolean jj_2_56(final int xla) {
        this.jj_la = xla;
        this.jj_lastpos = this.jj_scanpos = this.token;
        final boolean retval = !jj_3_56();
        jj_save(55, xla);
        return retval;
    }

    final private boolean jj_2_57(final int xla) {
        this.jj_la = xla;
        this.jj_lastpos = this.jj_scanpos = this.token;
        final boolean retval = !jj_3_57();
        jj_save(56, xla);
        return retval;
    }

    final private boolean jj_2_58(final int xla) {
        this.jj_la = xla;
        this.jj_lastpos = this.jj_scanpos = this.token;
        final boolean retval = !jj_3_58();
        jj_save(57, xla);
        return retval;
    }

    final private boolean jj_2_59(final int xla) {
        this.jj_la = xla;
        this.jj_lastpos = this.jj_scanpos = this.token;
        final boolean retval = !jj_3_59();
        jj_save(58, xla);
        return retval;
    }

    final private boolean jj_3R_239() {
        if (jj_3R_277()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(DOT)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(CLASS)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3_14() {
        if (jj_scan_token(THIS)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_86()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(SEMICOLON)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3_13() {
        if (jj_3R_85()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(DOT)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_240() {
        if (jj_3R_278()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_613() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3_13()) {
            this.jj_scanpos = xsp;
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(SUPER)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_86()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(SEMICOLON)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_612() {
        if (jj_scan_token(THIS)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_86()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(SEMICOLON)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_595() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3R_612()) {
            this.jj_scanpos = xsp;
            if (jj_3R_613()) {
                return true;
            }
            if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_237() {
        if (jj_scan_token(SUPER)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(DOT)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(IDENTIFIER)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3_12() {
        if (jj_3R_84()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_577() {
        if (jj_3R_234()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_576() {
        if (jj_3R_595()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_236() {
        if (jj_scan_token(THIS)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_575() {
        if (jj_scan_token(THROWS)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_594()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_592() {
        if (jj_scan_token(PRIVATE)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_275() {
        if (jj_scan_token(NULL)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_591() {
        if (jj_scan_token(PROTECTED)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_573() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3R_590()) {
            this.jj_scanpos = xsp;
            if (jj_3R_591()) {
                this.jj_scanpos = xsp;
                if (jj_3R_592()) {
                    return true;
                }
                if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                    return false;
                }
            } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_590() {
        if (jj_scan_token(PUBLIC)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_569() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3R_573()) {
            this.jj_scanpos = xsp;
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(IDENTIFIER)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_574()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        xsp = this.jj_scanpos;
        if (jj_3R_575()) {
            this.jj_scanpos = xsp;
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(LBRACE)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        xsp = this.jj_scanpos;
        if (jj_3R_576()) {
            this.jj_scanpos = xsp;
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        while (true) {
            xsp = this.jj_scanpos;
            if (jj_3R_577()) {
                this.jj_scanpos = xsp;
                break;
            }
            if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        }
        if (jj_scan_token(RBRACE)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_274() {
        if (jj_scan_token(FALSE)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_273() {
        if (jj_scan_token(TRUE)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_272() {
        if (jj_scan_token(STRING_LITERAL)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_619() {
        if (jj_scan_token(LBRACKET)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(RBRACKET)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_271() {
        if (jj_scan_token(CHARACTER_LITERAL)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_270() {
        if (jj_scan_token(DOUBLE_LITERAL)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_130() {
        if (jj_scan_token(STATIC)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_80() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3R_130()) {
            this.jj_scanpos = xsp;
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_131()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_269() {
        if (jj_scan_token(FLOAT_LITERAL)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_268() {
        if (jj_scan_token(LONG_LITERAL)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_267() {
        if (jj_scan_token(INTEGER_LITERAL)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_235() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3R_267()) {
            this.jj_scanpos = xsp;
            if (jj_3R_268()) {
                this.jj_scanpos = xsp;
                if (jj_3R_269()) {
                    this.jj_scanpos = xsp;
                    if (jj_3R_270()) {
                        this.jj_scanpos = xsp;
                        if (jj_3R_271()) {
                            this.jj_scanpos = xsp;
                            if (jj_3R_272()) {
                                this.jj_scanpos = xsp;
                                if (jj_3R_273()) {
                                    this.jj_scanpos = xsp;
                                    if (jj_3R_274()) {
                                        this.jj_scanpos = xsp;
                                        if (jj_3R_275()) {
                                            return true;
                                        }
                                        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                                            return false;
                                        }
                                    } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                                        return false;
                                    }
                                } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                                    return false;
                                }
                            } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                                return false;
                            }
                        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                            return false;
                        }
                    } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                        return false;
                    }
                } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                    return false;
                }
            } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_618() {
        if (jj_scan_token(FINAL)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_609() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3R_618()) {
            this.jj_scanpos = xsp;
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_339()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(IDENTIFIER)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        while (true) {
            xsp = this.jj_scanpos;
            if (jj_3R_619()) {
                this.jj_scanpos = xsp;
                break;
            }
            if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        }
        return false;
    }

    final private boolean jj_3R_241() {
        if (jj_scan_token(COMMA)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_97()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_195() {
        if (jj_3R_97()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        Token xsp;
        while (true) {
            xsp = this.jj_scanpos;
            if (jj_3R_241()) {
                this.jj_scanpos = xsp;
                break;
            }
            if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        }
        return false;
    }

    final private boolean jj_3R_593() {
        if (jj_3R_609()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        Token xsp;
        while (true) {
            xsp = this.jj_scanpos;
            if (jj_3R_610()) {
                this.jj_scanpos = xsp;
                break;
            }
            if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        }
        return false;
    }

    final private boolean jj_3R_610() {
        if (jj_scan_token(COMMA)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_609()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_135() {
        if (jj_3R_195()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_574() {
        if (jj_scan_token(LPAREN)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3R_593()) {
            this.jj_scanpos = xsp;
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(RPAREN)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_86() {
        if (jj_scan_token(LPAREN)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3R_135()) {
            this.jj_scanpos = xsp;
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(RPAREN)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_205() {
        if (jj_scan_token(LBRACKET)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_97()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(RBRACKET)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_581() {
        if (jj_3R_175()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_206() {
        if (jj_scan_token(DOT)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(IDENTIFIER)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_554() {
        if (jj_3R_556()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_580() {
        if (jj_3R_131()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_579() {
        if (jj_scan_token(THROWS)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_594()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_578() {
        if (jj_scan_token(LBRACKET)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(RBRACKET)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_570() {
        if (jj_3R_572()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_277()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(IDENTIFIER)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_574()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        Token xsp;
        while (true) {
            xsp = this.jj_scanpos;
            if (jj_3R_578()) {
                this.jj_scanpos = xsp;
                break;
            }
            if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        }
        xsp = this.jj_scanpos;
        if (jj_3R_579()) {
            this.jj_scanpos = xsp;
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        xsp = this.jj_scanpos;
        if (jj_3R_580()) {
            this.jj_scanpos = xsp;
            if (jj_3R_581()) {
                return true;
            }
            if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_153() {
        if (jj_scan_token(NEW)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_278()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_86()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3R_554()) {
            this.jj_scanpos = xsp;
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_597() {
        if (jj_scan_token(ASSIGN)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_87()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_596() {
        if (jj_scan_token(LBRACKET)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(RBRACKET)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_584() {
        if (jj_scan_token(COMMA)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(IDENTIFIER)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        Token xsp;
        while (true) {
            xsp = this.jj_scanpos;
            if (jj_3R_596()) {
                this.jj_scanpos = xsp;
                break;
            }
            if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        }
        xsp = this.jj_scanpos;
        if (jj_3R_597()) {
            this.jj_scanpos = xsp;
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_583() {
        if (jj_scan_token(ASSIGN)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_87()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_582() {
        if (jj_scan_token(LBRACKET)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(RBRACKET)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_571() {
        if (jj_3R_572()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_339()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(IDENTIFIER)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        Token xsp;
        while (true) {
            xsp = this.jj_scanpos;
            if (jj_3R_582()) {
                this.jj_scanpos = xsp;
                break;
            }
            if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        }
        xsp = this.jj_scanpos;
        if (jj_3R_583()) {
            this.jj_scanpos = xsp;
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        while (true) {
            xsp = this.jj_scanpos;
            if (jj_3R_584()) {
                this.jj_scanpos = xsp;
                break;
            }
            if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        }
        if (jj_scan_token(SEMICOLON)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_95() {
        if (jj_scan_token(DOT)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_153()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_94() {
        if (jj_scan_token(DOT)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(THIS)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3_11() {
        if (jj_3R_74()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3_10() {
        if (jj_3R_83()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3_9() {
        if (jj_3R_82()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_566() {
        if (jj_scan_token(SEMICOLON)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_565() {
        if (jj_3R_571()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3_8() {
        if (jj_3R_81()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_150() {
        if (jj_3R_86()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_564() {
        if (jj_3R_570()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_149() {
        if (jj_3R_206()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_148() {
        if (jj_3R_205()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3_27() {
        if (jj_3R_95()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_563() {
        if (jj_3R_569()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3_26() {
        if (jj_3R_94()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_92() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3_26()) {
            this.jj_scanpos = xsp;
            if (jj_3_27()) {
                this.jj_scanpos = xsp;
                if (jj_3R_148()) {
                    this.jj_scanpos = xsp;
                    if (jj_3R_149()) {
                        this.jj_scanpos = xsp;
                        if (jj_3R_150()) {
                            return true;
                        }
                        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                            return false;
                        }
                    } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                        return false;
                    }
                } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                    return false;
                }
            } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_562() {
        if (jj_3R_568()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3_25() {
        if (jj_3R_93()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(DOT)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(CLASS)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_561() {
        if (jj_3R_567()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3_7() {
        if (jj_3R_80()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_587() {
        if (jj_scan_token(IMPLEMENTS)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_594()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_560() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3_7()) {
            this.jj_scanpos = xsp;
            if (jj_3R_561()) {
                this.jj_scanpos = xsp;
                if (jj_3R_562()) {
                    this.jj_scanpos = xsp;
                    if (jj_3R_563()) {
                        this.jj_scanpos = xsp;
                        if (jj_3R_564()) {
                            this.jj_scanpos = xsp;
                            if (jj_3R_565()) {
                                this.jj_scanpos = xsp;
                                if (jj_3R_566()) {
                                    return true;
                                }
                                if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                                    return false;
                                }
                            } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                                return false;
                            }
                        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                            return false;
                        }
                    } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                        return false;
                    }
                } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                    return false;
                }
            } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_194() {
        if (jj_3R_240()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_193() {
        if (jj_3R_239()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_192() {
        if (jj_scan_token(LPAREN)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_97()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(RPAREN)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_191() {
        if (jj_3R_238()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_190() {
        if (jj_3R_237()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_189() {
        if (jj_3R_236()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_188() {
        if (jj_3R_235()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_134() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3R_188()) {
            this.jj_scanpos = xsp;
            if (jj_3R_189()) {
                this.jj_scanpos = xsp;
                if (jj_3R_190()) {
                    this.jj_scanpos = xsp;
                    if (jj_3R_191()) {
                        this.jj_scanpos = xsp;
                        if (jj_3R_192()) {
                            this.jj_scanpos = xsp;
                            if (jj_3R_193()) {
                                this.jj_scanpos = xsp;
                                if (jj_3R_194()) {
                                    return true;
                                }
                                if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                                    return false;
                                }
                            } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                                return false;
                            }
                        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                            return false;
                        }
                    } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                        return false;
                    }
                } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                    return false;
                }
            } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_559() {
        if (jj_3R_560()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_586() {
        if (jj_scan_token(EXTENDS)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_278()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_556() {
        if (jj_scan_token(LBRACE)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        Token xsp;
        while (true) {
            xsp = this.jj_scanpos;
            if (jj_3R_559()) {
                this.jj_scanpos = xsp;
                break;
            }
            if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        }
        if (jj_scan_token(RBRACE)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3_24() {
        if (jj_3R_92()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_85() {
        if (jj_3R_134()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        Token xsp;
        while (true) {
            xsp = this.jj_scanpos;
            if (jj_3_24()) {
                this.jj_scanpos = xsp;
                break;
            }
            if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        }
        return false;
    }

    final private boolean jj_3R_540() {
        if (jj_scan_token(DECREMENT)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_311() {
        if (jj_scan_token(CLASS)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(IDENTIFIER)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3R_586()) {
            this.jj_scanpos = xsp;
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        xsp = this.jj_scanpos;
        if (jj_3R_587()) {
            this.jj_scanpos = xsp;
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_556()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_530() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3R_539()) {
            this.jj_scanpos = xsp;
            if (jj_3R_540()) {
                return true;
            }
            if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_539() {
        if (jj_scan_token(INCREMENT)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_506() {
        if (jj_3R_85()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3R_530()) {
            this.jj_scanpos = xsp;
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_360() {
        if (jj_scan_token(DECREMENT)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_85()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_607() {
        if (jj_scan_token(SYNCHRONIZED)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_606() {
        if (jj_scan_token(STATIC)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_359() {
        if (jj_scan_token(INCREMENT)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_85()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_605() {
        if (jj_scan_token(NATIVE)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3_23() {
        if (jj_scan_token(LPAREN)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_91()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_517() {
        if (jj_scan_token(LPAREN)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_339()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(RPAREN)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_471()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_516() {
        if (jj_scan_token(LPAREN)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_339()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(RPAREN)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_429()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_604() {
        if (jj_scan_token(VOLATILE)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_505() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3R_516()) {
            this.jj_scanpos = xsp;
            if (jj_3R_517()) {
                return true;
            }
            if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3_22() {
        if (jj_3R_90()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_603() {
        if (jj_scan_token(TRANSIENT)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_493() {
        if (jj_3R_506()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_492() {
        if (jj_3R_505()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_491() {
        if (jj_scan_token(BANG)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_429()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_602() {
        if (jj_scan_token(PRIVATE)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_490() {
        if (jj_scan_token(TILDE)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_429()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_471() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3R_490()) {
            this.jj_scanpos = xsp;
            if (jj_3R_491()) {
                this.jj_scanpos = xsp;
                if (jj_3R_492()) {
                    this.jj_scanpos = xsp;
                    if (jj_3R_493()) {
                        return true;
                    }
                    if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                        return false;
                    }
                } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                    return false;
                }
            } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_601() {
        if (jj_scan_token(PROTECTED)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_449() {
        if (jj_3R_471()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_448() {
        if (jj_3R_360()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_447() {
        if (jj_3R_359()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_446() {
        if (jj_scan_token(MINUS)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_429()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_600() {
        if (jj_scan_token(PUBLIC)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_445() {
        if (jj_scan_token(PLUS)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_429()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_429() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3R_445()) {
            this.jj_scanpos = xsp;
            if (jj_3R_446()) {
                this.jj_scanpos = xsp;
                if (jj_3R_447()) {
                    this.jj_scanpos = xsp;
                    if (jj_3R_448()) {
                        this.jj_scanpos = xsp;
                        if (jj_3R_449()) {
                            return true;
                        }
                        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                            return false;
                        }
                    } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                        return false;
                    }
                } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                    return false;
                }
            } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_599() {
        if (jj_scan_token(FINAL)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_480() {
        if (jj_scan_token(REMAINDER)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_429()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_479() {
        if (jj_scan_token(SLASH)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_429()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_585() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3R_598()) {
            this.jj_scanpos = xsp;
            if (jj_3R_599()) {
                this.jj_scanpos = xsp;
                if (jj_3R_600()) {
                    this.jj_scanpos = xsp;
                    if (jj_3R_601()) {
                        this.jj_scanpos = xsp;
                        if (jj_3R_602()) {
                            this.jj_scanpos = xsp;
                            if (jj_3R_603()) {
                                this.jj_scanpos = xsp;
                                if (jj_3R_604()) {
                                    this.jj_scanpos = xsp;
                                    if (jj_3R_605()) {
                                        this.jj_scanpos = xsp;
                                        if (jj_3R_606()) {
                                            this.jj_scanpos = xsp;
                                            if (jj_3R_607()) {
                                                return true;
                                            }
                                            if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                                                return false;
                                            }
                                        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                                            return false;
                                        }
                                    } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                                        return false;
                                    }
                                } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                                    return false;
                                }
                            } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                                return false;
                            }
                        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                            return false;
                        }
                    } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                        return false;
                    }
                } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                    return false;
                }
            } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_598() {
        if (jj_scan_token(ABSTRACT)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_572() {
        Token xsp;
        while (true) {
            xsp = this.jj_scanpos;
            if (jj_3R_585()) {
                this.jj_scanpos = xsp;
                break;
            }
            if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        }
        return false;
    }

    final private boolean jj_3R_458() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3R_478()) {
            this.jj_scanpos = xsp;
            if (jj_3R_479()) {
                this.jj_scanpos = xsp;
                if (jj_3R_480()) {
                    return true;
                }
                if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                    return false;
                }
            } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_478() {
        if (jj_scan_token(STAR)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_429()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_416() {
        if (jj_3R_429()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        Token xsp;
        while (true) {
            xsp = this.jj_scanpos;
            if (jj_3R_458()) {
                this.jj_scanpos = xsp;
                break;
            }
            if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        }
        return false;
    }

    final private boolean jj_3R_567() {
        if (jj_3R_572()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_311()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_460() {
        if (jj_scan_token(MINUS)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_416()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3_59() {
        if (jj_3R_74()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_483() {
        if (jj_scan_token(EXTENDS)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_486()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_436() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3R_459()) {
            this.jj_scanpos = xsp;
            if (jj_3R_460()) {
                return true;
            }
            if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_459() {
        if (jj_scan_token(PLUS)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_416()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3_58() {
        if (jj_3R_82()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_409() {
        if (jj_3R_416()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        Token xsp;
        while (true) {
            xsp = this.jj_scanpos;
            if (jj_3R_436()) {
                this.jj_scanpos = xsp;
                break;
            }
            if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        }
        return false;
    }

    final private boolean jj_3R_611() {
        if (jj_scan_token(COMMA)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_278()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3_57() {
        if (jj_3R_81()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_514() {
        if (jj_3R_444()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_513() {
        if (jj_3R_443()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_594() {
        if (jj_3R_278()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        Token xsp;
        while (true) {
            xsp = this.jj_scanpos;
            if (jj_3R_611()) {
                this.jj_scanpos = xsp;
                break;
            }
            if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        }
        return false;
    }

    final private boolean jj_3R_512() {
        if (jj_3R_441()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_500() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3R_511()) {
            this.jj_scanpos = xsp;
            if (jj_3R_512()) {
                this.jj_scanpos = xsp;
                if (jj_3R_513()) {
                    this.jj_scanpos = xsp;
                    if (jj_3R_514()) {
                        return true;
                    }
                    if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                        return false;
                    }
                } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                    return false;
                }
            } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_511() {
        if (jj_3R_440()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_484() {
        if (jj_3R_500()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_129() {
        if (jj_scan_token(PUBLIC)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_439() {
        if (jj_scan_token(RIGHT_UNSIGNED_SHIFT)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_409()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_332() {
        if (jj_scan_token(INTERFACE)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(IDENTIFIER)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3R_483()) {
            this.jj_scanpos = xsp;
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(LBRACE)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        while (true) {
            xsp = this.jj_scanpos;
            if (jj_3R_484()) {
                this.jj_scanpos = xsp;
                break;
            }
            if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        }
        if (jj_scan_token(RBRACE)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_407() {
        if (jj_scan_token(COMMA)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3_6() {
        if (jj_scan_token(DOT)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(IDENTIFIER)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_128() {
        if (jj_scan_token(FINAL)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_438() {
        if (jj_scan_token(RIGHT_SIGNED_SHIFT)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_409()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_481() {
        if (jj_scan_token(EXTENDS)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_98()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_441() {
        if (jj_3R_109()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_332()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_278() {
        if (jj_scan_token(IDENTIFIER)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        Token xsp;
        while (true) {
            xsp = this.jj_scanpos;
            if (jj_3_6()) {
                this.jj_scanpos = xsp;
                break;
            }
            if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        }
        return false;
    }

    final private boolean jj_3R_419() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3R_437()) {
            this.jj_scanpos = xsp;
            if (jj_3R_438()) {
                this.jj_scanpos = xsp;
                if (jj_3R_439()) {
                    return true;
                }
                if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                    return false;
                }
            } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_437() {
        if (jj_scan_token(LEFT_SHIFT)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_409()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_400() {
        if (jj_3R_409()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        Token xsp;
        while (true) {
            xsp = this.jj_scanpos;
            if (jj_3R_419()) {
                this.jj_scanpos = xsp;
                break;
            }
            if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        }
        return false;
    }

    final private boolean jj_3R_82() {
        if (jj_3R_109()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(INTERFACE)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_79() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3R_127()) {
            this.jj_scanpos = xsp;
            if (jj_3R_128()) {
                this.jj_scanpos = xsp;
                if (jj_3R_129()) {
                    return true;
                }
                if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                    return false;
                }
            } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_127() {
        if (jj_scan_token(ABSTRACT)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3_5() {
        Token xsp;
        while (true) {
            xsp = this.jj_scanpos;
            if (jj_3R_79()) {
                this.jj_scanpos = xsp;
                break;
            }
            if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        }
        if (jj_scan_token(CLASS)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3_54() {
        if (jj_scan_token(LBRACKET)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(RBRACKET)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_173() {
        if (jj_3R_107()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_482() {
        if (jj_scan_token(IMPLEMENTS)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_486()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_331() {
        if (jj_scan_token(CLASS)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(IDENTIFIER)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3R_481()) {
            this.jj_scanpos = xsp;
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        xsp = this.jj_scanpos;
        if (jj_3R_482()) {
            this.jj_scanpos = xsp;
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_399()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_423() {
        if (jj_scan_token(GREATER_OR_EQUAL)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_400()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_440() {
        if (jj_3R_109()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_331()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_422() {
        if (jj_scan_token(LESS_OR_EQUAL)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_400()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_81() {
        if (jj_3R_109()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(CLASS)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_421() {
        if (jj_scan_token(GREATER_THAN)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_400()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_403() {
        if (jj_scan_token(INSTANCEOF)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_339()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_172() {
        if (jj_3R_218()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_108() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3R_172()) {
            this.jj_scanpos = xsp;
            if (jj_3R_173()) {
                return true;
            }
            if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_414() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3R_420()) {
            this.jj_scanpos = xsp;
            if (jj_3R_421()) {
                this.jj_scanpos = xsp;
                if (jj_3R_422()) {
                    this.jj_scanpos = xsp;
                    if (jj_3R_423()) {
                        return true;
                    }
                    if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                        return false;
                    }
                } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                    return false;
                }
            } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_420() {
        if (jj_scan_token(LESS)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_400()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3_56() {
        if (jj_scan_token(COMMA)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_108()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_392() {
        if (jj_3R_400()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        Token xsp;
        while (true) {
            xsp = this.jj_scanpos;
            if (jj_3R_414()) {
                this.jj_scanpos = xsp;
                break;
            }
            if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        }
        return false;
    }

    final private boolean jj_3R_406() {
        if (jj_3R_108()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        Token xsp;
        while (true) {
            xsp = this.jj_scanpos;
            if (jj_3_56()) {
                this.jj_scanpos = xsp;
                break;
            }
            if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        }
        return false;
    }

    final private boolean jj_3R_218() {
        if (jj_scan_token(LBRACE)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3R_406()) {
            this.jj_scanpos = xsp;
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        xsp = this.jj_scanpos;
        if (jj_3R_407()) {
            this.jj_scanpos = xsp;
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(RBRACE)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_398() {
        if (jj_scan_token(LBRACKET)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(RBRACKET)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3_53() {
        if (jj_scan_token(LBRACKET)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_107()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(RBRACKET)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_390() {
        Token xsp;
        if (jj_3R_398()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        while (true) {
            xsp = this.jj_scanpos;
            if (jj_3R_398()) {
                this.jj_scanpos = xsp;
                break;
            }
            if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        }
        if (jj_3R_218()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3_55() {
        Token xsp;
        if (jj_3_53()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        while (true) {
            xsp = this.jj_scanpos;
            if (jj_3_53()) {
                this.jj_scanpos = xsp;
                break;
            }
            if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        }
        while (true) {
            xsp = this.jj_scanpos;
            if (jj_3_54()) {
                this.jj_scanpos = xsp;
                break;
            }
            if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        }
        return false;
    }

    final private boolean jj_3R_380() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3_55()) {
            this.jj_scanpos = xsp;
            if (jj_3R_390()) {
                return true;
            }
            if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_529() {
        if (jj_scan_token(FINALLY)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_170()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_383() {
        if (jj_3R_392()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3R_403()) {
            this.jj_scanpos = xsp;
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_528() {
        if (jj_scan_token(CATCH)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(LPAREN)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_501()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(RPAREN)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_170()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_377() {
        if (jj_scan_token(TRY)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_170()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        Token xsp;
        while (true) {
            xsp = this.jj_scanpos;
            if (jj_3R_528()) {
                this.jj_scanpos = xsp;
                break;
            }
            if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        }
        xsp = this.jj_scanpos;
        if (jj_3R_529()) {
            this.jj_scanpos = xsp;
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_531() {
        if (jj_scan_token(COMMA)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_469()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_342() {
        if (jj_scan_token(FINAL)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_329() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3R_342()) {
            this.jj_scanpos = xsp;
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_76()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_469()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        while (true) {
            xsp = this.jj_scanpos;
            if (jj_3R_531()) {
                this.jj_scanpos = xsp;
                break;
            }
            if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        }
        return false;
    }

    final private boolean jj_3R_405() {
        if (jj_scan_token(NOT_EQUAL)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_383()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_376() {
        if (jj_scan_token(SYNCHRONIZED)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(LPAREN)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_107()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(RPAREN)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_170()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_397() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3R_404()) {
            this.jj_scanpos = xsp;
            if (jj_3R_405()) {
                return true;
            }
            if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_404() {
        if (jj_scan_token(EQUAL)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_383()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_364() {
        if (jj_3R_383()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        Token xsp;
        while (true) {
            xsp = this.jj_scanpos;
            if (jj_3R_397()) {
                this.jj_scanpos = xsp;
                break;
            }
            if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        }
        return false;
    }

    final private boolean jj_3R_527() {
        if (jj_3R_107()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_375() {
        if (jj_scan_token(THROW)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_107()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(SEMICOLON)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_546() {
        if (jj_scan_token(COMMA)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_366()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_126() {
        if (jj_3R_186()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_526() {
        if (jj_scan_token(IDENTIFIER)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_125() {
        if (jj_3R_185()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_124() {
        if (jj_3R_184()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_123() {
        if (jj_3R_183()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_122() {
        if (jj_3R_182()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_374() {
        if (jj_scan_token(RETURN)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3R_527()) {
            this.jj_scanpos = xsp;
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(SEMICOLON)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_121() {
        if (jj_3R_181()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_120() {
        if (jj_3R_180()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_119() {
        if (jj_3R_179()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_118() {
        if (jj_3R_178()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_117() {
        if (jj_3R_177()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_116() {
        if (jj_3R_176()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_389() {
        if (jj_scan_token(BITWISE_AND)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_364()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_115() {
        if (jj_3R_131()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_114() {
        if (jj_3R_97()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(SEMICOLON)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_525() {
        if (jj_scan_token(IDENTIFIER)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_113() {
        if (jj_3R_175()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_340() {
        if (jj_3R_364()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        Token xsp;
        while (true) {
            xsp = this.jj_scanpos;
            if (jj_3R_389()) {
                this.jj_scanpos = xsp;
                break;
            }
            if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        }
        return false;
    }

    final private boolean jj_3R_373() {
        if (jj_scan_token(CONTINUE)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3R_526()) {
            this.jj_scanpos = xsp;
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(SEMICOLON)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3_4() {
        if (jj_3R_78()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_77() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3_4()) {
            this.jj_scanpos = xsp;
            if (jj_3R_113()) {
                this.jj_scanpos = xsp;
                if (jj_3R_114()) {
                    this.jj_scanpos = xsp;
                    if (jj_3R_115()) {
                        this.jj_scanpos = xsp;
                        if (jj_3R_116()) {
                            this.jj_scanpos = xsp;
                            if (jj_3R_117()) {
                                this.jj_scanpos = xsp;
                                if (jj_3R_118()) {
                                    this.jj_scanpos = xsp;
                                    if (jj_3R_119()) {
                                        this.jj_scanpos = xsp;
                                        if (jj_3R_120()) {
                                            this.jj_scanpos = xsp;
                                            if (jj_3R_121()) {
                                                this.jj_scanpos = xsp;
                                                if (jj_3R_122()) {
                                                    this.jj_scanpos = xsp;
                                                    if (jj_3R_123()) {
                                                        this.jj_scanpos = xsp;
                                                        if (jj_3R_124()) {
                                                            this.jj_scanpos = xsp;
                                                            if (jj_3R_125()) {
                                                                this.jj_scanpos = xsp;
                                                                if (jj_3R_126()) {
                                                                    return true;
                                                                }
                                                                if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                                                                    return false;
                                                                }
                                                            } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                                                                return false;
                                                            }
                                                        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                                                            return false;
                                                        }
                                                    } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                                                        return false;
                                                    }
                                                } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                                                    return false;
                                                }
                                            } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                                                return false;
                                            }
                                        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                                            return false;
                                        }
                                    } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                                        return false;
                                    }
                                } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                                    return false;
                                }
                            } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                                return false;
                            }
                        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                            return false;
                        }
                    } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                        return false;
                    }
                } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                    return false;
                }
            } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_372() {
        if (jj_scan_token(BREAK)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3R_525()) {
            this.jj_scanpos = xsp;
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(SEMICOLON)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_106() {
        if (jj_scan_token(FINAL)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_537() {
        if (jj_3R_366()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        Token xsp;
        while (true) {
            xsp = this.jj_scanpos;
            if (jj_3R_546()) {
                this.jj_scanpos = xsp;
                break;
            }
            if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        }
        return false;
    }

    final private boolean jj_3_52() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3R_106()) {
            this.jj_scanpos = xsp;
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_76()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(IDENTIFIER)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_379() {
        if (jj_scan_token(XOR)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_340()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_75() {
        if (jj_scan_token(FINAL)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_315() {
        if (jj_3R_340()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        Token xsp;
        while (true) {
            xsp = this.jj_scanpos;
            if (jj_3R_379()) {
                this.jj_scanpos = xsp;
                break;
            }
            if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        }
        return false;
    }

    final private boolean jj_3_2() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3R_75()) {
            this.jj_scanpos = xsp;
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_76()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(IDENTIFIER)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3_1() {
        if (jj_3R_74()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_545() {
        if (jj_3R_537()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_524() {
        if (jj_3R_537()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3_3() {
        if (jj_3R_77()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_523() {
        if (jj_3R_107()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_522() {
        if (jj_3R_536()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_536() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3R_544()) {
            this.jj_scanpos = xsp;
            if (jj_3R_545()) {
                return true;
            }
            if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_544() {
        if (jj_3R_329()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_371() {
        if (jj_scan_token(FOR)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(LPAREN)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3R_522()) {
            this.jj_scanpos = xsp;
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(SEMICOLON)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        xsp = this.jj_scanpos;
        if (jj_3R_523()) {
            this.jj_scanpos = xsp;
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(SEMICOLON)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        xsp = this.jj_scanpos;
        if (jj_3R_524()) {
            this.jj_scanpos = xsp;
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(RPAREN)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_330()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_521() {
        if (jj_scan_token(ELSE)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_330()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_358() {
        if (jj_scan_token(BITWISE_OR)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_315()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_534() {
        if (jj_scan_token(_DEFAULT)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_288() {
        if (jj_3R_315()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        Token xsp;
        while (true) {
            xsp = this.jj_scanpos;
            if (jj_3R_358()) {
                this.jj_scanpos = xsp;
                break;
            }
            if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        }
        return false;
    }

    final private boolean jj_3R_370() {
        if (jj_scan_token(DO)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_330()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(WHILE)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(LPAREN)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_107()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(RPAREN)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(SEMICOLON)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_369() {
        if (jj_scan_token(WHILE)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(LPAREN)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_107()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(RPAREN)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_330()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_334() {
        if (jj_scan_token(CONDITIONAL_AND)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_288()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_243() {
        if (jj_3R_288()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        Token xsp;
        while (true) {
            xsp = this.jj_scanpos;
            if (jj_3R_334()) {
                this.jj_scanpos = xsp;
                break;
            }
            if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        }
        return false;
    }

    final private boolean jj_3R_368() {
        if (jj_scan_token(IF)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(LPAREN)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_107()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(RPAREN)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_330()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3R_521()) {
            this.jj_scanpos = xsp;
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_535() {
        if (jj_3R_245()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_533() {
        if (jj_scan_token(CASE)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_107()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_520() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3R_533()) {
            this.jj_scanpos = xsp;
            if (jj_3R_534()) {
                return true;
            }
            if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(COLON)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        while (true) {
            xsp = this.jj_scanpos;
            if (jj_3R_535()) {
                this.jj_scanpos = xsp;
                break;
            }
            if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        }
        return false;
    }

    final private boolean jj_3R_367() {
        if (jj_scan_token(SWITCH)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(LPAREN)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_107()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(RPAREN)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(LBRACE)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        Token xsp;
        while (true) {
            xsp = this.jj_scanpos;
            if (jj_3R_520()) {
                this.jj_scanpos = xsp;
                break;
            }
            if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        }
        if (jj_scan_token(RBRACE)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_296() {
        if (jj_scan_token(CONDITIONAL_OR)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_243()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_543() {
        if (jj_3R_290()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_107()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_542() {
        if (jj_scan_token(DECREMENT)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_532() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3R_541()) {
            this.jj_scanpos = xsp;
            if (jj_3R_542()) {
                this.jj_scanpos = xsp;
                if (jj_3R_543()) {
                    return true;
                }
                if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                    return false;
                }
            } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_541() {
        if (jj_scan_token(INCREMENT)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_207() {
        if (jj_3R_243()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        Token xsp;
        while (true) {
            xsp = this.jj_scanpos;
            if (jj_3R_296()) {
                this.jj_scanpos = xsp;
                break;
            }
            if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        }
        return false;
    }

    final private boolean jj_3R_387() {
        if (jj_3R_99()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3R_532()) {
            this.jj_scanpos = xsp;
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_386() {
        if (jj_3R_395()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_366() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3R_385()) {
            this.jj_scanpos = xsp;
            if (jj_3R_386()) {
                this.jj_scanpos = xsp;
                if (jj_3R_387()) {
                    return true;
                }
                if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                    return false;
                }
            } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_385() {
        if (jj_3R_394()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_105() {
        if (jj_scan_token(IDENTIFIER)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(COLON)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_330()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_247() {
        if (jj_scan_token(HOOK)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_97()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(COLON)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_162()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_162() {
        if (jj_3R_207()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3R_247()) {
            this.jj_scanpos = xsp;
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_356() {
        if (jj_3R_377()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_355() {
        if (jj_3R_376()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_354() {
        if (jj_3R_375()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_353() {
        if (jj_3R_374()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_352() {
        if (jj_3R_373()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_351() {
        if (jj_3R_372()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_350() {
        if (jj_3R_371()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_349() {
        if (jj_3R_370()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_348() {
        if (jj_3R_369()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_347() {
        if (jj_3R_368()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_346() {
        if (jj_3R_367()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_345() {
        if (jj_3R_366()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(SEMICOLON)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_344() {
        if (jj_scan_token(SEMICOLON)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_308() {
        if (jj_scan_token(OR_ASSIGN)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_97()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_343() {
        if (jj_3R_170()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3_51() {
        if (jj_3R_105()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_330() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3_51()) {
            this.jj_scanpos = xsp;
            if (jj_3R_343()) {
                this.jj_scanpos = xsp;
                if (jj_3R_344()) {
                    this.jj_scanpos = xsp;
                    if (jj_3R_345()) {
                        this.jj_scanpos = xsp;
                        if (jj_3R_346()) {
                            this.jj_scanpos = xsp;
                            if (jj_3R_347()) {
                                this.jj_scanpos = xsp;
                                if (jj_3R_348()) {
                                    this.jj_scanpos = xsp;
                                    if (jj_3R_349()) {
                                        this.jj_scanpos = xsp;
                                        if (jj_3R_350()) {
                                            this.jj_scanpos = xsp;
                                            if (jj_3R_351()) {
                                                this.jj_scanpos = xsp;
                                                if (jj_3R_352()) {
                                                    this.jj_scanpos = xsp;
                                                    if (jj_3R_353()) {
                                                        this.jj_scanpos = xsp;
                                                        if (jj_3R_354()) {
                                                            this.jj_scanpos = xsp;
                                                            if (jj_3R_355()) {
                                                                this.jj_scanpos = xsp;
                                                                if (jj_3R_356()) {
                                                                    return true;
                                                                }
                                                                if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                                                                    return false;
                                                                }
                                                            } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                                                                return false;
                                                            }
                                                        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                                                            return false;
                                                        }
                                                    } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                                                        return false;
                                                    }
                                                } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                                                    return false;
                                                }
                                            } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                                                return false;
                                            }
                                        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                                            return false;
                                        }
                                    } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                                        return false;
                                    }
                                } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                                    return false;
                                }
                            } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                                return false;
                            }
                        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                            return false;
                        }
                    } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                        return false;
                    }
                } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                    return false;
                }
            } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_307() {
        if (jj_scan_token(XOR_ASSIGN)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_97()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_104() {
        if (jj_scan_token(FINAL)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3_50() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3R_104()) {
            this.jj_scanpos = xsp;
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_76()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(IDENTIFIER)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_294() {
        if (jj_3R_332()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_489() {
        if (jj_scan_token(ASSIGN)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_108()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_306() {
        if (jj_scan_token(AND_ASSIGN)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_97()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_293() {
        if (jj_3R_331()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_292() {
        if (jj_3R_330()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_291() {
        if (jj_3R_329()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(SEMICOLON)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_245() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3R_291()) {
            this.jj_scanpos = xsp;
            if (jj_3R_292()) {
                this.jj_scanpos = xsp;
                if (jj_3R_293()) {
                    this.jj_scanpos = xsp;
                    if (jj_3R_294()) {
                        return true;
                    }
                    if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                        return false;
                    }
                } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                    return false;
                }
            } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_305() {
        if (jj_scan_token(RIGHT_UNSIGNED_SHIFTASSIGN)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_97()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_216() {
        if (jj_3R_245()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_504() {
        if (jj_scan_token(LBRACKET)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(RBRACKET)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_170() {
        if (jj_scan_token(LBRACE)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        Token xsp;
        while (true) {
            xsp = this.jj_scanpos;
            if (jj_3R_216()) {
                this.jj_scanpos = xsp;
                break;
            }
            if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        }
        if (jj_scan_token(RBRACE)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_304() {
        if (jj_scan_token(RIGHT_SIGNED_SHIFT_ASSIGN)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_97()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_303() {
        if (jj_scan_token(LEFT_SHIFT_ASSIGN)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_97()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_488() {
        if (jj_scan_token(IDENTIFIER)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        Token xsp;
        while (true) {
            xsp = this.jj_scanpos;
            if (jj_3R_504()) {
                this.jj_scanpos = xsp;
                break;
            }
            if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        }
        return false;
    }

    final private boolean jj_3R_502() {
        if (jj_scan_token(COMMA)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_501()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_487() {
        if (jj_scan_token(LBRACKET)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(RBRACKET)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_302() {
        if (jj_scan_token(MINUS_ASSIGN)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_97()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_469() {
        if (jj_3R_488()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3R_489()) {
            this.jj_scanpos = xsp;
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_301() {
        if (jj_scan_token(PLUS_ASSIGN)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_97()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_466() {
        if (jj_scan_token(THROWS)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_486()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_470() {
        if (jj_scan_token(COMMA)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_469()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_444() {
        if (jj_3R_109()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_76()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_469()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        Token xsp;
        while (true) {
            xsp = this.jj_scanpos;
            if (jj_3R_470()) {
                this.jj_scanpos = xsp;
                break;
            }
            if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        }
        if (jj_scan_token(SEMICOLON)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_300() {
        if (jj_scan_token(REMAINDER_ASSIGN)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_97()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_515() {
        if (jj_scan_token(FINAL)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_299() {
        if (jj_scan_token(SLASH_ASSIGN)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_97()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_229() {
        if (jj_3R_248()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_501() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3R_515()) {
            this.jj_scanpos = xsp;
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_76()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_488()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_485() {
        if (jj_3R_501()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        Token xsp;
        while (true) {
            xsp = this.jj_scanpos;
            if (jj_3R_502()) {
                this.jj_scanpos = xsp;
                break;
            }
            if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        }
        return false;
    }

    final private boolean jj_3R_298() {
        if (jj_scan_token(STAR_ASSIGN)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_97()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_461() {
        if (jj_scan_token(LPAREN)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3R_485()) {
            this.jj_scanpos = xsp;
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(RPAREN)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_503() {
        if (jj_scan_token(COMMA)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_98()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_228() {
        if (jj_scan_token(VOLATILE)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_297() {
        if (jj_scan_token(ASSIGN)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_97()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_248() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3R_297()) {
            this.jj_scanpos = xsp;
            if (jj_3R_298()) {
                this.jj_scanpos = xsp;
                if (jj_3R_299()) {
                    this.jj_scanpos = xsp;
                    if (jj_3R_300()) {
                        this.jj_scanpos = xsp;
                        if (jj_3R_301()) {
                            this.jj_scanpos = xsp;
                            if (jj_3R_302()) {
                                this.jj_scanpos = xsp;
                                if (jj_3R_303()) {
                                    this.jj_scanpos = xsp;
                                    if (jj_3R_304()) {
                                        this.jj_scanpos = xsp;
                                        if (jj_3R_305()) {
                                            this.jj_scanpos = xsp;
                                            if (jj_3R_306()) {
                                                this.jj_scanpos = xsp;
                                                if (jj_3R_307()) {
                                                    this.jj_scanpos = xsp;
                                                    if (jj_3R_308()) {
                                                        return true;
                                                    }
                                                    if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                                                        return false;
                                                    }
                                                } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                                                    return false;
                                                }
                                            } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                                                return false;
                                            }
                                        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                                            return false;
                                        }
                                    } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                                        return false;
                                    }
                                } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                                    return false;
                                }
                            } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                                return false;
                            }
                        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                            return false;
                        }
                    } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                        return false;
                    }
                } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                    return false;
                }
            } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_468() {
        if (jj_scan_token(SEMICOLON)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_462() {
        if (jj_scan_token(THROWS)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_486()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_465() {
        if (jj_scan_token(IDENTIFIER)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_461()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        Token xsp;
        while (true) {
            xsp = this.jj_scanpos;
            if (jj_3R_487()) {
                this.jj_scanpos = xsp;
                break;
            }
            if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        }
        return false;
    }

    final private boolean jj_3R_227() {
        if (jj_scan_token(TRANSIENT)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_486() {
        if (jj_3R_98()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        Token xsp;
        while (true) {
            xsp = this.jj_scanpos;
            if (jj_3R_503()) {
                this.jj_scanpos = xsp;
                break;
            }
            if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        }
        return false;
    }

    final private boolean jj_3R_97() {
        if (jj_3R_162()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3R_229()) {
            this.jj_scanpos = xsp;
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_467() {
        if (jj_3R_170()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_443() {
        if (jj_3R_109()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_93()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_465()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3R_466()) {
            this.jj_scanpos = xsp;
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        xsp = this.jj_scanpos;
        if (jj_3R_467()) {
            this.jj_scanpos = xsp;
            if (jj_3R_468()) {
                return true;
            }
            if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_226() {
        if (jj_scan_token(SYNCHRONIZED)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3_49() {
        if (jj_3R_84()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_74() {
        if (jj_3R_109()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_93()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(IDENTIFIER)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(LPAREN)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_640() {
        if (jj_3R_248()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_221() {
        if (jj_scan_token(PRIVATE)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_464() {
        if (jj_3R_330()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_225() {
        if (jj_scan_token(NATIVE)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_463() {
        if (jj_3R_84()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_639() {
        if (jj_scan_token(DECREMENT)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_442() {
        if (jj_3R_109()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(IDENTIFIER)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_461()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3R_462()) {
            this.jj_scanpos = xsp;
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(LBRACE)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        xsp = this.jj_scanpos;
        if (jj_3R_463()) {
            this.jj_scanpos = xsp;
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        while (true) {
            xsp = this.jj_scanpos;
            if (jj_3R_464()) {
                this.jj_scanpos = xsp;
                break;
            }
            if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        }
        if (jj_scan_token(RBRACE)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_638() {
        if (jj_scan_token(INCREMENT)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_632() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3R_638()) {
            this.jj_scanpos = xsp;
            if (jj_3R_639()) {
                this.jj_scanpos = xsp;
                if (jj_3R_640()) {
                    return true;
                }
                if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                    return false;
                }
            } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_224() {
        if (jj_scan_token(FINAL)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_220() {
        if (jj_scan_token(PROTECTED)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_337() {
        if (jj_3R_85()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3R_632()) {
            this.jj_scanpos = xsp;
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_336() {
        if (jj_3R_360()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_335() {
        if (jj_3R_359()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_83() {
        if (jj_3R_109()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(IDENTIFIER)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(LPAREN)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_309() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3R_335()) {
            this.jj_scanpos = xsp;
            if (jj_3R_336()) {
                this.jj_scanpos = xsp;
                if (jj_3R_337()) {
                    return true;
                }
                if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                    return false;
                }
            } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_223() {
        if (jj_scan_token(ABSTRACT)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_222() {
        if (jj_scan_token(STATIC)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_219() {
        if (jj_scan_token(PUBLIC)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_174() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3R_219()) {
            this.jj_scanpos = xsp;
            if (jj_3R_220()) {
                this.jj_scanpos = xsp;
                if (jj_3R_221()) {
                    this.jj_scanpos = xsp;
                    if (jj_3R_222()) {
                        this.jj_scanpos = xsp;
                        if (jj_3R_223()) {
                            this.jj_scanpos = xsp;
                            if (jj_3R_224()) {
                                this.jj_scanpos = xsp;
                                if (jj_3R_225()) {
                                    this.jj_scanpos = xsp;
                                    if (jj_3R_226()) {
                                        this.jj_scanpos = xsp;
                                        if (jj_3R_227()) {
                                            this.jj_scanpos = xsp;
                                            if (jj_3R_228()) {
                                                return true;
                                            }
                                            if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                                                return false;
                                            }
                                        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                                            return false;
                                        }
                                    } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                                        return false;
                                    }
                                } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                                    return false;
                                }
                            } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                                return false;
                            }
                        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                            return false;
                        }
                    } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                        return false;
                    }
                } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                    return false;
                }
            } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_109() {
        Token xsp;
        while (true) {
            xsp = this.jj_scanpos;
            if (jj_3R_174()) {
                this.jj_scanpos = xsp;
                break;
            }
            if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        }
        return false;
    }

    final private boolean jj_3R_169() {
        if (jj_scan_token(STATIC)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_103() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3R_169()) {
            this.jj_scanpos = xsp;
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_170()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3_48() {
        if (jj_3R_74()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3_47() {
        if (jj_3R_83()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3_46() {
        if (jj_3R_82()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_428() {
        if (jj_3R_444()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_631() {
        if (jj_scan_token(FINALLY)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_131()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3_45() {
        if (jj_3R_81()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_427() {
        if (jj_3R_443()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_391() {
        if (jj_3R_399()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_426() {
        if (jj_3R_442()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_425() {
        if (jj_3R_441()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_630() {
        if (jj_scan_token(CATCH)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(LPAREN)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_609()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(RPAREN)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_131()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_424() {
        if (jj_3R_440()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_186() {
        if (jj_scan_token(TRY)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_131()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        Token xsp;
        while (true) {
            xsp = this.jj_scanpos;
            if (jj_3R_630()) {
                this.jj_scanpos = xsp;
                break;
            }
            if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        }
        xsp = this.jj_scanpos;
        if (jj_3R_631()) {
            this.jj_scanpos = xsp;
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3_44() {
        if (jj_3R_103()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_415() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3_44()) {
            this.jj_scanpos = xsp;
            if (jj_3R_424()) {
                this.jj_scanpos = xsp;
                if (jj_3R_425()) {
                    this.jj_scanpos = xsp;
                    if (jj_3R_426()) {
                        this.jj_scanpos = xsp;
                        if (jj_3R_427()) {
                            this.jj_scanpos = xsp;
                            if (jj_3R_428()) {
                                return true;
                            }
                            if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                                return false;
                            }
                        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                            return false;
                        }
                    } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                        return false;
                    }
                } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                    return false;
                }
            } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_408() {
        if (jj_3R_415()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_399() {
        if (jj_scan_token(LBRACE)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        Token xsp;
        while (true) {
            xsp = this.jj_scanpos;
            if (jj_3R_408()) {
                this.jj_scanpos = xsp;
                break;
            }
            if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        }
        if (jj_scan_token(RBRACE)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_382() {
        if (jj_3R_100()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3R_391()) {
            this.jj_scanpos = xsp;
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_381() {
        if (jj_3R_380()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_168() {
        if (jj_scan_token(NEW)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_98()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3R_381()) {
            this.jj_scanpos = xsp;
            if (jj_3R_382()) {
                return true;
            }
            if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3_43() {
        if (jj_scan_token(NEW)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_91()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_380()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_102() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3_43()) {
            this.jj_scanpos = xsp;
            if (jj_3R_168()) {
                return true;
            }
            if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_185() {
        if (jj_scan_token(SYNCHRONIZED)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(LPAREN)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_97()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(RPAREN)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_131()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_167() {
        if (jj_3R_100()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_166() {
        if (jj_scan_token(DOT)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(IDENTIFIER)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_165() {
        if (jj_scan_token(LBRACKET)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_107()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(RBRACKET)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3_42() {
        if (jj_scan_token(DOT)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_102()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3_41() {
        if (jj_scan_token(DOT)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(THIS)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_101() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3_41()) {
            this.jj_scanpos = xsp;
            if (jj_3_42()) {
                this.jj_scanpos = xsp;
                if (jj_3R_165()) {
                    this.jj_scanpos = xsp;
                    if (jj_3R_166()) {
                        this.jj_scanpos = xsp;
                        if (jj_3R_167()) {
                            return true;
                        }
                        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                            return false;
                        }
                    } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                        return false;
                    }
                } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                    return false;
                }
            } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3_40() {
        if (jj_3R_93()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(DOT)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(CLASS)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3_39() {
        if (jj_3R_101()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_184() {
        if (jj_scan_token(THROW)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_97()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(SEMICOLON)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_214() {
        if (jj_3R_98()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_233() {
        if (jj_3R_97()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_213() {
        if (jj_3R_93()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(DOT)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(CLASS)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_212() {
        if (jj_3R_102()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_548() {
        if (jj_scan_token(DECREMENT)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_211() {
        if (jj_scan_token(LPAREN)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_107()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(RPAREN)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_210() {
        if (jj_scan_token(SUPER)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(DOT)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(IDENTIFIER)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_209() {
        if (jj_scan_token(THIS)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_538() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3R_547()) {
            this.jj_scanpos = xsp;
            if (jj_3R_548()) {
                return true;
            }
            if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_547() {
        if (jj_scan_token(INCREMENT)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_208() {
        if (jj_3R_242()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_163() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3R_208()) {
            this.jj_scanpos = xsp;
            if (jj_3R_209()) {
                this.jj_scanpos = xsp;
                if (jj_3R_210()) {
                    this.jj_scanpos = xsp;
                    if (jj_3R_211()) {
                        this.jj_scanpos = xsp;
                        if (jj_3R_212()) {
                            this.jj_scanpos = xsp;
                            if (jj_3R_213()) {
                                this.jj_scanpos = xsp;
                                if (jj_3R_214()) {
                                    return true;
                                }
                                if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                                    return false;
                                }
                            } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                                return false;
                            }
                        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                            return false;
                        }
                    } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                        return false;
                    }
                } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                    return false;
                }
            } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_183() {
        if (jj_scan_token(RETURN)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3R_233()) {
            this.jj_scanpos = xsp;
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(SEMICOLON)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_232() {
        if (jj_scan_token(IDENTIFIER)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_99() {
        if (jj_3R_163()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        Token xsp;
        while (true) {
            xsp = this.jj_scanpos;
            if (jj_3_39()) {
                this.jj_scanpos = xsp;
                break;
            }
            if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        }
        return false;
    }

    final private boolean jj_3_38() {
        if (jj_scan_token(LPAREN)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_91()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_519() {
        if (jj_scan_token(LPAREN)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_76()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(RPAREN)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_477()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_182() {
        if (jj_scan_token(CONTINUE)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3R_232()) {
            this.jj_scanpos = xsp;
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(SEMICOLON)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_509() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3R_518()) {
            this.jj_scanpos = xsp;
            if (jj_3R_519()) {
                return true;
            }
            if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_518() {
        if (jj_scan_token(LPAREN)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_76()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(RPAREN)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_435()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_231() {
        if (jj_scan_token(IDENTIFIER)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3_37() {
        if (jj_3R_90()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_510() {
        if (jj_3R_99()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3R_538()) {
            this.jj_scanpos = xsp;
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_508() {
        if (jj_scan_token(BANG)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_499() {
        if (jj_3R_510()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_181() {
        if (jj_scan_token(BREAK)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3R_231()) {
            this.jj_scanpos = xsp;
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(SEMICOLON)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_498() {
        if (jj_3R_509()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_507() {
        if (jj_scan_token(TILDE)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_496() {
        if (jj_scan_token(REMAINDER)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_477() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3R_497()) {
            this.jj_scanpos = xsp;
            if (jj_3R_498()) {
                this.jj_scanpos = xsp;
                if (jj_3R_499()) {
                    return true;
                }
                if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                    return false;
                }
            } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_497() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3R_507()) {
            this.jj_scanpos = xsp;
            if (jj_3R_508()) {
                return true;
            }
            if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_435()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_495() {
        if (jj_scan_token(SLASH)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_395() {
        if (jj_scan_token(DECREMENT)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_99()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_494() {
        if (jj_scan_token(STAR)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_472() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3R_494()) {
            this.jj_scanpos = xsp;
            if (jj_3R_495()) {
                this.jj_scanpos = xsp;
                if (jj_3R_496()) {
                    return true;
                }
                if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                    return false;
                }
            } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_435()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_643() {
        if (jj_scan_token(COMMA)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_309()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_394() {
        if (jj_scan_token(INCREMENT)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_99()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_637() {
        if (jj_3R_309()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        Token xsp;
        while (true) {
            xsp = this.jj_scanpos;
            if (jj_3R_643()) {
                this.jj_scanpos = xsp;
                break;
            }
            if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        }
        return false;
    }

    final private boolean jj_3R_89() {
        if (jj_scan_token(FINAL)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_476() {
        if (jj_scan_token(MINUS)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3_21() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3R_89()) {
            this.jj_scanpos = xsp;
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_76()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(IDENTIFIER)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_457() {
        if (jj_3R_477()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_456() {
        if (jj_3R_395()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_455() {
        if (jj_3R_394()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_475() {
        if (jj_scan_token(PLUS)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_435() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3R_454()) {
            this.jj_scanpos = xsp;
            if (jj_3R_455()) {
                this.jj_scanpos = xsp;
                if (jj_3R_456()) {
                    this.jj_scanpos = xsp;
                    if (jj_3R_457()) {
                        return true;
                    }
                    if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                        return false;
                    }
                } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                    return false;
                }
            } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_454() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3R_475()) {
            this.jj_scanpos = xsp;
            if (jj_3R_476()) {
                return true;
            }
            if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_435()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_642() {
        if (jj_3R_637()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_474() {
        if (jj_scan_token(MINUS)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_641() {
        if (jj_3R_310()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_453() {
        if (jj_scan_token(RIGHT_UNSIGNED_SHIFT)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_636() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3R_641()) {
            this.jj_scanpos = xsp;
            if (jj_3R_642()) {
                return true;
            }
            if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_418() {
        if (jj_3R_435()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        Token xsp;
        while (true) {
            xsp = this.jj_scanpos;
            if (jj_3R_472()) {
                this.jj_scanpos = xsp;
                break;
            }
            if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        }
        return false;
    }

    final private boolean jj_3R_473() {
        if (jj_scan_token(PLUS)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_629() {
        if (jj_3R_637()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_434() {
        if (jj_scan_token(GREATER_OR_EQUAL)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_628() {
        if (jj_3R_97()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_450() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3R_473()) {
            this.jj_scanpos = xsp;
            if (jj_3R_474()) {
                return true;
            }
            if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_418()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_627() {
        if (jj_3R_636()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_452() {
        if (jj_scan_token(RIGHT_SIGNED_SHIFT)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_410() {
        if (jj_scan_token(INSTANCEOF)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_76()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_412() {
        if (jj_scan_token(NOT_EQUAL)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_433() {
        if (jj_scan_token(LESS_OR_EQUAL)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_413() {
        if (jj_3R_418()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        Token xsp;
        while (true) {
            xsp = this.jj_scanpos;
            if (jj_3R_450()) {
                this.jj_scanpos = xsp;
                break;
            }
            if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        }
        return false;
    }

    final private boolean jj_3R_451() {
        if (jj_scan_token(LEFT_SHIFT)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_411() {
        if (jj_scan_token(EQUAL)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_430() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3R_451()) {
            this.jj_scanpos = xsp;
            if (jj_3R_452()) {
                this.jj_scanpos = xsp;
                if (jj_3R_453()) {
                    return true;
                }
                if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                    return false;
                }
            } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_413()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_401() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3R_411()) {
            this.jj_scanpos = xsp;
            if (jj_3R_412()) {
                return true;
            }
            if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_388()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_432() {
        if (jj_scan_token(GREATER_THAN)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_180() {
        if (jj_scan_token(FOR)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(LPAREN)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3R_627()) {
            this.jj_scanpos = xsp;
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(SEMICOLON)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        xsp = this.jj_scanpos;
        if (jj_3R_628()) {
            this.jj_scanpos = xsp;
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(SEMICOLON)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        xsp = this.jj_scanpos;
        if (jj_3R_629()) {
            this.jj_scanpos = xsp;
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(RPAREN)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_230()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_402() {
        if (jj_3R_413()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        Token xsp;
        while (true) {
            xsp = this.jj_scanpos;
            if (jj_3R_430()) {
                this.jj_scanpos = xsp;
                break;
            }
            if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        }
        return false;
    }

    final private boolean jj_3R_431() {
        if (jj_scan_token(LESS)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_417() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3R_431()) {
            this.jj_scanpos = xsp;
            if (jj_3R_432()) {
                this.jj_scanpos = xsp;
                if (jj_3R_433()) {
                    this.jj_scanpos = xsp;
                    if (jj_3R_434()) {
                        return true;
                    }
                    if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                        return false;
                    }
                } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                    return false;
                }
            } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_402()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_393() {
        if (jj_scan_token(BITWISE_AND)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_378()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_396() {
        if (jj_3R_402()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        Token xsp;
        while (true) {
            xsp = this.jj_scanpos;
            if (jj_3R_417()) {
                this.jj_scanpos = xsp;
                break;
            }
            if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        }
        return false;
    }

    final private boolean jj_3R_328() {
        if (jj_scan_token(OR_ASSIGN)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_327() {
        if (jj_scan_token(XOR_ASSIGN)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_384() {
        if (jj_scan_token(XOR)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_357()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_388() {
        if (jj_3R_396()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3R_410()) {
            this.jj_scanpos = xsp;
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_365() {
        if (jj_scan_token(BITWISE_OR)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_333()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_634() {
        if (jj_scan_token(_DEFAULT)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_326() {
        if (jj_scan_token(AND_ASSIGN)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_378() {
        if (jj_3R_388()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        Token xsp;
        while (true) {
            xsp = this.jj_scanpos;
            if (jj_3R_401()) {
                this.jj_scanpos = xsp;
                break;
            }
            if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        }
        return false;
    }

    final private boolean jj_3R_341() {
        if (jj_scan_token(CONDITIONAL_AND)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_295()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_316() {
        if (jj_scan_token(CONDITIONAL_OR)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_246()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_325() {
        if (jj_scan_token(RIGHT_UNSIGNED_SHIFTASSIGN)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_357() {
        if (jj_3R_378()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        Token xsp;
        while (true) {
            xsp = this.jj_scanpos;
            if (jj_3R_393()) {
                this.jj_scanpos = xsp;
                break;
            }
            if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        }
        return false;
    }

    final private boolean jj_3R_324() {
        if (jj_scan_token(RIGHT_SIGNED_SHIFT_ASSIGN)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_333() {
        if (jj_3R_357()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        Token xsp;
        while (true) {
            xsp = this.jj_scanpos;
            if (jj_3R_384()) {
                this.jj_scanpos = xsp;
                break;
            }
            if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        }
        return false;
    }

    final private boolean jj_3R_635() {
        if (jj_3R_234()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_323() {
        if (jj_scan_token(LEFT_SHIFT_ASSIGN)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_633() {
        if (jj_scan_token(CASE)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_97()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_626() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3R_633()) {
            this.jj_scanpos = xsp;
            if (jj_3R_634()) {
                return true;
            }
            if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(COLON)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        while (true) {
            xsp = this.jj_scanpos;
            if (jj_3R_635()) {
                this.jj_scanpos = xsp;
                break;
            }
            if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        }
        return false;
    }

    final private boolean jj_3R_295() {
        if (jj_3R_333()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        Token xsp;
        while (true) {
            xsp = this.jj_scanpos;
            if (jj_3R_365()) {
                this.jj_scanpos = xsp;
                break;
            }
            if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        }
        return false;
    }

    final private boolean jj_3R_322() {
        if (jj_scan_token(MINUS_ASSIGN)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_179() {
        if (jj_scan_token(SWITCH)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(LPAREN)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_97()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(RPAREN)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(LBRACE)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        Token xsp;
        while (true) {
            xsp = this.jj_scanpos;
            if (jj_3R_626()) {
                this.jj_scanpos = xsp;
                break;
            }
            if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        }
        if (jj_scan_token(RBRACE)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_246() {
        if (jj_3R_295()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        Token xsp;
        while (true) {
            xsp = this.jj_scanpos;
            if (jj_3R_341()) {
                this.jj_scanpos = xsp;
                break;
            }
            if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        }
        return false;
    }

    final private boolean jj_3R_321() {
        if (jj_scan_token(PLUS_ASSIGN)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_320() {
        if (jj_scan_token(REMAINDER_ASSIGN)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_217() {
        if (jj_3R_246()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        Token xsp;
        while (true) {
            xsp = this.jj_scanpos;
            if (jj_3R_316()) {
                this.jj_scanpos = xsp;
                break;
            }
            if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        }
        return false;
    }

    final private boolean jj_3R_289() {
        if (jj_scan_token(HOOK)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_107()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(COLON)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_171()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_319() {
        if (jj_scan_token(SLASH_ASSIGN)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_178() {
        if (jj_scan_token(DO)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_230()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(WHILE)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(LPAREN)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_97()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(RPAREN)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(SEMICOLON)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_215() {
        if (jj_scan_token(COMMA)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_107()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_171() {
        if (jj_3R_217()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3R_289()) {
            this.jj_scanpos = xsp;
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_318() {
        if (jj_scan_token(STAR_ASSIGN)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_147() {
        if (jj_scan_token(DOUBLE)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_317() {
        if (jj_scan_token(ASSIGN)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_290() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3R_317()) {
            this.jj_scanpos = xsp;
            if (jj_3R_318()) {
                this.jj_scanpos = xsp;
                if (jj_3R_319()) {
                    this.jj_scanpos = xsp;
                    if (jj_3R_320()) {
                        this.jj_scanpos = xsp;
                        if (jj_3R_321()) {
                            this.jj_scanpos = xsp;
                            if (jj_3R_322()) {
                                this.jj_scanpos = xsp;
                                if (jj_3R_323()) {
                                    this.jj_scanpos = xsp;
                                    if (jj_3R_324()) {
                                        this.jj_scanpos = xsp;
                                        if (jj_3R_325()) {
                                            this.jj_scanpos = xsp;
                                            if (jj_3R_326()) {
                                                this.jj_scanpos = xsp;
                                                if (jj_3R_327()) {
                                                    this.jj_scanpos = xsp;
                                                    if (jj_3R_328()) {
                                                        return true;
                                                    }
                                                    if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                                                        return false;
                                                    }
                                                } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                                                    return false;
                                                }
                                            } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                                                return false;
                                            }
                                        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                                            return false;
                                        }
                                    } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                                        return false;
                                    }
                                } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                                    return false;
                                }
                            } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                                return false;
                            }
                        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                            return false;
                        }
                    } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                        return false;
                    }
                } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                    return false;
                }
            } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_244() {
        if (jj_3R_290()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_107()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_177() {
        if (jj_scan_token(WHILE)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(LPAREN)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_97()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(RPAREN)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_230()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_146() {
        if (jj_scan_token(FLOAT)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_107() {
        if (jj_3R_171()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3R_244()) {
            this.jj_scanpos = xsp;
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_164() {
        if (jj_3R_107()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        Token xsp;
        while (true) {
            xsp = this.jj_scanpos;
            if (jj_3R_215()) {
                this.jj_scanpos = xsp;
                break;
            }
            if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        }
        return false;
    }

    final private boolean jj_3R_145() {
        if (jj_scan_token(LONG)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3_36() {
        if (jj_scan_token(THIS)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_100()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(SEMICOLON)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_100() {
        if (jj_scan_token(LPAREN)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3R_164()) {
            this.jj_scanpos = xsp;
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(RPAREN)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_144() {
        if (jj_scan_token(INT)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3_35() {
        if (jj_3R_99()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(DOT)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_133() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3_35()) {
            this.jj_scanpos = xsp;
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(SUPER)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_100()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(SEMICOLON)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_625() {
        if (jj_scan_token(ELSE)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_230()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_84() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3R_132()) {
            this.jj_scanpos = xsp;
            if (jj_3R_133()) {
                return true;
            }
            if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_132() {
        if (jj_scan_token(THIS)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_100()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(SEMICOLON)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_143() {
        if (jj_scan_token(SHORT)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_176() {
        if (jj_scan_token(IF)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(LPAREN)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_97()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(RPAREN)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_230()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3R_625()) {
            this.jj_scanpos = xsp;
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_204() {
        if (jj_3R_242()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_287() {
        if (jj_scan_token(NULL)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_286() {
        if (jj_scan_token(FALSE)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_112() {
        if (jj_scan_token(LBRACKET)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(RBRACKET)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_285() {
        if (jj_scan_token(TRUE)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_142() {
        if (jj_scan_token(BYTE)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_284() {
        if (jj_scan_token(STRING_LITERAL)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_203() {
        if (jj_scan_token(NEW)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_283() {
        if (jj_scan_token(CHARACTER_LITERAL)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_282() {
        if (jj_scan_token(DOUBLE_LITERAL)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_281() {
        if (jj_scan_token(FLOAT_LITERAL)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_141() {
        if (jj_scan_token(CHAR)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_280() {
        if (jj_scan_token(LONG_LITERAL)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_175() {
        if (jj_scan_token(SEMICOLON)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_279() {
        if (jj_scan_token(INTEGER_LITERAL)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_242() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3R_279()) {
            this.jj_scanpos = xsp;
            if (jj_3R_280()) {
                this.jj_scanpos = xsp;
                if (jj_3R_281()) {
                    this.jj_scanpos = xsp;
                    if (jj_3R_282()) {
                        this.jj_scanpos = xsp;
                        if (jj_3R_283()) {
                            this.jj_scanpos = xsp;
                            if (jj_3R_284()) {
                                this.jj_scanpos = xsp;
                                if (jj_3R_285()) {
                                    this.jj_scanpos = xsp;
                                    if (jj_3R_286()) {
                                        this.jj_scanpos = xsp;
                                        if (jj_3R_287()) {
                                            return true;
                                        }
                                        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                                            return false;
                                        }
                                    } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                                        return false;
                                    }
                                } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                                    return false;
                                }
                            } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                                return false;
                            }
                        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                            return false;
                        }
                    } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                        return false;
                    }
                } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                    return false;
                }
            } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_202() {
        if (jj_scan_token(SUPER)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3_34() {
        if (jj_scan_token(DOT)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(IDENTIFIER)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_111() {
        if (jj_3R_98()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_91() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3R_140()) {
            this.jj_scanpos = xsp;
            if (jj_3R_141()) {
                this.jj_scanpos = xsp;
                if (jj_3R_142()) {
                    this.jj_scanpos = xsp;
                    if (jj_3R_143()) {
                        this.jj_scanpos = xsp;
                        if (jj_3R_144()) {
                            this.jj_scanpos = xsp;
                            if (jj_3R_145()) {
                                this.jj_scanpos = xsp;
                                if (jj_3R_146()) {
                                    this.jj_scanpos = xsp;
                                    if (jj_3R_147()) {
                                        return true;
                                    }
                                    if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                                        return false;
                                    }
                                } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                                    return false;
                                }
                            } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                                return false;
                            }
                        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                            return false;
                        }
                    } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                        return false;
                    }
                } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                    return false;
                }
            } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_140() {
        if (jj_scan_token(BOOLEAN)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_201() {
        if (jj_scan_token(THIS)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_98() {
        if (jj_scan_token(IDENTIFIER)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        Token xsp;
        while (true) {
            xsp = this.jj_scanpos;
            if (jj_3_34()) {
                this.jj_scanpos = xsp;
                break;
            }
            if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        }
        return false;
    }

    final private boolean jj_3R_152() {
        if (jj_3R_76()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_78() {
        if (jj_scan_token(IDENTIFIER)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(COLON)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_230()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_200() {
        if (jj_scan_token(IDENTIFIER)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_93() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3R_151()) {
            this.jj_scanpos = xsp;
            if (jj_3R_152()) {
                return true;
            }
            if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_151() {
        if (jj_scan_token(VOID)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_199() {
        if (jj_scan_token(LPAREN)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_110() {
        if (jj_3R_91()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_76() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3R_110()) {
            this.jj_scanpos = xsp;
            if (jj_3R_111()) {
                return true;
            }
            if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        while (true) {
            xsp = this.jj_scanpos;
            if (jj_3R_112()) {
                this.jj_scanpos = xsp;
                break;
            }
            if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        }
        return false;
    }

    final private boolean jj_3R_198() {
        if (jj_scan_token(BANG)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_262() {
        if (jj_3R_186()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3_33() {
        if (jj_scan_token(LPAREN)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_98()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(LBRACKET)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_261() {
        if (jj_3R_185()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_260() {
        if (jj_3R_184()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_259() {
        if (jj_3R_183()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_258() {
        if (jj_3R_182()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_197() {
        if (jj_scan_token(TILDE)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_257() {
        if (jj_3R_181()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_256() {
        if (jj_3R_180()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_255() {
        if (jj_3R_179()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_139() {
        if (jj_scan_token(LPAREN)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_98()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(RPAREN)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3R_197()) {
            this.jj_scanpos = xsp;
            if (jj_3R_198()) {
                this.jj_scanpos = xsp;
                if (jj_3R_199()) {
                    this.jj_scanpos = xsp;
                    if (jj_3R_200()) {
                        this.jj_scanpos = xsp;
                        if (jj_3R_201()) {
                            this.jj_scanpos = xsp;
                            if (jj_3R_202()) {
                                this.jj_scanpos = xsp;
                                if (jj_3R_203()) {
                                    this.jj_scanpos = xsp;
                                    if (jj_3R_204()) {
                                        return true;
                                    }
                                    if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                                        return false;
                                    }
                                } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                                    return false;
                                }
                            } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                                return false;
                            }
                        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                            return false;
                        }
                    } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                        return false;
                    }
                } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                    return false;
                }
            } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_254() {
        if (jj_3R_178()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_253() {
        if (jj_3R_177()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_252() {
        if (jj_3R_176()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_138() {
        if (jj_scan_token(LPAREN)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_98()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(LBRACKET)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(RBRACKET)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_251() {
        if (jj_3R_131()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_250() {
        if (jj_3R_309()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(SEMICOLON)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_623() {
        if (jj_scan_token(LBRACKET)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(RBRACKET)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_249() {
        if (jj_3R_175()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3_32() {
        if (jj_scan_token(LPAREN)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_91()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_90() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3_32()) {
            this.jj_scanpos = xsp;
            if (jj_3R_138()) {
                this.jj_scanpos = xsp;
                if (jj_3R_139()) {
                    return true;
                }
                if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                    return false;
                }
            } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_620() {
        if (jj_scan_token(LBRACKET)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(RBRACKET)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3_20() {
        if (jj_3R_78()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_230() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3_20()) {
            this.jj_scanpos = xsp;
            if (jj_3R_249()) {
                this.jj_scanpos = xsp;
                if (jj_3R_250()) {
                    this.jj_scanpos = xsp;
                    if (jj_3R_251()) {
                        this.jj_scanpos = xsp;
                        if (jj_3R_252()) {
                            this.jj_scanpos = xsp;
                            if (jj_3R_253()) {
                                this.jj_scanpos = xsp;
                                if (jj_3R_254()) {
                                    this.jj_scanpos = xsp;
                                    if (jj_3R_255()) {
                                        this.jj_scanpos = xsp;
                                        if (jj_3R_256()) {
                                            this.jj_scanpos = xsp;
                                            if (jj_3R_257()) {
                                                this.jj_scanpos = xsp;
                                                if (jj_3R_258()) {
                                                    this.jj_scanpos = xsp;
                                                    if (jj_3R_259()) {
                                                        this.jj_scanpos = xsp;
                                                        if (jj_3R_260()) {
                                                            this.jj_scanpos = xsp;
                                                            if (jj_3R_261()) {
                                                                this.jj_scanpos = xsp;
                                                                if (jj_3R_262()) {
                                                                    return true;
                                                                }
                                                                if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                                                                    return false;
                                                                }
                                                            } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                                                                return false;
                                                            }
                                                        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                                                            return false;
                                                        }
                                                    } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                                                        return false;
                                                    }
                                                } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                                                    return false;
                                                }
                                            } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                                                return false;
                                            }
                                        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                                            return false;
                                        }
                                    } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                                        return false;
                                    }
                                } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                                    return false;
                                }
                            } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                                return false;
                            }
                        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                            return false;
                        }
                    } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                        return false;
                    }
                } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                    return false;
                }
            } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_161() {
        if (jj_scan_token(DOUBLE)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_624() {
        if (jj_scan_token(ASSIGN)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_87()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_160() {
        if (jj_scan_token(FLOAT)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_622() {
        if (jj_scan_token(COMMA)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(IDENTIFIER)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        Token xsp;
        while (true) {
            xsp = this.jj_scanpos;
            if (jj_3R_623()) {
                this.jj_scanpos = xsp;
                break;
            }
            if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        }
        xsp = this.jj_scanpos;
        if (jj_3R_624()) {
            this.jj_scanpos = xsp;
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_621() {
        if (jj_scan_token(ASSIGN)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_87()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_159() {
        if (jj_scan_token(LONG)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_338() {
        if (jj_scan_token(FINAL)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_310() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3R_338()) {
            this.jj_scanpos = xsp;
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_339()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(IDENTIFIER)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        while (true) {
            xsp = this.jj_scanpos;
            if (jj_3R_620()) {
                this.jj_scanpos = xsp;
                break;
            }
            if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        }
        xsp = this.jj_scanpos;
        if (jj_3R_621()) {
            this.jj_scanpos = xsp;
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        while (true) {
            xsp = this.jj_scanpos;
            if (jj_3R_622()) {
                this.jj_scanpos = xsp;
                break;
            }
            if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        }
        return false;
    }

    final private boolean jj_3R_158() {
        if (jj_scan_token(INT)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_157() {
        if (jj_scan_token(SHORT)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_156() {
        if (jj_scan_token(BYTE)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_155() {
        if (jj_scan_token(CHAR)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_266() {
        if (jj_3R_312()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_96() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3R_154()) {
            this.jj_scanpos = xsp;
            if (jj_3R_155()) {
                this.jj_scanpos = xsp;
                if (jj_3R_156()) {
                    this.jj_scanpos = xsp;
                    if (jj_3R_157()) {
                        this.jj_scanpos = xsp;
                        if (jj_3R_158()) {
                            this.jj_scanpos = xsp;
                            if (jj_3R_159()) {
                                this.jj_scanpos = xsp;
                                if (jj_3R_160()) {
                                    this.jj_scanpos = xsp;
                                    if (jj_3R_161()) {
                                        return true;
                                    }
                                    if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                                        return false;
                                    }
                                } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                                    return false;
                                }
                            } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                                return false;
                            }
                        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                            return false;
                        }
                    } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                        return false;
                    }
                } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                    return false;
                }
            } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_154() {
        if (jj_scan_token(BOOLEAN)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_88() {
        if (jj_scan_token(FINAL)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3_19() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3R_88()) {
            this.jj_scanpos = xsp;
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_76()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(IDENTIFIER)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_265() {
        if (jj_3R_311()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_264() {
        if (jj_3R_230()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_263() {
        if (jj_3R_310()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(SEMICOLON)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_314() {
        if (jj_3R_339()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_234() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3R_263()) {
            this.jj_scanpos = xsp;
            if (jj_3R_264()) {
                this.jj_scanpos = xsp;
                if (jj_3R_265()) {
                    this.jj_scanpos = xsp;
                    if (jj_3R_266()) {
                        return true;
                    }
                    if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                        return false;
                    }
                } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                    return false;
                }
            } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_313() {
        if (jj_scan_token(VOID)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_277() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3R_313()) {
            this.jj_scanpos = xsp;
            if (jj_3R_314()) {
                return true;
            }
            if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_187() {
        if (jj_3R_234()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_131() {
        if (jj_scan_token(LBRACE)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        Token xsp;
        while (true) {
            xsp = this.jj_scanpos;
            if (jj_3R_187()) {
                this.jj_scanpos = xsp;
                break;
            }
            if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        }
        if (jj_scan_token(RBRACE)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_363() {
        if (jj_scan_token(LBRACKET)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(RBRACKET)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_362() {
        if (jj_3R_278()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_361() {
        if (jj_3R_96()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_137() {
        if (jj_3R_97()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_339() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3R_361()) {
            this.jj_scanpos = xsp;
            if (jj_3R_362()) {
                return true;
            }
            if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        while (true) {
            xsp = this.jj_scanpos;
            if (jj_3R_363()) {
                this.jj_scanpos = xsp;
                break;
            }
            if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        }
        return false;
    }

    final private boolean jj_3R_136() {
        if (jj_3R_196()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_87() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3R_136()) {
            this.jj_scanpos = xsp;
            if (jj_3R_137()) {
                return true;
            }
            if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3_18() {
        if (jj_scan_token(COMMA)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_87()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_558() {
        if (jj_scan_token(COMMA)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_557() {
        if (jj_3R_87()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        Token xsp;
        while (true) {
            xsp = this.jj_scanpos;
            if (jj_3_18()) {
                this.jj_scanpos = xsp;
                break;
            }
            if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        }
        return false;
    }

    final private boolean jj_3R_555() {
        if (jj_scan_token(LBRACKET)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(RBRACKET)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_552() {
        Token xsp;
        if (jj_3R_555()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        while (true) {
            xsp = this.jj_scanpos;
            if (jj_3R_555()) {
                this.jj_scanpos = xsp;
                break;
            }
            if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        }
        if (jj_3R_196()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_196() {
        if (jj_scan_token(LBRACE)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3R_557()) {
            this.jj_scanpos = xsp;
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        xsp = this.jj_scanpos;
        if (jj_3R_558()) {
            this.jj_scanpos = xsp;
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(RBRACE)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3_30() {
        if (jj_scan_token(LBRACKET)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(RBRACKET)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3_29() {
        if (jj_scan_token(LBRACKET)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_97()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(RBRACKET)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3_31() {
        Token xsp;
        if (jj_3_29()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        while (true) {
            xsp = this.jj_scanpos;
            if (jj_3_29()) {
                this.jj_scanpos = xsp;
                break;
            }
            if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        }
        while (true) {
            xsp = this.jj_scanpos;
            if (jj_3_30()) {
                this.jj_scanpos = xsp;
                break;
            }
            if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        }
        return false;
    }

    final private boolean jj_3_17() {
        if (jj_3R_74()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_549() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3_31()) {
            this.jj_scanpos = xsp;
            if (jj_3R_552()) {
                return true;
            }
            if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3_16() {
        if (jj_3R_82()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3_15() {
        if (jj_3R_81()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_617() {
        if (jj_3R_571()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_553() {
        if (jj_3R_556()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_616() {
        if (jj_3R_570()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_615() {
        if (jj_3R_568()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_614() {
        if (jj_3R_567()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_588() {
        if (jj_scan_token(EXTENDS)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_594()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_608() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3R_614()) {
            this.jj_scanpos = xsp;
            if (jj_3R_615()) {
                this.jj_scanpos = xsp;
                if (jj_3R_616()) {
                    this.jj_scanpos = xsp;
                    if (jj_3R_617()) {
                        return true;
                    }
                    if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                        return false;
                    }
                } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                    return false;
                }
            } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_551() {
        if (jj_3R_86()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3R_553()) {
            this.jj_scanpos = xsp;
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_550() {
        if (jj_3R_549()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_589() {
        if (jj_3R_608()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_276() {
        if (jj_scan_token(NEW)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_278()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3R_550()) {
            this.jj_scanpos = xsp;
            if (jj_3R_551()) {
                return true;
            }
            if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_312() {
        if (jj_scan_token(INTERFACE)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(IDENTIFIER)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3R_588()) {
            this.jj_scanpos = xsp;
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_scan_token(LBRACE)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        while (true) {
            xsp = this.jj_scanpos;
            if (jj_3R_589()) {
                this.jj_scanpos = xsp;
                break;
            }
            if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        }
        if (jj_scan_token(RBRACE)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3_28() {
        if (jj_scan_token(NEW)) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_96()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_549()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_238() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (jj_3_28()) {
            this.jj_scanpos = xsp;
            if (jj_3R_276()) {
                return true;
            }
            if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
                return false;
            }
        } else if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_568() {
        if (jj_3R_572()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        if (jj_3R_312()) {
            return true;
        }
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos) {
            return false;
        }
        return false;
    }

    public ParserTokenManager token_source;
    ASCII_UCodeESC_CharStream jj_input_stream;
    public Token token, jj_nt;
    private int jj_ntk;
    private Token jj_scanpos, jj_lastpos;
    private int jj_la;
    public boolean lookingAhead = false;
    private boolean jj_semLA;
    private int jj_gen;
    final private int[] jj_la1 = new int[201];
    final private int[] jj_la1_0 = { 0x66b3c000, 0x0, 0x40204000, 0x26938000, 0x0, 0x0, 0x40204000, 0x40204000, 0x0, 0x0, 0x40004000, 0x0, 0x40004000, 0x40004000, 0x10000000, 0x0, 0x4432c000,
            0x4412c000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x44128000, 0x40000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x66b38000, 0x24128000, 0x10000000, 0x4432c000, 0x4412c000, 0x24128000, 0x0,
            0x24128000, 0x66b38000, 0x26b38000, 0x40000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x26938000, 0x8000000, 0x1040000, 0x1040000, 0x66b38000, 0x64128000, 0x24128000, 0x24128000, 0x24128000, 0x0, 0x0,
            0x0, 0x24128000, 0x80000, 0x80000000, 0x0, 0x0, 0x24128000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x24128000, 0x0, 0x24128000,
            0x0, 0x0, 0x0, 0x20000000, 0x0, 0x0, 0x0, 0x24128000, 0x0, 0x20000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4128000, 0x0, 0x4128000, 0x4128000, 0x20000000, 0x0, 0x4128000, 0x0, 0x4128000,
            0x4128000, 0x20000000, 0x24128000, 0x0, 0x24128000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x24128000, 0x0, 0x0, 0x24128000,
            0x0, 0x0, 0x0, 0x20000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4432c000, 0x4412c000, 0x0, 0x40004000, 0x40004000, 0x0, 0x26938000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x44128000, 0x40000000, 0x0, 0x0, 0x0,
            0x66b38000, 0x26b38000, 0x26938000, 0x0, 0x0, 0x24128000, 0x1040000, 0x1040000, 0x66b38000, 0x8000000, 0x64128000, 0x24128000, 0x24128000, 0x24128000, 0x0, 0x0, 0x0, 0x24128000,
            0x40000000, 0x0, 0x80000, 0x80000000, 0x0, 0x0, 0x24128000, 0x0, 0x24128000, 0x10000000, 0x0, 0x10000000, 0x4432c000, 0x4412c000, };
    final private int[] jj_la1_1 = { 0xfdffffab, 0x2020, 0x4449c500, 0xb9f61a8b, 0x2000, 0x20, 0x4449c500, 0x4449c500, 0x0, 0x0, 0x4449c500, 0x0, 0x4449c400, 0x4449c400, 0x0, 0x10, 0x644dc781,
            0x444dc681, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2000000, 0x0, 0x0, 0x40281, 0x0, 0x0, 0x80000, 0x1c000, 0x1c000, 0x2000000, 0xb9f61b8b, 0x28941a81, 0x0, 0x644dc781, 0x444dc681, 0x28941a81,
            0x0, 0x28941a81, 0xb9f61b8b, 0xb9f61b8b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xb9f61a8b, 0x0, 0x0, 0x0, 0xb9f61b8b, 0x28941a81, 0x28941a81, 0x28941a81, 0x28941a81, 0x0, 0x0, 0x0, 0x28941a81,
            0x0, 0x0, 0x0, 0x0, 0x28941a81, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x40, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x28941a81, 0x0, 0x28941a81, 0x0, 0x0, 0x0, 0x8901800, 0x0,
            0x0, 0x0, 0x28941a81, 0x0, 0x8001000, 0x0, 0x0, 0x800, 0x0, 0x0, 0x40281, 0x0, 0x20040281, 0x40281, 0x8901800, 0x0, 0x40281, 0x0, 0x20040281, 0x40281, 0x8001000, 0x28941a81, 0x0,
            0x28941a81, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x40, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x28941a81, 0x0, 0x0, 0x28941a81, 0x0, 0x0, 0x0, 0x8901800, 0x0, 0x0, 0x0,
            0x0, 0x800, 0x644dc781, 0x444dc681, 0x80000, 0x4449c400, 0x4449c400, 0x2000000, 0xb9f61a8b, 0x2000000, 0x0, 0x0, 0x0, 0x0, 0x40281, 0x0, 0x0, 0x0, 0x0, 0xb9f61b8b, 0xb9f61b8b, 0xb9f61a8b,
            0x0, 0x0, 0x28941a81, 0x0, 0x0, 0xb9f61b8b, 0x0, 0x28941a81, 0x28941a81, 0x28941a81, 0x28941a81, 0x0, 0x0, 0x0, 0x28941a81, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x28941a81, 0x0, 0x28941a81, 0x0,
            0x10, 0x0, 0x644dc781, 0x444dc681, };
    final private int[] jj_la1_2 = { 0x608a763, 0x0, 0x0, 0x608a763, 0x0, 0x0, 0x80000, 0x80000, 0x400, 0x200000, 0x0, 0x100000, 0x0, 0x0, 0x0, 0x0, 0x88400, 0x80400, 0x20000, 0x400000, 0x100000,
            0x20000, 0x400000, 0x20000, 0x0, 0x88000, 0x100000, 0x400, 0x0, 0x20000, 0x0, 0x0, 0x0, 0x0, 0x8a763, 0x2763, 0x0, 0x400, 0x400, 0x600a763, 0x100000, 0x600a763, 0x8a763, 0x8a763, 0x0,
            0x20000, 0x400000, 0x100000, 0x20000, 0x400000, 0x8a763, 0x0, 0x0, 0x0, 0x8a763, 0x2763, 0x6002763, 0x2763, 0x2763, 0x100000, 0x400, 0x400, 0x6002763, 0x0, 0x0, 0x400000, 0x400000,
            0x2763, 0x400000, 0x400000, 0x8000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20000000, 0x20000000, 0x0, 0xc1800000, 0xc1800000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6002763, 0x6000000, 0x2763, 0x2000,
            0x0, 0x0, 0x2363, 0x400, 0x222000, 0x8000, 0x6002763, 0x100000, 0x363, 0x8000, 0x22000, 0x0, 0x20000, 0x20000, 0x400, 0x20000, 0x400, 0x0, 0x6002763, 0x2000, 0x400, 0x20000, 0x400, 0x0,
            0x363, 0x2763, 0x100000, 0x6002763, 0x400000, 0x400000, 0x8000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20000000, 0x20000000, 0x0, 0xc1800000, 0xc1800000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
            0x6002763, 0x6000000, 0x6000000, 0x2763, 0x0, 0x0, 0x2000, 0x2363, 0x400, 0x222000, 0x8000, 0x22000, 0x0, 0x8400, 0x400, 0x0, 0x0, 0x0, 0x0, 0x8a763, 0x0, 0x88000, 0x100000, 0x20000,
            0x100000, 0x400, 0x0, 0x100000, 0x400000, 0x20000, 0x8a763, 0x8a763, 0x8a763, 0x400000, 0x400000, 0x2763, 0x0, 0x0, 0x8a763, 0x0, 0x2763, 0x6002763, 0x2763, 0x2763, 0x100000, 0x400,
            0x400, 0x6002763, 0x0, 0x100000, 0x0, 0x0, 0x20000, 0x20000, 0x600a763, 0x100000, 0x600a763, 0x0, 0x0, 0x0, 0x400, 0x400, };
    final private int[] jj_la1_3 = { 0x78, 0x0, 0x0, 0x78, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
            0x0, 0x0, 0x18, 0x0, 0x0, 0x0, 0x0, 0x78, 0x0, 0x78, 0x18, 0x18, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x18, 0x0, 0x0, 0x0, 0x18, 0x18, 0x78, 0x18, 0x18, 0x0, 0x0, 0x0, 0x78, 0x0, 0x0, 0x7ff0018,
            0x7ff0018, 0x18, 0x7ff0000, 0x7ff0000, 0x0, 0x2, 0x4, 0x400, 0x800, 0x200, 0x1, 0x1, 0x0, 0x0, 0x0, 0xe000, 0xe000, 0x60, 0x60, 0x1180, 0x1180, 0x78, 0x0, 0x0, 0x0, 0x18, 0x18, 0x0, 0x0,
            0x0, 0x0, 0x78, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x78, 0x7ff0000, 0x7ff0000, 0x0, 0x2, 0x4, 0x400, 0x800, 0x200, 0x1,
            0x1, 0x0, 0x0, 0x0, 0xe000, 0xe000, 0x60, 0x60, 0x1180, 0x1180, 0x60, 0x78, 0x0, 0x0, 0x0, 0x18, 0x18, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x18, 0x0, 0x0,
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x18, 0x18, 0x18, 0x7ff0018, 0x7ff0018, 0x18, 0x0, 0x0, 0x18, 0x0, 0x18, 0x78, 0x18, 0x18, 0x0, 0x0, 0x0, 0x78, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x78,
            0x0, 0x78, 0x0, 0x0, 0x0, 0x0, 0x0, };
    final private JJCalls[] jj_2_rtns = new JJCalls[59];
    private boolean jj_rescan = false;
    private int jj_gc = 0;

    public Parser(final java.io.InputStream stream) {
        this.jj_input_stream = new ASCII_UCodeESC_CharStream(stream, 1, 1);
        this.token_source = new ParserTokenManager(this.jj_input_stream);
        this.token = new Token();
        this.jj_ntk = -1;
        this.jj_gen = 0;
        for (int i = 0; i < 201; i++) {
            this.jj_la1[i] = -1;
        }
        for (int i = 0; i < this.jj_2_rtns.length; i++) {
            this.jj_2_rtns[i] = new JJCalls();
        }
    }

    public void ReInit(final java.io.InputStream stream) {
        this.jj_input_stream.ReInit(stream, 1, 1);
        this.token_source.ReInit(this.jj_input_stream);
        this.token = new Token();
        this.jj_ntk = -1;
        this.jj_gen = 0;
        for (int i = 0; i < 201; i++) {
            this.jj_la1[i] = -1;
        }
        for (int i = 0; i < this.jj_2_rtns.length; i++) {
            this.jj_2_rtns[i] = new JJCalls();
        }
    }

    public Parser(final java.io.Reader stream) {
        this.jj_input_stream = new ASCII_UCodeESC_CharStream(stream, 1, 1);
        this.token_source = new ParserTokenManager(this.jj_input_stream);
        this.token = new Token();
        this.jj_ntk = -1;
        this.jj_gen = 0;
        for (int i = 0; i < 201; i++) {
            this.jj_la1[i] = -1;
        }
        for (int i = 0; i < this.jj_2_rtns.length; i++) {
            this.jj_2_rtns[i] = new JJCalls();
        }
    }

    public void ReInit(final java.io.Reader stream) {
        this.jj_input_stream.ReInit(stream, 1, 1);
        this.token_source.ReInit(this.jj_input_stream);
        this.token = new Token();
        this.jj_ntk = -1;
        this.jj_gen = 0;
        for (int i = 0; i < 201; i++) {
            this.jj_la1[i] = -1;
        }
        for (int i = 0; i < this.jj_2_rtns.length; i++) {
            this.jj_2_rtns[i] = new JJCalls();
        }
    }

    public Parser(final ParserTokenManager tm) {
        this.token_source = tm;
        this.token = new Token();
        this.jj_ntk = -1;
        this.jj_gen = 0;
        for (int i = 0; i < 201; i++) {
            this.jj_la1[i] = -1;
        }
        for (int i = 0; i < this.jj_2_rtns.length; i++) {
            this.jj_2_rtns[i] = new JJCalls();
        }
    }

    public void ReInit(final ParserTokenManager tm) {
        this.token_source = tm;
        this.token = new Token();
        this.jj_ntk = -1;
        this.jj_gen = 0;
        for (int i = 0; i < 201; i++) {
            this.jj_la1[i] = -1;
        }
        for (int i = 0; i < this.jj_2_rtns.length; i++) {
            this.jj_2_rtns[i] = new JJCalls();
        }
    }

    final private Token jj_consume_token(final int kind) throws ParseException {
        Token oldToken;
        if ((oldToken = this.token).next != null) {
            this.token = this.token.next;
        } else {
            this.token = this.token.next = this.token_source.getNextToken();
        }
        this.jj_ntk = -1;
        if (this.token.kind == kind) {
            this.jj_gen++;
            if (++this.jj_gc > 100) {
                this.jj_gc = 0;
                for (int i = 0; i < this.jj_2_rtns.length; i++) {
                    JJCalls c = this.jj_2_rtns[i];
                    while (c != null) {
                        if (c.gen < this.jj_gen) {
                            c.first = null;
                        }
                        c = c.next;
                    }
                }
            }
            return this.token;
        }
        this.token = oldToken;
        this.jj_kind = kind;
        throw generateParseException();
    }

    final private boolean jj_scan_token(final int kind) {
        if (this.jj_scanpos == this.jj_lastpos) {
            this.jj_la--;
            if (this.jj_scanpos.next == null) {
                this.jj_lastpos = this.jj_scanpos = this.jj_scanpos.next = this.token_source.getNextToken();
            } else {
                this.jj_lastpos = this.jj_scanpos = this.jj_scanpos.next;
            }
        } else {
            this.jj_scanpos = this.jj_scanpos.next;
        }
        if (this.jj_rescan) {
            int i = 0;
            Token tok = this.token;
            while (tok != null && tok != this.jj_scanpos) {
                i++;
                tok = tok.next;
            }
            if (tok != null) {
                jj_add_error_token(kind, i);
            }
        }
        return this.jj_scanpos.kind != kind;
    }

    final public Token getNextToken() {
        if (this.token.next != null) {
            this.token = this.token.next;
        } else {
            this.token = this.token.next = this.token_source.getNextToken();
        }
        this.jj_ntk = -1;
        this.jj_gen++;
        return this.token;
    }

    final public Token getToken(final int index) {
        Token t = this.lookingAhead ? this.jj_scanpos : this.token;
        for (int i = 0; i < index; i++) {
            if (t.next != null) {
                t = t.next;
            } else {
                t = t.next = this.token_source.getNextToken();
            }
        }
        return t;
    }

    final private int jj_ntk() {
        try {
            if ((this.jj_nt = this.token.next) == null) {
                return this.jj_ntk = (this.token.next = this.token_source.getNextToken()).kind;
            } else {
                return this.jj_ntk = this.jj_nt.kind;
            }
        } catch (final TokenMgrError e) {
            throw new ParseError(e.getLocalizedMessage());
        }
    }

    private final java.util.Vector jj_expentries = new java.util.Vector();
    private int[] jj_expentry;
    private int jj_kind = -1;
    private final int[] jj_lasttokens = new int[100];
    private int jj_endpos;

    private void jj_add_error_token(final int kind, final int pos) {
        if (pos >= 100) {
            return;
        }
        if (pos == this.jj_endpos + 1) {
            this.jj_lasttokens[this.jj_endpos++] = kind;
        } else if (this.jj_endpos != 0) {
            this.jj_expentry = new int[this.jj_endpos];
            for (int i = 0; i < this.jj_endpos; i++) {
                this.jj_expentry[i] = this.jj_lasttokens[i];
            }
            boolean exists = false;
            for (final java.util.Enumeration enumeration = this.jj_expentries.elements(); enumeration.hasMoreElements();) {
                final int[] oldentry = (int[]) enumeration.nextElement();
                if (oldentry.length == this.jj_expentry.length) {
                    exists = true;
                    for (int i = 0; i < this.jj_expentry.length; i++) {
                        if (oldentry[i] != this.jj_expentry[i]) {
                            exists = false;
                            break;
                        }
                    }
                    if (exists) {
                        break;
                    }
                }
            }
            if (!exists) {
                this.jj_expentries.addElement(this.jj_expentry);
            }
            if (pos != 0) {
                this.jj_lasttokens[(this.jj_endpos = pos) - 1] = kind;
            }
        }
    }

    final public ParseException generateParseException() {
        this.jj_expentries.removeAllElements();
        final boolean[] la1tokens = new boolean[123];
        for (int i = 0; i < 123; i++) {
            la1tokens[i] = false;
        }
        if (this.jj_kind >= 0) {
            la1tokens[this.jj_kind] = true;
            this.jj_kind = -1;
        }
        for (int i = 0; i < 201; i++) {
            if (this.jj_la1[i] == this.jj_gen) {
                for (int j = 0; j < 32; j++) {
                    if ((this.jj_la1_0[i] & 1 << j) != 0) {
                        la1tokens[j] = true;
                    }
                    if ((this.jj_la1_1[i] & 1 << j) != 0) {
                        la1tokens[32 + j] = true;
                    }
                    if ((this.jj_la1_2[i] & 1 << j) != 0) {
                        la1tokens[64 + j] = true;
                    }
                    if ((this.jj_la1_3[i] & 1 << j) != 0) {
                        la1tokens[96 + j] = true;
                    }
                }
            }
        }
        for (int i = 0; i < 123; i++) {
            if (la1tokens[i]) {
                this.jj_expentry = new int[1];
                this.jj_expentry[0] = i;
                this.jj_expentries.addElement(this.jj_expentry);
            }
        }
        this.jj_endpos = 0;
        jj_rescan_token();
        jj_add_error_token(0, 0);
        final int[][] exptokseq = new int[this.jj_expentries.size()][];
        for (int i = 0; i < this.jj_expentries.size(); i++) {
            exptokseq[i] = (int[]) this.jj_expentries.elementAt(i);
        }
        return new ParseException(this.token, exptokseq, tokenImage);
    }

    final public void enable_tracing() {
    }

    final public void disable_tracing() {
    }

    final private void jj_rescan_token() {
        this.jj_rescan = true;
        for (int i = 0; i < 59; i++) {
            JJCalls p = this.jj_2_rtns[i];
            do {
                if (p.gen > this.jj_gen) {
                    this.jj_la = p.arg;
                    this.jj_lastpos = this.jj_scanpos = p.first;
                    switch (i) {
                    case 0:
                        jj_3_1();
                        break;
                    case 1:
                        jj_3_2();
                        break;
                    case 2:
                        jj_3_3();
                        break;
                    case 3:
                        jj_3_4();
                        break;
                    case 4:
                        jj_3_5();
                        break;
                    case 5:
                        jj_3_6();
                        break;
                    case 6:
                        jj_3_7();
                        break;
                    case 7:
                        jj_3_8();
                        break;
                    case 8:
                        jj_3_9();
                        break;
                    case 9:
                        jj_3_10();
                        break;
                    case 10:
                        jj_3_11();
                        break;
                    case 11:
                        jj_3_12();
                        break;
                    case 12:
                        jj_3_13();
                        break;
                    case 13:
                        jj_3_14();
                        break;
                    case 14:
                        jj_3_15();
                        break;
                    case 15:
                        jj_3_16();
                        break;
                    case 16:
                        jj_3_17();
                        break;
                    case 17:
                        jj_3_18();
                        break;
                    case 18:
                        jj_3_19();
                        break;
                    case 19:
                        jj_3_20();
                        break;
                    case 20:
                        jj_3_21();
                        break;
                    case 21:
                        jj_3_22();
                        break;
                    case 22:
                        jj_3_23();
                        break;
                    case 23:
                        jj_3_24();
                        break;
                    case 24:
                        jj_3_25();
                        break;
                    case 25:
                        jj_3_26();
                        break;
                    case 26:
                        jj_3_27();
                        break;
                    case 27:
                        jj_3_28();
                        break;
                    case 28:
                        jj_3_29();
                        break;
                    case 29:
                        jj_3_30();
                        break;
                    case 30:
                        jj_3_31();
                        break;
                    case 31:
                        jj_3_32();
                        break;
                    case 32:
                        jj_3_33();
                        break;
                    case 33:
                        jj_3_34();
                        break;
                    case 34:
                        jj_3_35();
                        break;
                    case 35:
                        jj_3_36();
                        break;
                    case 36:
                        jj_3_37();
                        break;
                    case 37:
                        jj_3_38();
                        break;
                    case 38:
                        jj_3_39();
                        break;
                    case 39:
                        jj_3_40();
                        break;
                    case 40:
                        jj_3_41();
                        break;
                    case 41:
                        jj_3_42();
                        break;
                    case 42:
                        jj_3_43();
                        break;
                    case 43:
                        jj_3_44();
                        break;
                    case 44:
                        jj_3_45();
                        break;
                    case 45:
                        jj_3_46();
                        break;
                    case 46:
                        jj_3_47();
                        break;
                    case 47:
                        jj_3_48();
                        break;
                    case 48:
                        jj_3_49();
                        break;
                    case 49:
                        jj_3_50();
                        break;
                    case 50:
                        jj_3_51();
                        break;
                    case 51:
                        jj_3_52();
                        break;
                    case 52:
                        jj_3_53();
                        break;
                    case 53:
                        jj_3_54();
                        break;
                    case 54:
                        jj_3_55();
                        break;
                    case 55:
                        jj_3_56();
                        break;
                    case 56:
                        jj_3_57();
                        break;
                    case 57:
                        jj_3_58();
                        break;
                    case 58:
                        jj_3_59();
                        break;
                    }
                }
                p = p.next;
            } while (p != null);
        }
        this.jj_rescan = false;
    }

    final private void jj_save(final int index, final int xla) {
        JJCalls p = this.jj_2_rtns[index];
        while (p.gen > this.jj_gen) {
            if (p.next == null) {
                p = p.next = new JJCalls();
                break;
            }
            p = p.next;
        }
        p.gen = this.jj_gen + xla - this.jj_la;
        p.first = this.token;
        p.arg = xla;
    }

    static final class JJCalls {
        int gen;
        Token first;
        int arg;
        JJCalls next;
    }

}
